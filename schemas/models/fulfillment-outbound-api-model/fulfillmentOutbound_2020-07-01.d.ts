/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    "/fba/outbound/2020-07-01/fulfillmentOrders/preview": {
        /**
         * Returns a list of fulfillment order previews based on shipping criteria that you specify.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 2 | 30 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        post: operations["getFulfillmentPreview"];
    };
    "/fba/outbound/2020-07-01/fulfillmentOrders": {
        /**
         * Returns a list of fulfillment orders fulfilled after (or at) a specified date-time, or indicated by the next token parameter.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 2 | 30 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        get: operations["listAllFulfillmentOrders"];
        /**
         * Requests that Amazon ship items from the seller's inventory in Amazon's fulfillment network to a destination address.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 2 | 30 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        post: operations["createFulfillmentOrder"];
    };
    "/fba/outbound/2020-07-01/tracking": {
        /**
         * Returns delivery tracking information for a package in an outbound shipment for a Multi-Channel Fulfillment order.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 2 | 30 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        get: operations["getPackageTrackingDetails"];
    };
    "/fba/outbound/2020-07-01/returnReasonCodes": {
        /**
         * Returns a list of return reason codes for a seller SKU in a given marketplace.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 2 | 30 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        get: operations["listReturnReasonCodes"];
    };
    "/fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}/return": {
        /**
         * Creates a fulfillment return.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 2 | 30 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        put: operations["createFulfillmentReturn"];
    };
    "/fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}": {
        /**
         * Returns the fulfillment order indicated by the specified order identifier.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 2 | 30 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        get: operations["getFulfillmentOrder"];
        /**
         * Updates and/or requests shipment for a fulfillment order with an order hold on it.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 2 | 30 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        put: operations["updateFulfillmentOrder"];
    };
    "/fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}/cancel": {
        /**
         * Requests that Amazon stop attempting to fulfill the fulfillment order indicated by the specified order identifier.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 2 | 30 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        put: operations["cancelFulfillmentOrder"];
    };
    "/fba/outbound/2020-07-01/features": {
        /**
         * Returns a list of features available for Multi-Channel Fulfillment orders in the marketplace you specify, and whether the seller for which you made the call is enrolled for each feature.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 2 | 30 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        get: operations["getFeatures"];
    };
    "/fba/outbound/2020-07-01/features/inventory/{featureName}": {
        /**
         * Returns a list of inventory items that are eligible for the fulfillment feature you specify.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 2 | 30 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        get: operations["getFeatureInventory"];
    };
    "/fba/outbound/2020-07-01/features/inventory/{featureName}/{sellerSku}": {
        /**
         * Returns the number of items with the sellerSKU you specify that can have orders fulfilled using the specified feature. Note that if the sellerSKU isn't eligible, the response will contain an empty skuInfo object.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 2 | 30 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        get: operations["getFeatureSKU"];
    };
}
export interface definitions {
    /** @description Error response returned when the request is unsuccessful. */
    Error: {
        /** @description An error code that identifies the type of error that occurred. */
        code: string;
        /** @description A message that describes the error condition. */
        message: string;
        /** @description Additional details that can help the caller understand or fix the issue. */
        details?: string;
    };
    /** @description A list of error responses returned when a request is unsuccessful. */
    ErrorList: definitions["Error"][];
    /** @description A physical address. */
    Address: {
        /** @description The name of the person, business or institution at the address. */
        name: string;
        /** @description The first line of the address. */
        addressLine1: string;
        /** @description Additional address information, if required. */
        addressLine2?: string;
        /** @description Additional address information, if required. */
        addressLine3?: string;
        /** @description The city where the person, business, or institution is located. */
        city?: string;
        /** @description The district or county where the person, business, or institution is located. */
        districtOrCounty?: string;
        /** @description The state or region where the person, business or institution is located. */
        stateOrRegion: string;
        /** @description The postal code of the address. */
        postalCode?: string;
        /** @description The two digit country code. In ISO 3166-1 alpha-2 format. */
        countryCode: string;
        /** @description The phone number of the person, business, or institution located at the address. */
        phone?: string;
    };
    /** @description The COD (Cash On Delivery) charges that you associate with a COD fulfillment order. */
    CODSettings: {
        /** @description When true, this fulfillment order requires a COD (Cash On Delivery) payment. */
        isCodRequired: boolean;
        /** @description The amount of the COD charge to be collected from the recipient for a COD order. */
        codCharge?: definitions["Money"];
        /** @description The amount of the tax on the COD charge to be collected from the recipient for a COD order. */
        codChargeTax?: definitions["Money"];
        /** @description The amount of the tax on the COD charge to be collected from the recipient for a COD order. */
        shippingCharge?: definitions["Money"];
        /** @description The amount of the tax on the shipping charge to be collected from the recipient for a COD order. */
        shippingChargeTax?: definitions["Money"];
    };
    /** @description Item information for creating a fulfillment order. */
    CreateFulfillmentOrderItem: {
        /** @description The seller SKU of the item. */
        sellerSku: string;
        /** @description A fulfillment order item identifier that the seller creates to track fulfillment order items. Used to disambiguate multiple fulfillment items that have the same SellerSKU. For example, the seller might assign different SellerFulfillmentOrderItemId values to two items in a fulfillment order that share the same SellerSKU but have different GiftMessage values. */
        sellerFulfillmentOrderItemId: string;
        quantity: definitions["Quantity"];
        /** @description A message to the gift recipient, if applicable. */
        giftMessage?: string;
        /** @description Item-specific text that displays in recipient-facing materials such as the outbound shipment packing slip. */
        displayableComment?: string;
        /** @description Amazon's fulfillment network SKU of the item. */
        fulfillmentNetworkSku?: string;
        /** @description The monetary value assigned by the seller to this item. */
        perUnitDeclaredValue?: definitions["Money"];
        /** @description The amount to be collected from the recipient for this item in a COD (Cash On Delivery) order. */
        perUnitPrice?: definitions["Money"];
        /** @description The tax on the amount to be collected from the recipient for this item in a COD (Cash On Delivery) order. */
        perUnitTax?: definitions["Money"];
    };
    /** @description An array of item information for creating a fulfillment order. */
    CreateFulfillmentOrderItemList: definitions["CreateFulfillmentOrderItem"][];
    /** @description The FulfillmentPolicy value specified when you submitted the createFulfillmentOrder operation. */
    FulfillmentPolicy: "FillOrKill" | "FillAll" | "FillAllAvailable";
    /** @description The current status of the fulfillment order. */
    FulfillmentOrderStatus: "New" | "Received" | "Planning" | "Processing" | "Cancelled" | "Complete" | "CompletePartialled" | "Unfulfillable" | "Invalid";
    /** @description The request body schema for the createFulfillmentOrder operation. */
    CreateFulfillmentOrderRequest: {
        /** @description The marketplace the fulfillment order is placed against. */
        marketplaceId?: string;
        /** @description A fulfillment order identifier that the seller creates to track their fulfillment order. The SellerFulfillmentOrderId must be unique for each fulfillment order that a seller creates. If the seller's system already creates unique order identifiers, then these might be good values for them to use. */
        sellerFulfillmentOrderId: string;
        /**
         * @description A fulfillment order identifier that the seller creates. This value displays as the order identifier in recipient-facing materials such as the outbound shipment packing slip. The value of DisplayableOrderId should match the order identifier that the seller provides to the recipient. The seller can use the SellerFulfillmentOrderId for this value or they can specify an alternate value if they want the recipient to reference an alternate order identifier.
         *
         * The value must be an alpha-numeric or ISO 8859-1 compliant string from one to 40 characters in length. Cannot contain two spaces in a row. Leading and trailing white space is removed.
         */
        displayableOrderId: string;
        /** @description The date and time of the fulfillment order. Displays as the order date in recipient-facing materials such as the outbound shipment packing slip. */
        displayableOrderDate: definitions["Timestamp"];
        /** @description Order-specific text that appears in recipient-facing materials such as the outbound shipment packing slip. */
        displayableOrderComment: string;
        /** @description The shipping method for the fulfillment order. */
        shippingSpeedCategory: definitions["ShippingSpeedCategory"];
        deliveryWindow?: definitions["DeliveryWindow"];
        /** @description The destination address for the fulfillment order. */
        destinationAddress: definitions["Address"];
        fulfillmentAction?: definitions["FulfillmentAction"];
        fulfillmentPolicy?: definitions["FulfillmentPolicy"];
        codSettings?: definitions["CODSettings"];
        /** @description The two-character country code for the country from which the fulfillment order ships. Must be in ISO 3166-1 alpha-2 format. */
        shipFromCountryCode?: string;
        notificationEmails?: definitions["NotificationEmailList"];
        /** @description A list of features and their fulfillment policies to apply to the order. */
        featureConstraints?: definitions["FeatureSettings"][];
        /** @description A list of items to include in the fulfillment order preview, including quantity. */
        items: definitions["CreateFulfillmentOrderItemList"];
    };
    /** @description The createFulfillmentReturn operation creates a fulfillment return for items that were fulfilled using the createFulfillmentOrder operation. For calls to createFulfillmentReturn, you must include ReturnReasonCode values returned by a previous call to the listReturnReasonCodes operation. */
    CreateFulfillmentReturnRequest: {
        items: definitions["CreateReturnItemList"];
    };
    CreateFulfillmentReturnResult: {
        returnItems?: definitions["ReturnItemList"];
        invalidReturnItems?: definitions["InvalidReturnItemList"];
        returnAuthorizations?: definitions["ReturnAuthorizationList"];
    };
    /** @description The response schema for the createFulfillmentReturn operation. */
    CreateFulfillmentReturnResponse: {
        /** @description The payload for the createFulfillmentReturn operation. */
        payload?: definitions["CreateFulfillmentReturnResult"];
        /** @description One or more unexpected errors occurred during the createFulfillmentReturn operation. */
        errors?: definitions["ErrorList"];
    };
    /** @description An item that Amazon accepted for return. */
    CreateReturnItem: {
        /** @description An identifier assigned by the seller to the return item. */
        sellerReturnItemId: string;
        /** @description The identifier assigned to the item by the seller when the fulfillment order was created. */
        sellerFulfillmentOrderItemId: string;
        /** @description The identifier for the shipment that is associated with the return item. */
        amazonShipmentId: string;
        /** @description The return reason code assigned to the return item by the seller. */
        returnReasonCode: string;
        /** @description An optional comment about the return item. */
        returnComment?: string;
    };
    /** @description An array of items to be returned. */
    CreateReturnItemList: definitions["CreateReturnItem"][];
    /** @description An amount of money, including units in the form of currency. */
    Money: {
        /** @description Three digit currency code in ISO 4217 format. */
        currencyCode: string;
        value: definitions["Decimal"];
    };
    /** @description A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation. */
    Decimal: string;
    /** @description The time range within which a Scheduled Delivery fulfillment order should be delivered. */
    DeliveryWindow: {
        /** @description The date and time of the start of the Scheduled Delivery window, in ISO 8601 date time format. */
        startDate: definitions["Timestamp"];
        /** @description The date and time of the end of the Scheduled Delivery window, in ISO 8601 date time format. */
        endDate: definitions["Timestamp"];
    };
    /** @description An array of delivery windows. */
    DeliveryWindowList: definitions["DeliveryWindow"][];
    /** @description Fee type and cost. */
    Fee: {
        /** @description The type of fee. */
        name: "FBAPerUnitFulfillmentFee" | "FBAPerOrderFulfillmentFee" | "FBATransportationFee" | "FBAFulfillmentCODFee";
        /** @description The amount of the fee. */
        amount: definitions["Money"];
    };
    /** @description An array of fee type and cost pairs. */
    FeeList: definitions["Fee"][];
    /** @description Specifies whether the fulfillment order should ship now or have an order hold put on it. */
    FulfillmentAction: "Ship" | "Hold";
    /** @description General information about a fulfillment order, including its status. */
    FulfillmentOrder: {
        /** @description The fulfillment order identifier submitted with the createFulfillmentOrder operation. */
        sellerFulfillmentOrderId: string;
        /** @description The identifier for the marketplace the fulfillment order is placed against. */
        marketplaceId: string;
        /** @description A fulfillment order identifier submitted with the createFulfillmentOrder operation. Displays as the order identifier in recipient-facing materials such as the packing slip. */
        displayableOrderId: string;
        /** @description A date and time submitted with the createFulfillmentOrder operation. Displays as the order date in recipient-facing materials such as the packing slip. */
        displayableOrderDate: definitions["Timestamp"];
        /** @description A text block submitted with the createFulfillmentOrder operation. Displays in recipient-facing materials such as the packing slip. */
        displayableOrderComment: string;
        shippingSpeedCategory: definitions["ShippingSpeedCategory"];
        deliveryWindow?: definitions["DeliveryWindow"];
        /** @description The destination address submitted with the createFulfillmentOrder operation. */
        destinationAddress: definitions["Address"];
        fulfillmentAction?: definitions["FulfillmentAction"];
        fulfillmentPolicy?: definitions["FulfillmentPolicy"];
        codSettings?: definitions["CODSettings"];
        /** @description The date and time that the fulfillment order was received by an Amazon fulfillment center. */
        receivedDate: definitions["Timestamp"];
        fulfillmentOrderStatus: definitions["FulfillmentOrderStatus"];
        /** @description The date and time that the status of the fulfillment order last changed, in ISO 8601 date time format. */
        statusUpdatedDate: definitions["Timestamp"];
        notificationEmails?: definitions["NotificationEmailList"];
        /** @description A list of features and their fulfillment policies to apply to the order. */
        featureConstraints?: definitions["FeatureSettings"][];
    };
    /** @description Item information for a fulfillment order. */
    FulfillmentOrderItem: {
        /** @description The seller SKU of the item. */
        sellerSku: string;
        /** @description A fulfillment order item identifier submitted with a call to the createFulfillmentOrder operation. */
        sellerFulfillmentOrderItemId: string;
        quantity: definitions["Quantity"];
        /** @description A message to the gift recipient, if applicable. */
        giftMessage?: string;
        /** @description Item-specific text that displays in recipient-facing materials such as the outbound shipment packing slip. */
        displayableComment?: string;
        /** @description Amazon's fulfillment network SKU of the item. */
        fulfillmentNetworkSku?: string;
        /** @description Indicates whether the item is sellable or unsellable. */
        orderItemDisposition?: string;
        /** @description The item quantity that was cancelled by the seller. */
        cancelledQuantity: definitions["Quantity"];
        /** @description The item quantity that is unfulfillable. */
        unfulfillableQuantity: definitions["Quantity"];
        /** @description The estimated date and time that the item quantity is scheduled to ship from the fulfillment center. Note that this value can change over time. If the shipment that contains the item quantity has been cancelled, estimatedShipDate is not returned. */
        estimatedShipDate?: definitions["Timestamp"];
        /** @description The estimated arrival date and time of the item quantity. Note that this value can change over time. If the shipment that contains the item quantity has been cancelled, estimatedArrivalDate is not returned. */
        estimatedArrivalDate?: definitions["Timestamp"];
        /** @description The amount to be collected from the recipient for this item in a COD (Cash On Delivery) order. */
        perUnitPrice?: definitions["Money"];
        /** @description The tax on the amount to be collected from the recipient for this item in a COD (Cash On Delivery) order. */
        perUnitTax?: definitions["Money"];
        /** @description The monetary value assigned by the seller to this item. */
        perUnitDeclaredValue?: definitions["Money"];
    };
    /** @description An array of fulfillment order item information. */
    FulfillmentOrderItemList: definitions["FulfillmentOrderItem"][];
    /** @description Information about a fulfillment order preview, including delivery and fee information based on shipping method. */
    FulfillmentPreview: {
        shippingSpeedCategory: definitions["ShippingSpeedCategory"];
        scheduledDeliveryInfo?: definitions["ScheduledDeliveryInfo"];
        /** @description When true, this fulfillment order preview is fulfillable. */
        isFulfillable: boolean;
        /** @description When true, this fulfillment order preview is for COD (Cash On Delivery). */
        isCODCapable: boolean;
        /** @description Estimated shipping weight for this fulfillment order preview. */
        estimatedShippingWeight?: definitions["Weight"];
        /** @description The estimated fulfillment fees for this fulfillment order preview, if applicable. */
        estimatedFees?: definitions["FeeList"];
        fulfillmentPreviewShipments?: definitions["FulfillmentPreviewShipmentList"];
        unfulfillablePreviewItems?: definitions["UnfulfillablePreviewItemList"];
        /**
         * @description Error codes associated with the fulfillment order preview that indicate why the order is not fulfillable.
         *
         * Error code examples:
         *
         * DeliverySLAUnavailable
         * InvalidDestinationAddress
         */
        orderUnfulfillableReasons?: definitions["StringList"];
        /** @description The marketplace the fulfillment order is placed against. */
        marketplaceId: string;
        /** @description A list of features and their fulfillment policies to apply to the order. */
        featureConstraints?: definitions["FeatureSettings"][];
    };
    /** @description Item information for a shipment in a fulfillment order preview. */
    FulfillmentPreviewItem: {
        /** @description The seller SKU of the item. */
        sellerSku: string;
        /** @description The item quantity. */
        quantity: definitions["Quantity"];
        /** @description A fulfillment order item identifier that the seller created with a call to the createFulfillmentOrder operation. */
        sellerFulfillmentOrderItemId: string;
        /** @description The estimated shipping weight of the item quantity for a single item, as identified by sellerSku, in a shipment. */
        estimatedShippingWeight?: definitions["Weight"];
        /** @description The method used to calculate the estimated shipping weight. */
        shippingWeightCalculationMethod?: "Package" | "Dimensional";
    };
    /** @description An array of fulfillment preview item information. */
    FulfillmentPreviewItemList: definitions["FulfillmentPreviewItem"][];
    /** @description An array of fulfillment preview information. */
    FulfillmentPreviewList: definitions["FulfillmentPreview"][];
    /** @description Delivery and item information for a shipment in a fulfillment order preview. */
    FulfillmentPreviewShipment: {
        /** @description The earliest date that the shipment is expected to be sent from the fulfillment center, in ISO 8601 date time format. */
        earliestShipDate?: definitions["Timestamp"];
        /** @description The latest date that the shipment is expected to be sent from the fulfillment center, in ISO 8601 date time format. */
        latestShipDate?: definitions["Timestamp"];
        /** @description The earliest date that the shipment is expected to arrive at its destination. */
        earliestArrivalDate?: definitions["Timestamp"];
        /** @description The latest date that the shipment is expected to arrive at its destination, in ISO 8601 date time format. */
        latestArrivalDate?: definitions["Timestamp"];
        /** @description Provides additional insight into the shipment timeline when exact delivery dates are not able to be precomputed. */
        shippingNotes?: string[];
        /** @description Information about the items in the shipment. */
        fulfillmentPreviewItems: definitions["FulfillmentPreviewItemList"];
    };
    /** @description An array of fulfillment preview shipment information. */
    FulfillmentPreviewShipmentList: definitions["FulfillmentPreviewShipment"][];
    /** @description Indicates if the return item has been processed by a fulfillment center. */
    FulfillmentReturnItemStatus: "New" | "Processed";
    /** @description Delivery and item information for a shipment in a fulfillment order. */
    FulfillmentShipment: {
        /** @description A shipment identifier assigned by Amazon. */
        amazonShipmentId: string;
        /** @description An identifier for the fulfillment center that the shipment will be sent from. */
        fulfillmentCenterId: string;
        /** @description The current status of the shipment. */
        fulfillmentShipmentStatus: "PENDING" | "SHIPPED" | "CANCELLED_BY_FULFILLER" | "CANCELLED_BY_SELLER";
        /**
         * @description The meaning of the shippingDate value depends on the current status of the shipment. If the current value of FulfillmentShipmentStatus is:
         *
         * * Pending - shippingDate represents the estimated time that the shipment will leave the Amazon fulfillment center.
         *
         * * Shipped - shippingDate represents the date that the shipment left the Amazon fulfillment center.
         * If a shipment includes more than one package, shippingDate applies to all of the packages in the shipment. If the value of FulfillmentShipmentStatus is CancelledByFulfiller or CancelledBySeller, shippingDate is not returned. The value must be in ISO 8601 date time format.
         */
        shippingDate?: definitions["Timestamp"];
        /** @description The estimated arrival date and time of the shipment, in ISO 8601 date time format. Note that this value can change over time. If a shipment includes more than one package, estimatedArrivalDate applies to all of the packages in the shipment. If the shipment has been cancelled, estimatedArrivalDate is not returned. */
        estimatedArrivalDate?: definitions["Timestamp"];
        /** @description Provides additional insight into shipment timeline. Primairly used to communicate that actual delivery dates aren't available. */
        shippingNotes?: string[];
        fulfillmentShipmentItem: definitions["FulfillmentShipmentItemList"];
        fulfillmentShipmentPackage?: definitions["FulfillmentShipmentPackageList"];
    };
    /** @description Item information for a shipment in a fulfillment order. */
    FulfillmentShipmentItem: {
        /** @description The seller SKU of the item. */
        sellerSku: string;
        /** @description The fulfillment order item identifier that the seller created and submitted with a call to the createFulfillmentOrder operation. */
        sellerFulfillmentOrderItemId: string;
        quantity: definitions["Quantity"];
        /**
         * Format: int32
         * @description An identifier for the package that contains the item quantity.
         */
        packageNumber?: number;
        /** @description The serial number of the shipped item. */
        serialNumber?: string;
    };
    /** @description An array of fulfillment shipment item information. */
    FulfillmentShipmentItemList: definitions["FulfillmentShipmentItem"][];
    /** @description An array of fulfillment shipment information. */
    FulfillmentShipmentList: definitions["FulfillmentShipment"][];
    /** @description Package information for a shipment in a fulfillment order. */
    FulfillmentShipmentPackage: {
        /**
         * Format: int32
         * @description Identifies a package in a shipment.
         */
        packageNumber: number;
        /** @description Identifies the carrier who will deliver the shipment to the recipient. */
        carrierCode: string;
        /** @description The tracking number, if provided, can be used to obtain tracking and delivery information. */
        trackingNumber?: string;
        /** @description The estimated arrival date and time of the package, in ISO 8601 date time format. */
        estimatedArrivalDate?: definitions["Timestamp"];
    };
    /** @description An array of fulfillment shipment package information. */
    FulfillmentShipmentPackageList: definitions["FulfillmentShipmentPackage"][];
    GetFulfillmentOrderResult: {
        fulfillmentOrder: definitions["FulfillmentOrder"];
        fulfillmentOrderItems: definitions["FulfillmentOrderItemList"];
        fulfillmentShipments?: definitions["FulfillmentShipmentList"];
        returnItems: definitions["ReturnItemList"];
        returnAuthorizations: definitions["ReturnAuthorizationList"];
    };
    /** @description The response schema for the getFulfillmentOrder operation. */
    GetFulfillmentOrderResponse: {
        /** @description The payload for the getFulfillmentOrder operation. */
        payload?: definitions["GetFulfillmentOrderResult"];
        /** @description One or more unexpected errors occurred during the getFulfillmentOrder operation. */
        errors?: definitions["ErrorList"];
    };
    /** @description Item information for a fulfillment order preview. */
    GetFulfillmentPreviewItem: {
        /** @description The seller SKU of the item. */
        sellerSku: string;
        quantity: definitions["Quantity"];
        /** @description The monetary value assigned by the seller to this item. This is a required field if this order is an export order. */
        perUnitDeclaredValue?: definitions["Money"];
        /** @description A fulfillment order item identifier that the seller creates to track items in the fulfillment preview. */
        sellerFulfillmentOrderItemId: string;
    };
    /** @description An array of fulfillment preview item information. */
    GetFulfillmentPreviewItemList: definitions["GetFulfillmentPreviewItem"][];
    /** @description The request body schema for the getFulfillmentPreview operation. */
    GetFulfillmentPreviewRequest: {
        /** @description The marketplace the fulfillment order is placed against. */
        marketplaceId?: string;
        /** @description The destination address for the fulfillment order preview. */
        address: definitions["Address"];
        /** @description Identifying information and quantity information for the items in the fulfillment order preview. */
        items: definitions["GetFulfillmentPreviewItemList"];
        /**
         * @description A list of shipping methods used for creating fulfillment order previews.
         *
         * Possible values:
         *
         * * Standard - Standard shipping method.
         * * Expedited - Expedited shipping method.
         * * Priority - Priority shipping method.
         * * ScheduledDelivery - Scheduled Delivery shipping method.
         * Note: Shipping method service level agreements vary by marketplace. Sellers should see the Seller Central website in their marketplace for shipping method service level agreements and fulfillment fees.
         */
        shippingSpeedCategories?: definitions["ShippingSpeedCategoryList"];
        /**
         * @description Specifies whether to return fulfillment order previews that are for COD (Cash On Delivery).
         *
         * Possible values:
         *
         * * true - Returns all fulfillment order previews (both for COD and not for COD).
         * * false - Returns only fulfillment order previews that are not for COD.
         */
        includeCODFulfillmentPreview?: boolean;
        /** @description Specifies whether to return the ScheduledDeliveryInfo response object, which contains the available delivery windows for a Scheduled Delivery. The ScheduledDeliveryInfo response object can only be returned for fulfillment order previews with ShippingSpeedCategories = ScheduledDelivery. */
        includeDeliveryWindows?: boolean;
        /** @description A list of features and their fulfillment policies to apply to the order. */
        featureConstraints?: definitions["FeatureSettings"][];
    };
    /** @description A list of fulfillment order previews, including estimated shipping weights, estimated shipping fees, and estimated ship dates and arrival dates. */
    GetFulfillmentPreviewResult: {
        fulfillmentPreviews?: definitions["FulfillmentPreviewList"];
    };
    /** @description The response schema for the getFulfillmentPreview operation. */
    GetFulfillmentPreviewResponse: {
        /** @description The response payload for the getFulfillmentPreview operation. */
        payload?: definitions["GetFulfillmentPreviewResult"];
        /** @description One or more unexpected errors occurred during the getFulfillmentPreview operation. */
        errors?: definitions["ErrorList"];
    };
    /** @description A code for why the item is invalid for return. */
    InvalidItemReasonCode: "InvalidValues" | "DuplicateRequest" | "NoCompletedShipItems" | "NoReturnableQuantity";
    /** @description The reason that the item is invalid for return. */
    InvalidItemReason: {
        invalidItemReasonCode: definitions["InvalidItemReasonCode"];
        /** @description A human readable description of the invalid item reason code. */
        description: string;
    };
    /** @description An item that is invalid for return. */
    InvalidReturnItem: {
        /** @description An identifier assigned by the seller to the return item. */
        sellerReturnItemId: string;
        /** @description The identifier assigned to the item by the seller when the fulfillment order was created. */
        sellerFulfillmentOrderItemId: string;
        invalidItemReason: definitions["InvalidItemReason"];
    };
    /** @description An array of invalid return item information. */
    InvalidReturnItemList: definitions["InvalidReturnItem"][];
    ListAllFulfillmentOrdersResult: {
        /** @description When present and not empty, pass this string token in the next request to return the next response page. */
        nextToken?: string;
        /** @description An array of fulfillment order information. */
        fulfillmentOrders?: definitions["FulfillmentOrder"][];
    };
    /** @description The response schema for the listAllFulfillmentOrders operation. */
    ListAllFulfillmentOrdersResponse: {
        /** @description The payload for the listAllFulfillmentOrders operation. */
        payload?: definitions["ListAllFulfillmentOrdersResult"];
        /** @description One or more unexpected errors occurred during the listAllFulfillmentOrders operation. */
        errors?: definitions["ErrorList"];
    };
    ListReturnReasonCodesResult: {
        reasonCodeDetails?: definitions["ReasonCodeDetailsList"];
    };
    /** @description The response schema for the listReturnReasonCodes operation. */
    ListReturnReasonCodesResponse: {
        /** @description The payload for the listReturnReasonCodes operation. */
        payload?: definitions["ListReturnReasonCodesResult"];
        /** @description One or more unexpected errors occurred during the listReturnReasonCodes operation. */
        errors?: definitions["ErrorList"];
    };
    /** @description A list of email addresses that the seller provides that are used by Amazon to send ship-complete notifications to recipients on behalf of the seller. */
    NotificationEmailList: string[];
    /** @description The current delivery status of the package. */
    CurrentStatus: "IN_TRANSIT" | "DELIVERED" | "RETURNING" | "RETURNED" | "UNDELIVERABLE" | "DELAYED" | "AVAILABLE_FOR_PICKUP" | "CUSTOMER_ACTION" | "UNKNOWN" | "OUT_FOR_DELIVERY" | "DELIVERY_ATTEMPTED" | "PICKUP_SUCCESSFUL" | "PICKUP_CANCELLED" | "PICKUP_ATTEMPTED" | "PICKUP_SCHEDULED" | "RETURN_REQUEST_ACCEPTED" | "REFUND_ISSUED" | "RETURN_RECEIVED_IN_FC";
    /** @description Additional location information. */
    AdditionalLocationInfo: "AS_INSTRUCTED" | "CARPORT" | "CUSTOMER_PICKUP" | "DECK" | "DOOR_PERSON" | "FRONT_DESK" | "FRONT_DOOR" | "GARAGE" | "GUARD" | "MAIL_ROOM" | "MAIL_SLOT" | "MAILBOX" | "MC_BOY" | "MC_GIRL" | "MC_MAN" | "MC_WOMAN" | "NEIGHBOR" | "OFFICE" | "OUTBUILDING" | "PATIO" | "PORCH" | "REAR_DOOR" | "RECEPTIONIST" | "RECEIVER" | "SECURE_LOCATION" | "SIDE_DOOR";
    PackageTrackingDetails: {
        /**
         * Format: int32
         * @description The package identifier.
         */
        packageNumber: number;
        /** @description The tracking number for the package. */
        trackingNumber?: string;
        /** @description Link on swiship.com that allows customers to track the package. */
        customerTrackingLink?: string;
        /** @description The name of the carrier. */
        carrierCode?: string;
        /** @description The phone number of the carrier. */
        carrierPhoneNumber?: string;
        /** @description The URL of the carrier’s website. */
        carrierURL?: string;
        /** @description The shipping date for the package. */
        shipDate?: definitions["Timestamp"];
        /** @description The estimated arrival date. */
        estimatedArrivalDate?: definitions["Timestamp"];
        /** @description The destination city for the package. */
        shipToAddress?: definitions["TrackingAddress"];
        currentStatus?: definitions["CurrentStatus"];
        /** @description Description corresponding to the CurrentStatus value. */
        currentStatusDescription?: string;
        /** @description The name of the person who signed for the package. */
        signedForBy?: string;
        additionalLocationInfo?: definitions["AdditionalLocationInfo"];
        trackingEvents?: definitions["TrackingEventList"];
    };
    /** @description The response schema for the getPackageTrackingDetails operation. */
    GetPackageTrackingDetailsResponse: {
        /** @description The payload for the getPackageTrackingDetails operation. */
        payload?: definitions["PackageTrackingDetails"];
        /** @description One or more unexpected errors occurred during the getPackageTrackingDetails operation. */
        errors?: definitions["ErrorList"];
    };
    /** @description A return reason code, a description, and an optional description translation. */
    ReasonCodeDetails: {
        /** @description A code that indicates a valid return reason. */
        returnReasonCode: string;
        /** @description A human readable description of the return reason code. */
        description: string;
        /** @description A translation of the description. The translation is in the language specified in the Language request parameter. */
        translatedDescription?: string;
    };
    /** @description An array of return reason code details. */
    ReasonCodeDetailsList: definitions["ReasonCodeDetails"][];
    /** @description Return authorization information for items accepted for return. */
    ReturnAuthorization: {
        /** @description An identifier for the return authorization. This identifier associates return items with the return authorization used to return them. */
        returnAuthorizationId: string;
        /** @description An identifier for the Amazon fulfillment center that the return items should be sent to. */
        fulfillmentCenterId: string;
        /** @description The address of the Amazon fulfillment center that the return items should be sent to. */
        returnToAddress: definitions["Address"];
        /** @description The return merchandise authorization (RMA) that Amazon needs to process the return. */
        amazonRmaId: string;
        /** @description A URL for a web page that contains the return authorization barcode and the mailing label. This does not include pre-paid shipping. */
        rmaPageURL: string;
    };
    /** @description An array of return authorization information. */
    ReturnAuthorizationList: definitions["ReturnAuthorization"][];
    /** @description An item that Amazon accepted for return. */
    ReturnItem: {
        /** @description An identifier assigned by the seller to the return item. */
        sellerReturnItemId: string;
        /** @description The identifier assigned to the item by the seller when the fulfillment order was created. */
        sellerFulfillmentOrderItemId: string;
        /** @description The identifier for the shipment that is associated with the return item. */
        amazonShipmentId: string;
        /** @description The return reason code assigned to the return item by the seller. */
        sellerReturnReasonCode: string;
        /** @description An optional comment about the return item. */
        returnComment?: string;
        /** @description The return reason code that the Amazon fulfillment center assigned to the return item. */
        amazonReturnReasonCode?: string;
        /** @description Indicates if the return item has been processed by an Amazon fulfillment center. */
        status: definitions["FulfillmentReturnItemStatus"];
        /** @description Indicates when the status last changed. */
        statusChangedDate: definitions["Timestamp"];
        /** @description Identifies the return authorization used to return this item. See ReturnAuthorization. */
        returnAuthorizationId?: string;
        returnReceivedCondition?: definitions["ReturnItemDisposition"];
        /** @description The identifier for the Amazon fulfillment center that processed the return item. */
        fulfillmentCenterId?: string;
    };
    /** @description The condition of the return item when received by an Amazon fulfillment center. */
    ReturnItemDisposition: "Sellable" | "Defective" | "CustomerDamaged" | "CarrierDamaged" | "FulfillerDamaged";
    /** @description An array of items that Amazon accepted for return. Returns empty if no items were accepted for return. */
    ReturnItemList: definitions["ReturnItem"][];
    /** @description Delivery information for a scheduled delivery. */
    ScheduledDeliveryInfo: {
        /** @description The time zone of the destination address for the fulfillment order preview. Must be an IANA time zone name. Example: Asia/Tokyo. */
        deliveryTimeZone: string;
        /** @description An array of time ranges that are available for scheduled delivery. */
        deliveryWindows: definitions["DeliveryWindowList"];
    };
    ShippingSpeedCategoryList: definitions["ShippingSpeedCategory"][];
    StringList: string[];
    /** Format: date-time */
    Timestamp: string;
    /** @description Address information for tracking the package. */
    TrackingAddress: {
        /** @description The city. */
        city: string;
        /** @description The state. */
        state: string;
        /** @description The country. */
        country: string;
    };
    /** @description The event code for the delivery event. */
    EventCode: "EVENT_101" | "EVENT_102" | "EVENT_201" | "EVENT_202" | "EVENT_203" | "EVENT_204" | "EVENT_205" | "EVENT_206" | "EVENT_301" | "EVENT_302" | "EVENT_304" | "EVENT_306" | "EVENT_307" | "EVENT_308" | "EVENT_309" | "EVENT_401" | "EVENT_402" | "EVENT_403" | "EVENT_404" | "EVENT_405" | "EVENT_406" | "EVENT_407" | "EVENT_408" | "EVENT_409" | "EVENT_411" | "EVENT_412" | "EVENT_413" | "EVENT_414" | "EVENT_415" | "EVENT_416" | "EVENT_417" | "EVENT_418" | "EVENT_419";
    /** @description Information for tracking package deliveries. */
    TrackingEvent: {
        /** @description The date and time that the delivery event took place, in ISO 8601 date time format. */
        eventDate: definitions["Timestamp"];
        /** @description The city where the delivery event took place. */
        eventAddress: definitions["TrackingAddress"];
        /** @description The event code for the delivery event. */
        eventCode: definitions["EventCode"];
        /** @description A description for the corresponding event code. */
        eventDescription: string;
    };
    /** @description An array of tracking event information. */
    TrackingEventList: definitions["TrackingEvent"][];
    /** @description Information about unfulfillable items in a fulfillment order preview. */
    UnfulfillablePreviewItem: {
        /** @description The seller SKU of the item. */
        sellerSku: string;
        quantity: definitions["Quantity"];
        /** @description A fulfillment order item identifier created with a call to the getFulfillmentPreview operation. */
        sellerFulfillmentOrderItemId: string;
        /** @description Error codes associated with the fulfillment order preview that indicate why the item is unfulfillable. */
        itemUnfulfillableReasons?: definitions["StringList"];
    };
    /** @description An array of unfulfillable preview item information. */
    UnfulfillablePreviewItemList: definitions["UnfulfillablePreviewItem"][];
    /** @description Item information for updating a fulfillment order. */
    UpdateFulfillmentOrderItem: {
        /** @description The seller SKU of the item. */
        sellerSku?: string;
        /** @description Identifies the fulfillment order item to update. Created with a previous call to the createFulfillmentOrder operation. */
        sellerFulfillmentOrderItemId: string;
        quantity: definitions["Quantity"];
        /** @description A message to the gift recipient, if applicable. */
        giftMessage?: string;
        /** @description Item-specific text that displays in recipient-facing materials such as the outbound shipment packing slip. */
        displayableComment?: string;
        /** @description Amazon's fulfillment network SKU of the item. */
        fulfillmentNetworkSku?: string;
        /** @description Indicates whether the item is sellable or unsellable. */
        orderItemDisposition?: string;
        /** @description The monetary value assigned by the seller to this item. */
        perUnitDeclaredValue?: definitions["Money"];
        /** @description The amount to be collected from the recipient for this item in a COD (Cash On Delivery) order. */
        perUnitPrice?: definitions["Money"];
        /** @description The tax on the amount to be collected from the recipient for this item in a COD (Cash On Delivery) order. */
        perUnitTax?: definitions["Money"];
    };
    /** @description An array of fulfillment order item information for updating a fulfillment order. */
    UpdateFulfillmentOrderItemList: definitions["UpdateFulfillmentOrderItem"][];
    UpdateFulfillmentOrderRequest: {
        /** @description The marketplace the fulfillment order is placed against. */
        marketplaceId?: string;
        /** @description A fulfillment order identifier that the seller creates. This value displays as the order identifier in recipient-facing materials such as the outbound shipment packing slip. The value of DisplayableOrderId should match the order identifier that the seller provides to the recipient. The seller can use the SellerFulfillmentOrderId for this value or they can specify an alternate value if they want the recipient to reference an alternate order identifier. */
        displayableOrderId?: string;
        /** @description The date and time of the fulfillment order. Displays as the order date in recipient-facing materials such as the outbound shipment packing slip. */
        displayableOrderDate?: definitions["Timestamp"];
        /** @description Order-specific text that appears in recipient-facing materials such as the outbound shipment packing slip. */
        displayableOrderComment?: string;
        shippingSpeedCategory?: definitions["ShippingSpeedCategory"];
        /** @description The destination address for the fulfillment order. */
        destinationAddress?: definitions["Address"];
        fulfillmentAction?: definitions["FulfillmentAction"];
        fulfillmentPolicy?: definitions["FulfillmentPolicy"];
        /** @description The two-character country code for the country from which the fulfillment order ships. Must be in ISO 3166-1 alpha-2 format. */
        shipFromCountryCode?: string;
        notificationEmails?: definitions["NotificationEmailList"];
        /** @description A list of features and their fulfillment policies to apply to the order. */
        featureConstraints?: definitions["FeatureSettings"][];
        /** @description A list of items to include in the fulfillment order preview, including quantity. */
        items?: definitions["UpdateFulfillmentOrderItemList"];
    };
    /** @description The response schema for the updateFulfillmentOrder operation. */
    UpdateFulfillmentOrderResponse: {
        /** @description One or more unexpected errors occurred during the updateFulfillmentOrder operation. */
        errors?: definitions["ErrorList"];
    };
    /** @description The response schema for the createFulfillmentOrder operation. */
    CreateFulfillmentOrderResponse: {
        /** @description One or more unexpected errors occurred during the createFulfillmentOrder operation. */
        errors?: definitions["ErrorList"];
    };
    /** @description The response schema for the cancelFulfillmentOrder operation. */
    CancelFulfillmentOrderResponse: {
        /** @description One or more unexpected errors occurred during the cancelFulfillmentOrder operation. */
        errors?: definitions["ErrorList"];
    };
    /** @description The weight. */
    Weight: {
        /** @description The unit of weight. */
        unit: "KG" | "KILOGRAMS" | "LB" | "POUNDS";
        /** @description The weight value. */
        value: string;
    };
    /**
     * Format: int32
     * @description The item quantity.
     */
    Quantity: number;
    /** @description The shipping method used for the fulfillment order. */
    ShippingSpeedCategory: "Standard" | "Expedited" | "Priority" | "ScheduledDelivery";
    /** @description The breakdown of eligibility inventory by feature. */
    GetFeatureInventoryResponse: {
        payload?: definitions["GetFeatureInventoryResult"];
        /** @description One or more unexpected errors occurred during the getFeatureInventory operation. */
        errors?: definitions["ErrorList"];
    };
    /** @description The payload for the getEligibileInventory operation. */
    GetFeatureInventoryResult: {
        /** @description The requested marketplace. */
        marketplaceId: string;
        /** @description The name of the feature. */
        featureName: string;
        /** @description When present and not empty, pass this string token in the next request to return the next response page. */
        nextToken?: string;
        /** @description An array of SKUs eligible for this feature and the quantity available. */
        featureSkus?: definitions["FeatureSku"][];
    };
    /** @description Information about an SKU, including the count available, identifiers, and a list of overlapping SKUs that share the same inventory pool. */
    FeatureSku: {
        /** @description Used to identify an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit. */
        sellerSku?: string;
        /** @description The unique SKU used by Amazon's fulfillment network. */
        fnSku?: string;
        /** @description The Amazon Standard Identification Number (ASIN) of the item. */
        asin?: string;
        /** @description The number of SKUs available for this service. */
        skuCount?: number;
        /** @description Other seller SKUs that are shared across the same inventory. */
        overlappingSkus?: string[];
    };
    /** @description The response schema for the getFeatures operation. */
    GetFeaturesResponse: {
        payload?: definitions["GetFeaturesResult"];
        errors?: definitions["ErrorList"];
    };
    /** @description The payload for the getFeatures operation. */
    GetFeaturesResult: {
        features: definitions["Features"];
    };
    /** @description An array of features. */
    Features: definitions["Feature"][];
    /** @description A Multi-Channel Fulfillment feature. */
    Feature: {
        /** @description The feature name. */
        featureName: string;
        /** @description The feature description. */
        featureDescription: string;
        /** @description When true, indicates that the seller is eligible to use the feature. */
        sellerEligible?: boolean;
    };
    /** @description The response schema for the getFeatureSKU operation. */
    GetFeatureSkuResponse: {
        payload?: definitions["GetFeatureSkuResult"];
        errors?: definitions["ErrorList"];
    };
    /** @description The payload for the getFeatureSKU operation. */
    GetFeatureSkuResult: {
        /** @description The requested marketplace. */
        marketplaceId: string;
        /** @description The name of the feature. */
        featureName: string;
        /** @description When true, the seller SKU is eligible for the requested feature. */
        isEligible: boolean;
        /**
         * @description A list of one or more reasons that the seller SKU is ineligibile for the feature.
         *
         * Possible values:
         * * MERCHANT_NOT_ENROLLED - The merchant isn't enrolled for the feature.
         * * SKU_NOT_ELIGIBLE - The SKU doesn't reside in a warehouse that supports the feature.
         * * INVALID_SKU - There is an issue with the SKU provided.
         */
        ineligibleReasons?: string[];
        /** @description Information about the SKU, including the count available, identifiers, and a list of overlapping SKUs that share the same inventory pool. */
        skuInfo?: definitions["FeatureSku"];
    };
    /** @description FeatureSettings allows users to apply fulfillment features to an order. To block an order from being shipped using Amazon Logistics (AMZL) and an AMZL tracking number, use featureName as BLOCK_AMZL and featureFulfillmentPolicy as Required. Blocking AMZL will incur an additional fee surcharge on your MCF orders and increase the risk of some of your orders being unfulfilled or delivered late if there are no alternative carriers available. Using BLOCK_AMZL in an order request will take precedence over your Seller Central account setting. */
    FeatureSettings: {
        /** @description The name of the feature. */
        featureName?: string;
        /** @description Specifies the policy to use when fulfilling an order. */
        featureFulfillmentPolicy?: "Required" | "NotRequired";
    };
}
export interface operations {
    /**
     * Returns a list of fulfillment order previews based on shipping criteria that you specify.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2 | 30 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    getFulfillmentPreview: {
        parameters: {
            body: {
                body: definitions["GetFulfillmentPreviewRequest"];
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["GetFulfillmentPreviewResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["GetFulfillmentPreviewResponse"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["GetFulfillmentPreviewResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["GetFulfillmentPreviewResponse"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["GetFulfillmentPreviewResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["GetFulfillmentPreviewResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["GetFulfillmentPreviewResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["GetFulfillmentPreviewResponse"];
            };
        };
    };
    /**
     * Returns a list of fulfillment orders fulfilled after (or at) a specified date-time, or indicated by the next token parameter.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2 | 30 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    listAllFulfillmentOrders: {
        parameters: {
            query: {
                /** A date used to select fulfillment orders that were last updated after (or at) a specified time. An update is defined as any change in fulfillment order status, including the creation of a new fulfillment order. */
                queryStartDate?: string;
                /** A string token returned in the response to your previous request. */
                nextToken?: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["ListAllFulfillmentOrdersResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["ListAllFulfillmentOrdersResponse"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["ListAllFulfillmentOrdersResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["ListAllFulfillmentOrdersResponse"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["ListAllFulfillmentOrdersResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["ListAllFulfillmentOrdersResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["ListAllFulfillmentOrdersResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["ListAllFulfillmentOrdersResponse"];
            };
        };
    };
    /**
     * Requests that Amazon ship items from the seller's inventory in Amazon's fulfillment network to a destination address.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2 | 30 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    createFulfillmentOrder: {
        parameters: {
            body: {
                body: definitions["CreateFulfillmentOrderRequest"];
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["CreateFulfillmentOrderResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["CreateFulfillmentOrderResponse"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["CreateFulfillmentOrderResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["CreateFulfillmentOrderResponse"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["CreateFulfillmentOrderResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["CreateFulfillmentOrderResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["CreateFulfillmentOrderResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["CreateFulfillmentOrderResponse"];
            };
        };
    };
    /**
     * Returns delivery tracking information for a package in an outbound shipment for a Multi-Channel Fulfillment order.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2 | 30 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    getPackageTrackingDetails: {
        parameters: {
            query: {
                /** The unencrypted package identifier returned by the getFulfillmentOrder operation. */
                packageNumber: number;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["GetPackageTrackingDetailsResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["GetPackageTrackingDetailsResponse"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["GetPackageTrackingDetailsResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["GetPackageTrackingDetailsResponse"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["GetPackageTrackingDetailsResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["GetPackageTrackingDetailsResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["GetPackageTrackingDetailsResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["GetPackageTrackingDetailsResponse"];
            };
        };
    };
    /**
     * Returns a list of return reason codes for a seller SKU in a given marketplace.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2 | 30 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    listReturnReasonCodes: {
        parameters: {
            query: {
                /** The seller SKU for which return reason codes are required. */
                sellerSku: string;
                /** The marketplace for which the seller wants return reason codes. */
                marketplaceId?: string;
                /** The identifier assigned to the item by the seller when the fulfillment order was created. The service uses this value to determine the marketplace for which the seller wants return reason codes. */
                sellerFulfillmentOrderId?: string;
                /** The language that the TranslatedDescription property of the ReasonCodeDetails response object should be translated into. */
                language: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["ListReturnReasonCodesResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["ListReturnReasonCodesResponse"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["ListReturnReasonCodesResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["ListReturnReasonCodesResponse"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["ListReturnReasonCodesResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["ListReturnReasonCodesResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["ListReturnReasonCodesResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["ListReturnReasonCodesResponse"];
            };
        };
    };
    /**
     * Creates a fulfillment return.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2 | 30 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    createFulfillmentReturn: {
        parameters: {
            body: {
                body: definitions["CreateFulfillmentReturnRequest"];
            };
            path: {
                /** An identifier assigned by the seller to the fulfillment order at the time it was created. The seller uses their own records to find the correct SellerFulfillmentOrderId value based on the buyer's request to return items. */
                sellerFulfillmentOrderId: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["CreateFulfillmentReturnResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["CreateFulfillmentReturnResponse"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["CreateFulfillmentReturnResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["CreateFulfillmentReturnResponse"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["CreateFulfillmentReturnResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["CreateFulfillmentReturnResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["CreateFulfillmentReturnResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["CreateFulfillmentReturnResponse"];
            };
        };
    };
    /**
     * Returns the fulfillment order indicated by the specified order identifier.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2 | 30 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    getFulfillmentOrder: {
        parameters: {
            path: {
                /** The identifier assigned to the item by the seller when the fulfillment order was created. */
                sellerFulfillmentOrderId: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["GetFulfillmentOrderResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["GetFulfillmentOrderResponse"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["GetFulfillmentOrderResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["GetFulfillmentOrderResponse"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["GetFulfillmentOrderResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["GetFulfillmentOrderResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["GetFulfillmentOrderResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["GetFulfillmentOrderResponse"];
            };
        };
    };
    /**
     * Updates and/or requests shipment for a fulfillment order with an order hold on it.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2 | 30 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    updateFulfillmentOrder: {
        parameters: {
            body: {
                body: definitions["UpdateFulfillmentOrderRequest"];
            };
            path: {
                /** The identifier assigned to the item by the seller when the fulfillment order was created. */
                sellerFulfillmentOrderId: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["UpdateFulfillmentOrderResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["UpdateFulfillmentOrderResponse"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["UpdateFulfillmentOrderResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["UpdateFulfillmentOrderResponse"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["UpdateFulfillmentOrderResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["UpdateFulfillmentOrderResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["UpdateFulfillmentOrderResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["UpdateFulfillmentOrderResponse"];
            };
        };
    };
    /**
     * Requests that Amazon stop attempting to fulfill the fulfillment order indicated by the specified order identifier.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2 | 30 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    cancelFulfillmentOrder: {
        parameters: {
            path: {
                /** The identifier assigned to the item by the seller when the fulfillment order was created. */
                sellerFulfillmentOrderId: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["CancelFulfillmentOrderResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["CancelFulfillmentOrderResponse"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["CancelFulfillmentOrderResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["CancelFulfillmentOrderResponse"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["CancelFulfillmentOrderResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["CancelFulfillmentOrderResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["CancelFulfillmentOrderResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["CancelFulfillmentOrderResponse"];
            };
        };
    };
    /**
     * Returns a list of features available for Multi-Channel Fulfillment orders in the marketplace you specify, and whether the seller for which you made the call is enrolled for each feature.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2 | 30 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    getFeatures: {
        parameters: {
            query: {
                /** The marketplace for which to return the list of features. */
                marketplaceId: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["GetFeaturesResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["GetFeaturesResponse"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["GetFeaturesResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["GetFeaturesResponse"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["GetFeaturesResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["GetFeaturesResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["GetFeaturesResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["GetFeaturesResponse"];
            };
        };
    };
    /**
     * Returns a list of inventory items that are eligible for the fulfillment feature you specify.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2 | 30 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    getFeatureInventory: {
        parameters: {
            query: {
                /** The marketplace for which to return a list of the inventory that is eligible for the specified feature. */
                marketplaceId: string;
                /** A string token returned in the response to your previous request that is used to return the next response page. A value of null will return the first page. */
                nextToken?: string;
            };
            path: {
                /** The name of the feature for which to return a list of eligible inventory. */
                featureName: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["GetFeatureInventoryResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["GetFeatureInventoryResponse"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["GetFeatureInventoryResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["GetFeatureInventoryResponse"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["GetFeatureInventoryResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["GetFeatureInventoryResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["GetFeatureInventoryResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["GetFeatureInventoryResponse"];
            };
        };
    };
    /**
     * Returns the number of items with the sellerSKU you specify that can have orders fulfilled using the specified feature. Note that if the sellerSKU isn't eligible, the response will contain an empty skuInfo object.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2 | 30 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    getFeatureSKU: {
        parameters: {
            query: {
                /** The marketplace for which to return the count. */
                marketplaceId: string;
            };
            path: {
                /** The name of the feature. */
                featureName: string;
                /** Used to identify an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit. */
                sellerSku: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["GetFeatureSkuResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["GetFeatureSkuResponse"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["GetFeatureSkuResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["GetFeatureSkuResponse"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["GetFeatureSkuResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["GetFeatureSkuResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["GetFeatureSkuResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["GetFeatureSkuResponse"];
            };
        };
    };
}
export interface external {
}

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/easyShip/2022-03-23/timeSlot": {
    /**
     * Returns time slots available for Easy Ship orders to be scheduled based on the package weight and dimensions that the seller specifies.
     *
     * This operation is available for scheduled and unscheduled orders based on marketplace support. See **Get Time Slots** in the [Marketplace Support Table](doc:easyship-api-v2022-03-23-use-case-guide#marketplace-support-table).
     *
     * This operation can return time slots that have either pickup or drop-off handover methods - see **Supported Handover Methods** in the [Marketplace Support Table](doc:easyship-api-v2022-03-23-use-case-guide#marketplace-support-table).
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 1 | 5 |
     *
     * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     */
    post: operations["listHandoverSlots"];
  };
  "/easyShip/2022-03-23/package": {
    /**
     * Returns information about a package, including dimensions, weight, time slot information for handover, invoice and item information, and status.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 1 | 5 |
     *
     * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     */
    get: operations["getScheduledPackage"];
    /**
     * Schedules an Easy Ship order and returns the scheduled package information.
     *
     * This operation does the following:
     *
     * *  Specifies the time slot and handover method for the order to be scheduled for delivery.
     *
     * * Updates the Easy Ship order status.
     *
     * * Generates a shipping label and an invoice. Calling `createScheduledPackage` also generates a warranty document if you specify a `SerialNumber` value. To get these documents, see [How to get invoice, shipping label, and warranty documents](doc:easyship-api-v2022-03-23-use-case-guide).
     *
     * * Shows the status of Easy Ship orders when you call the `getOrders` operation of the Selling Partner API for Orders and examine the `EasyShipShipmentStatus` property in the response body.
     *
     * See the **Shipping Label**, **Invoice**, and **Warranty** columns in the [Marketplace Support Table](doc:easyship-api-v2022-03-23-use-case-guide#marketplace-support-table) to see which documents are supported in each marketplace.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 1 | 5 |
     *
     * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     */
    post: operations["createScheduledPackage"];
    /**
     * Updates the time slot for handing over the package indicated by the specified `scheduledPackageId`. You can get the new `slotId` value for the time slot by calling the `listHandoverSlots` operation before making another `patch` call.
     *
     * See the **Update Package** column in the [Marketplace Support Table](doc:easyship-api-v2022-03-23-use-case-guide#marketplace-support-table) to see which marketplaces this operation is supported in.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 1 | 5 |
     *
     * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     */
    patch: operations["updateScheduledPackages"];
  };
  "/easyShip/2022-03-23/packages/bulk": {
    /**
     * This operation automatically schedules a time slot for all the `amazonOrderId`s given as input, generating the associated shipping labels, along with other compliance documents according to the marketplace (refer to the [marketplace document support table](doc:easyship-api-v2022-03-23-use-case-guide#marketplace-support-table)).
     *
     * Developers calling this operation may optionally assign a `packageDetails` object, allowing them to input a preferred time slot for each order in ther request. In this case, Amazon will try to schedule the respective packages using their optional settings. On the other hand, *i.e.*, if the time slot is not provided, Amazon will then pick the earliest time slot possible.
     *
     * Regarding the shipping label's file format, external developers are able to choose between PDF or ZPL, and Amazon will create the label accordingly.
     *
     * This operation returns an array composed of the scheduled packages, and a short-lived URL pointing to a zip file containing the generated shipping labels and the other documents enabled for your marketplace. If at least an order couldn't be scheduled, then Amazon adds the `rejectedOrders` list into the response, which contains an entry for each order we couldn't process. Each entry is composed of an error message describing the reason of the failure, so that sellers can take action.
     *
     * The table below displays the supported request and burst maximum rates:
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 1 | 5 |
     *
     * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     */
    post: operations["createScheduledPackageBulk"];
  };
}

export interface definitions {
  /** @description Optional seller-created identifier that is printed on the shipping label to help the seller identify the package. */
  PackageIdentifier: string;
  /** @description The status of the package. */
  PackageStatus:
    | "ReadyForPickup"
    | "PickedUp"
    | "AtOriginFC"
    | "AtDestinationFC"
    | "Delivered"
    | "Rejected"
    | "Undeliverable"
    | "ReturnedToSeller"
    | "LostInTransit"
    | "LabelCanceled"
    | "DamagedInTransit"
    | "OutForDelivery";
  /** @description An Amazon-defined identifier for the scheduled package. */
  PackageId: string;
  /** @description Representation of tracking metadata. */
  TrackingDetails: {
    /** @description The tracking identifier for the scheduled package. */
    trackingId?: definitions["String"];
  };
  /** @description Identifies the method by which a seller will hand a package over to Amazon Logistics. */
  HandoverMethod: "Pickup" | "Dropoff";
  /** @description This object allows users to specify an order to be scheduled. Only the amazonOrderId is required. */
  OrderScheduleDetails: {
    amazonOrderId: definitions["AmazonOrderId"];
    packageDetails?: definitions["PackageDetails"];
  };
  /** @description An Amazon-defined order identifier. Identifies the order that the seller wants to deliver using Amazon Easy Ship. */
  AmazonOrderId: string;
  /**
   * Format: float
   * @description The numerical value of the specified dimension.
   */
  Dimension: number;
  /** @description The dimensions of the scheduled package. */
  Dimensions: {
    /** @description The length dimension. */
    length?: definitions["Dimension"];
    /** @description The width dimension. */
    width?: definitions["Dimension"];
    /** @description The height dimension. */
    height?: definitions["Dimension"];
    unit?: definitions["UnitOfLength"];
    /** @description Identifier for custom package dimensions. */
    identifier?: definitions["String"];
  };
  /** @description The request schema for the `listHandoverSlots` operation. */
  ListHandoverSlotsRequest: {
    marketplaceId: definitions["String"];
    amazonOrderId: definitions["AmazonOrderId"];
    packageDimensions: definitions["Dimensions"];
    packageWeight: definitions["Weight"];
  };
  /** @description The response schema for the `listHandoverSlots` operation. */
  ListHandoverSlotsResponse: {
    amazonOrderId: definitions["AmazonOrderId"];
    timeSlots: definitions["TimeSlots"];
  };
  /** @description Invoice number and date. */
  InvoiceData: {
    /** @description The invoice number. */
    invoiceNumber: definitions["String"];
    /** @description The date that the invoice was generated. */
    invoiceDate?: definitions["DateTime"];
  };
  /** @description Item identifier and serial number information. */
  Item: {
    orderItemId?: definitions["OrderItemId"];
    orderItemSerialNumbers?: definitions["OrderItemSerialNumbers"];
  };
  /** @description A list of items contained in the package. */
  Items: definitions["Item"][];
  /** @description The Amazon-defined order item identifier. */
  OrderItemId: string;
  /** @description A serial number for an item associated with the `OrderItemId` value. */
  OrderItemSerialNumber: string;
  /** @description A list of serial numbers for the items associated with the `OrderItemId` value. */
  OrderItemSerialNumbers: definitions["OrderItemSerialNumber"][];
  /** @description A package. This object contains all the details of the scheduled Easy Ship package including the package identifier, physical attributes such as dimensions and weight, selected time slot to handover the package to carrier, status of the package, and tracking/invoice details. */
  Package: {
    scheduledPackageId: definitions["ScheduledPackageId"];
    packageDimensions: definitions["Dimensions"];
    packageWeight: definitions["Weight"];
    packageItems?: definitions["Items"];
    packageTimeSlot: definitions["TimeSlot"];
    packageIdentifier?: definitions["PackageIdentifier"];
    invoice?: definitions["InvoiceData"];
    packageStatus?: definitions["PackageStatus"];
    trackingDetails?: definitions["TrackingDetails"];
  };
  /** @description A list of packages. */
  Packages: {
    packages: definitions["Package"][];
  };
  /** @description Package details. Includes `packageItems`, `packageTimeSlot`, and `packageIdentifier`. */
  PackageDetails: {
    packageItems?: definitions["Items"];
    packageTimeSlot: definitions["TimeSlot"];
    packageIdentifier?: definitions["PackageIdentifier"];
  };
  /** @description A order which we couldn't schedule on your behalf. It contains its id, and information on the error. */
  RejectedOrder: {
    amazonOrderId: definitions["AmazonOrderId"];
    error?: definitions["Error"];
  };
  /** @description A time window to hand over an Easy Ship package to Amazon Logistics. */
  TimeSlot: {
    /** @description An Amazon-defined identifier for a time slot. */
    slotId: definitions["String"];
    /** @description The start date and time of the time slot. */
    startTime?: definitions["DateTime"];
    /** @description The end date and time of the time slot. */
    endTime?: definitions["DateTime"];
    /** @description The method by which a seller will hand a package over to Amazon Logistics. */
    handoverMethod?: definitions["HandoverMethod"];
  };
  /** @description A list of time slots. */
  TimeSlots: definitions["TimeSlot"][];
  /** @description Identifies the scheduled package to be updated. */
  ScheduledPackageId: {
    amazonOrderId: definitions["AmazonOrderId"];
    packageId?: definitions["PackageId"];
  };
  /** @description The request schema for the `createScheduledPackage` operation. */
  CreateScheduledPackageRequest: {
    amazonOrderId: definitions["AmazonOrderId"];
    marketplaceId: definitions["String"];
    packageDetails: definitions["PackageDetails"];
  };
  /** @description The request schema for the `updateScheduledPackages` operation. */
  UpdateScheduledPackagesRequest: {
    marketplaceId: definitions["String"];
    updatePackageDetailsList: definitions["UpdatePackageDetailsList"];
  };
  /** @description Request to update the time slot of a package. */
  UpdatePackageDetails: {
    scheduledPackageId: definitions["ScheduledPackageId"];
    packageTimeSlot: definitions["TimeSlot"];
  };
  /** @description A list of package update details. */
  UpdatePackageDetailsList: definitions["UpdatePackageDetails"][];
  /** @description A string of up to 255 characters. */
  String: string;
  /**
   * Format: date-time
   * @description A datetime value in ISO 8601 format.
   */
  DateTime: string;
  /** @description The unit of measurement used to measure the length. */
  UnitOfLength: "Cm";
  /** @description The unit of measurement used to measure the weight. */
  UnitOfWeight: "Grams" | "G";
  /** @description The request body for the POST /easyShip/2022-03-23/packages/bulk API. */
  CreateScheduledPackagesRequest: {
    marketplaceId: definitions["String"];
    /** @description An array allowing users to specify orders to be scheduled. */
    orderScheduleDetailsList: definitions["OrderScheduleDetails"][];
    labelFormat: definitions["LabelFormat"];
  };
  /** @description The response schema for the bulk scheduling API. It returns by the bulk scheduling API containing an array of the scheduled packtages, an optional list of orders we couldn't schedule with the reason, and a pre-signed URL for a ZIP file containing the associated shipping labels plus the documents enabled for your marketplace. */
  CreateScheduledPackagesResponse: {
    /** @description A list of packages. Refer to the `Package` object. */
    scheduledPackages?: definitions["Package"][];
    /** @description A list of orders we couldn't scheduled on your behalf. Each element contains the reason and details on the error. */
    rejectedOrders?: definitions["RejectedOrder"][];
    printableDocumentsUrl?: definitions["URL"];
  };
  /** @description A pre-signed URL for the zip document containing the shipping labels and the documents enabled for your marketplace. */
  URL: string;
  /** @description The file format in which the shipping label will be created. */
  LabelFormat: "PDF" | "ZPL";
  /** @description The weight of the scheduled package */
  Weight: {
    value?: definitions["WeightValue"];
    unit?: definitions["UnitOfWeight"];
  };
  /**
   * Format: float
   * @description The weight of the package.
   */
  WeightValue: number;
  /** @description A list of error responses returned when a request is unsuccessful. */
  ErrorList: {
    errors: definitions["Error"][];
  };
  /** @description Error response returned when the request is unsuccessful. */
  Error: {
    /** @description An error code that identifies the type of error that occurred. */
    code: string;
    /** @description A message that describes the error condition. */
    message: string;
    /** @description Additional details that can help the caller understand or fix the issue. */
    details?: string;
  };
  /** @description An error code that identifies the type of error that occurred. The error codes listed below are specific to the Easy Ship section. */
  Code:
    | "InvalidInput"
    | "InvalidTimeSlotId"
    | "ScheduledPackageAlreadyExists"
    | "ScheduleWindowExpired"
    | "RetryableAfterGettingNewSlots"
    | "TimeSlotNotAvailable"
    | "ResourceNotFound"
    | "InvalidOrderState"
    | "RegionNotSupported"
    | "OrderNotEligibleForRescheduling"
    | "InternalServerError";
}

export interface operations {
  /**
   * Returns time slots available for Easy Ship orders to be scheduled based on the package weight and dimensions that the seller specifies.
   *
   * This operation is available for scheduled and unscheduled orders based on marketplace support. See **Get Time Slots** in the [Marketplace Support Table](doc:easyship-api-v2022-03-23-use-case-guide#marketplace-support-table).
   *
   * This operation can return time slots that have either pickup or drop-off handover methods - see **Supported Handover Methods** in the [Marketplace Support Table](doc:easyship-api-v2022-03-23-use-case-guide#marketplace-support-table).
   *
   * **Usage Plan:**
   *
   * | Rate (requests per second) | Burst |
   * | ---- | ---- |
   * | 1 | 5 |
   *
   * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
   */
  listHandoverSlots: {
    parameters: {
      body: {
        ListHandoverSlotsRequest?: definitions["ListHandoverSlotsRequest"];
      };
    };
    responses: {
      /** Success. */
      200: {
        headers: {};
        schema: definitions["ListHandoverSlotsResponse"];
      };
      /** Request has missing or invalid parameters and cannot be parsed. */
      400: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
      401: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
      403: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** The specified resource does not exist. */
      404: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** The request payload is in an unsupported format. */
      415: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** The frequency of requests was greater than allowed. */
      429: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** An unexpected condition occurred that prevented the server from fulfilling the request. */
      500: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** Temporary overloading or maintenance of the server. */
      503: {
        headers: {};
        schema: definitions["ErrorList"];
      };
    };
  };
  /**
   * Returns information about a package, including dimensions, weight, time slot information for handover, invoice and item information, and status.
   *
   * **Usage Plan:**
   *
   * | Rate (requests per second) | Burst |
   * | ---- | ---- |
   * | 1 | 5 |
   *
   * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
   */
  getScheduledPackage: {
    parameters: {
      query: {
        /** An Amazon-defined order identifier. Identifies the order that the seller wants to deliver using Amazon Easy Ship. */
        amazonOrderId: string;
        /** An identifier for the marketplace in which the seller is selling. */
        marketplaceId: string;
      };
    };
    responses: {
      /** Success. */
      200: {
        headers: {};
        schema: definitions["Package"];
      };
      /** Request has missing or invalid parameters and cannot be parsed. */
      400: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
      401: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
      403: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** The specified resource does not exist. */
      404: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** The request payload is in an unsupported format. */
      415: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** The frequency of requests was greater than allowed. */
      429: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** An unexpected condition occurred that prevented the server from fulfilling the request. */
      500: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** Temporary overloading or maintenance of the server. */
      503: {
        headers: {};
        schema: definitions["ErrorList"];
      };
    };
  };
  /**
   * Schedules an Easy Ship order and returns the scheduled package information.
   *
   * This operation does the following:
   *
   * *  Specifies the time slot and handover method for the order to be scheduled for delivery.
   *
   * * Updates the Easy Ship order status.
   *
   * * Generates a shipping label and an invoice. Calling `createScheduledPackage` also generates a warranty document if you specify a `SerialNumber` value. To get these documents, see [How to get invoice, shipping label, and warranty documents](doc:easyship-api-v2022-03-23-use-case-guide).
   *
   * * Shows the status of Easy Ship orders when you call the `getOrders` operation of the Selling Partner API for Orders and examine the `EasyShipShipmentStatus` property in the response body.
   *
   * See the **Shipping Label**, **Invoice**, and **Warranty** columns in the [Marketplace Support Table](doc:easyship-api-v2022-03-23-use-case-guide#marketplace-support-table) to see which documents are supported in each marketplace.
   *
   * **Usage Plan:**
   *
   * | Rate (requests per second) | Burst |
   * | ---- | ---- |
   * | 1 | 5 |
   *
   * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
   */
  createScheduledPackage: {
    parameters: {
      body: {
        CreateScheduledPackageRequest: definitions["CreateScheduledPackageRequest"];
      };
    };
    responses: {
      /** Success. */
      200: {
        headers: {};
        schema: definitions["Package"];
      };
      /** Request has missing or invalid parameters and cannot be parsed. */
      400: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
      401: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
      403: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** The specified resource does not exist. */
      404: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** The request payload is in an unsupported format. */
      415: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** The frequency of requests was greater than allowed. */
      429: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** An unexpected condition occurred that prevented the server from fulfilling the request. */
      500: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** Temporary overloading or maintenance of the server. */
      503: {
        headers: {};
        schema: definitions["ErrorList"];
      };
    };
  };
  /**
   * Updates the time slot for handing over the package indicated by the specified `scheduledPackageId`. You can get the new `slotId` value for the time slot by calling the `listHandoverSlots` operation before making another `patch` call.
   *
   * See the **Update Package** column in the [Marketplace Support Table](doc:easyship-api-v2022-03-23-use-case-guide#marketplace-support-table) to see which marketplaces this operation is supported in.
   *
   * **Usage Plan:**
   *
   * | Rate (requests per second) | Burst |
   * | ---- | ---- |
   * | 1 | 5 |
   *
   * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
   */
  updateScheduledPackages: {
    parameters: {
      body: {
        UpdateScheduledPackagesRequest?: definitions["UpdateScheduledPackagesRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        headers: {};
        schema: definitions["Packages"];
      };
      /** Request has missing or invalid parameters and cannot be parsed. */
      400: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
      401: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
      403: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** The specified resource does not exist. */
      404: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** The request payload is in an unsupported format. */
      415: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** The frequency of requests was greater than allowed. */
      429: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** An unexpected condition occurred that prevented the server from fulfilling the request. */
      500: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** Temporary overloading or maintenance of the server. */
      503: {
        headers: {};
        schema: definitions["ErrorList"];
      };
    };
  };
  /**
   * This operation automatically schedules a time slot for all the `amazonOrderId`s given as input, generating the associated shipping labels, along with other compliance documents according to the marketplace (refer to the [marketplace document support table](doc:easyship-api-v2022-03-23-use-case-guide#marketplace-support-table)).
   *
   * Developers calling this operation may optionally assign a `packageDetails` object, allowing them to input a preferred time slot for each order in ther request. In this case, Amazon will try to schedule the respective packages using their optional settings. On the other hand, *i.e.*, if the time slot is not provided, Amazon will then pick the earliest time slot possible.
   *
   * Regarding the shipping label's file format, external developers are able to choose between PDF or ZPL, and Amazon will create the label accordingly.
   *
   * This operation returns an array composed of the scheduled packages, and a short-lived URL pointing to a zip file containing the generated shipping labels and the other documents enabled for your marketplace. If at least an order couldn't be scheduled, then Amazon adds the `rejectedOrders` list into the response, which contains an entry for each order we couldn't process. Each entry is composed of an error message describing the reason of the failure, so that sellers can take action.
   *
   * The table below displays the supported request and burst maximum rates:
   *
   * **Usage Plan:**
   *
   * | Rate (requests per second) | Burst |
   * | ---- | ---- |
   * | 1 | 5 |
   *
   * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
   */
  createScheduledPackageBulk: {
    parameters: {
      body: {
        CreateScheduledPackagesRequest: definitions["CreateScheduledPackagesRequest"];
      };
    };
    responses: {
      /** Success */
      200: {
        headers: {};
        schema: definitions["CreateScheduledPackagesResponse"];
      };
      /** Request has missing or invalid parameters and cannot be parsed. */
      400: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
      401: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
      403: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** The specified resource does not exist. */
      404: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** The request payload is in an unsupported format. */
      415: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** The frequency of requests was greater than allowed. */
      429: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /**
       * Your rate limit (requests per second) for this operation.
       * _Note:_ For this status code, the rate limit header is deprecated and no longer returned..
       */
      500: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** Temporary overloading or maintenance of the server. */
      503: {
        headers: {};
        schema: definitions["ErrorList"];
      };
    };
  };
}

export interface external {}

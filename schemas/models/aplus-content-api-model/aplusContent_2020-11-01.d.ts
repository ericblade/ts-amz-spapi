/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    "/aplus/2020-11-01/contentDocuments": {
        /**
         * Returns a list of all A+ Content documents assigned to a selling partner. This operation returns only the metadata of the A+ Content documents. Call the getContentDocument operation to get the actual contents of the A+ Content documents.
         *
         * **Usage Plans:**
         *
         * | Plan type | Rate (requests per second) | Burst |
         * | ---- | ---- | ---- |
         * |Default| 10 | 10 |
         * |Selling partner specific| Variable | Variable |
         *
         * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        get: operations["searchContentDocuments"];
        /**
         * Creates a new A+ Content document.
         *
         * **Usage Plans:**
         *
         * | Plan type | Rate (requests per second) | Burst |
         * | ---- | ---- | ---- |
         * |Default| 10 | 10 |
         * |Selling partner specific| Variable | Variable |
         *
         * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        post: operations["createContentDocument"];
        parameters: {};
    };
    "/aplus/2020-11-01/contentDocuments/{contentReferenceKey}": {
        /**
         * Returns an A+ Content document, if available.
         *
         * **Usage Plans:**
         *
         * | Plan type | Rate (requests per second) | Burst |
         * | ---- | ---- | ---- |
         * |Default| 10 | 10 |
         * |Selling partner specific| Variable | Variable |
         *
         * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        get: operations["getContentDocument"];
        /**
         * Updates an existing A+ Content document.
         *
         * **Usage Plans:**
         *
         * | Plan type | Rate (requests per second) | Burst |
         * | ---- | ---- | ---- |
         * |Default| 10 | 10 |
         * |Selling partner specific| Variable | Variable |
         *
         * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        post: operations["updateContentDocument"];
        parameters: {};
    };
    "/aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins": {
        /**
         * Returns a list of ASINs related to the specified A+ Content document, if available. If you do not include the asinSet parameter, the operation returns all ASINs related to the content document.
         *
         * **Usage Plans:**
         *
         * | Plan type | Rate (requests per second) | Burst |
         * | ---- | ---- | ---- |
         * |Default| 10 | 10 |
         * |Selling partner specific| Variable | Variable |
         *
         * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        get: operations["listContentDocumentAsinRelations"];
        /**
         * Replaces all ASINs related to the specified A+ Content document, if available. This may add or remove ASINs, depending on the current set of related ASINs. Removing an ASIN has the side effect of suspending the content document from that ASIN.
         *
         * **Usage Plans:**
         *
         * | Plan type | Rate (requests per second) | Burst |
         * | ---- | ---- | ---- |
         * |Default| 10 | 10 |
         * |Selling partner specific| Variable | Variable |
         *
         * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        post: operations["postContentDocumentAsinRelations"];
        parameters: {};
    };
    "/aplus/2020-11-01/contentAsinValidations": {
        /**
         * Checks if the A+ Content document is valid for use on a set of ASINs.
         *
         * **Usage Plans:**
         *
         * | Plan type | Rate (requests per second) | Burst |
         * | ---- | ---- | ---- |
         * |Default| 10 | 10 |
         * |Selling partner specific| Variable | Variable |
         *
         * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        post: operations["validateContentDocumentAsinRelations"];
        parameters: {};
    };
    "/aplus/2020-11-01/contentPublishRecords": {
        /**
         * Searches for A+ Content publishing records, if available.
         *
         * **Usage Plans:**
         *
         * | Plan type | Rate (requests per second) | Burst |
         * | ---- | ---- | ---- |
         * |Default| 10 | 10 |
         * |Selling partner specific| Variable | Variable |
         *
         * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        get: operations["searchContentPublishRecords"];
        parameters: {};
    };
    "/aplus/2020-11-01/contentDocuments/{contentReferenceKey}/approvalSubmissions": {
        /**
         * Submits an A+ Content document for review, approval, and publishing.
         *
         * **Usage Plans:**
         *
         * | Plan type | Rate (requests per second) | Burst |
         * | ---- | ---- | ---- |
         * |Default| 10 | 10 |
         * |Selling partner specific| Variable | Variable |
         *
         * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        post: operations["postContentDocumentApprovalSubmission"];
        parameters: {};
    };
    "/aplus/2020-11-01/contentDocuments/{contentReferenceKey}/suspendSubmissions": {
        /**
         * Submits a request to suspend visible A+ Content. This neither deletes the content document nor the ASIN relations.
         *
         * **Usage Plans:**
         *
         * | Plan type | Rate (requests per second) | Burst |
         * | ---- | ---- | ---- |
         * |Default| 10 | 10 |
         * |Selling partner specific| Variable | Variable |
         *
         * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        post: operations["postContentDocumentSuspendSubmission"];
        parameters: {};
    };
}
export interface definitions {
    /** @description The base response data for all A+ Content operations when a request is successful or partially successful. Individual operations may extend this with additional data. */
    AplusResponse: {
        warnings?: definitions["MessageSet"];
    };
    /** @description The base response data for paginated A+ Content operations. Individual operations may extend this with additional data. If nextPageToken is not returned, there are no more pages to return. */
    AplusPaginatedResponse: definitions["AplusResponse"] & {
        nextPageToken?: definitions["PageToken"];
    };
    /** @description The error response for when a request is unsuccessful. */
    ErrorList: {
        /** @description A list of error responses returned when a request is unsuccessful. */
        errors: definitions["Error"][];
    };
    /** @description A set of messages to the user, such as warnings or comments. */
    MessageSet: definitions["Error"][];
    /** @description Error response returned when the request is unsuccessful. */
    Error: {
        /** @description The code that identifies the type of error condition. */
        code: string;
        /** @description A human readable description of the error condition. */
        message: string;
        /** @description Additional information, if available, to clarify the error condition. */
        details?: string;
    };
    /** @description A list of A+ Content metadata records. */
    ContentMetadataRecordList: definitions["ContentMetadataRecord"][];
    /** @description The metadata for an A+ Content document, with additional information for content management. */
    ContentMetadataRecord: {
        contentReferenceKey: definitions["ContentReferenceKey"];
        contentMetadata: definitions["ContentMetadata"];
    };
    /** @description The metadata of an A+ Content document. */
    ContentMetadata: {
        /** @description The A+ Content document name. */
        name: string;
        marketplaceId: definitions["MarketplaceId"];
        status: definitions["ContentStatus"];
        badgeSet: definitions["ContentBadgeSet"];
        /**
         * Format: date-time
         * @description The approximate age of the A+ Content document and metadata.
         */
        updateTime: string;
    };
    /** @description The A+ Content document type. */
    ContentType: "EBC" | "EMC";
    /** @description The A+ Content document subtype. This represents a special-purpose type of an A+ Content document. Not every A+ Content document type will have a subtype, and subtypes may change at any time. */
    ContentSubType: string;
    /** @description The submission status of the content document. */
    ContentStatus: "APPROVED" | "DRAFT" | "REJECTED" | "SUBMITTED";
    /** @description The set of content badges. */
    ContentBadgeSet: definitions["ContentBadge"][];
    /** @description A flag that provides additional information about an A+ Content document. */
    ContentBadge: "BULK" | "GENERATED" | "LAUNCHPAD" | "PREMIUM" | "STANDARD";
    /** @description The set of ASIN badges. */
    AsinBadgeSet: definitions["AsinBadge"][];
    /** @description A flag that provides additional information about an ASIN. This is contextual and may change depending on the request that generated it. */
    AsinBadge: "BRAND_NOT_ELIGIBLE" | "CATALOG_NOT_FOUND" | "CONTENT_NOT_PUBLISHED" | "CONTENT_PUBLISHED";
    /** @description The identifier for the marketplace where the A+ Content is published. */
    MarketplaceId: string;
    /**
     * @description The IETF language tag. This only supports the primary language subtag with one secondary language subtag. The secondary language subtag is almost always a regional designation. This does not support additional subtags beyond the primary and secondary subtags.
     * **Pattern:** ^[a-z]{2,}-[A-Z0-9]{2,}$
     */
    LanguageTag: string;
    /** @description The set of ASINs. */
    AsinSet: definitions["Asin"][];
    /** @description The Amazon Standard Identification Number (ASIN). */
    Asin: string;
    /** @description The set of ASIN metadata. */
    AsinMetadataSet: definitions["AsinMetadata"][];
    /** @description The A+ Content ASIN with additional metadata for content management. If you don't include the `includedDataSet` parameter in a call to the listContentDocumentAsinRelations operation, the related ASINs are returned without metadata. */
    AsinMetadata: {
        asin: definitions["Asin"];
        badgeSet?: definitions["AsinBadgeSet"];
        parent?: definitions["Asin"];
        /** @description The title for the ASIN in the Amazon catalog. */
        title?: string;
        /** @description The default image for the ASIN in the Amazon catalog. */
        imageUrl?: string;
        contentReferenceKeySet?: definitions["ContentReferenceKeySet"];
    };
    /** @description A list of A+ Content publishing records. */
    PublishRecordList: definitions["PublishRecord"][];
    /** @description The full context for an A+ Content publishing event. */
    PublishRecord: {
        marketplaceId: definitions["MarketplaceId"];
        locale: definitions["LanguageTag"];
        asin: definitions["Asin"];
        contentType: definitions["ContentType"];
        contentSubType?: definitions["ContentSubType"];
        contentReferenceKey: definitions["ContentReferenceKey"];
    };
    /** @description A set of content reference keys. */
    ContentReferenceKeySet: definitions["ContentReferenceKey"][];
    /** @description A unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier. */
    ContentReferenceKey: string;
    /** @description A page token that is returned when the results of the call exceed the page size. To get another page of results, call the operation again, passing in this value with the pageToken parameter. */
    PageToken: string;
    /** @description The instructions for optionally cropping an image. If no cropping is desired, set the dimensions to the original image size. If the image is cropped and no offset values are provided, then the coordinates of the top left corner of the cropped image, relative to the original image, are defaulted to (0,0). */
    ImageCropSpecification: {
        size: definitions["ImageDimensions"];
        offset?: definitions["ImageOffsets"];
    };
    /** @description The dimensions extending from the top left corner of the cropped image, or the top left corner of the original image if there is no cropping. Only `pixels` is allowed as the units value for ImageDimensions. */
    ImageDimensions: {
        width: definitions["IntegerWithUnits"];
        height: definitions["IntegerWithUnits"];
    };
    /** @description The top left corner of the cropped image, specified in the original image's coordinate space. */
    ImageOffsets: {
        x: definitions["IntegerWithUnits"];
        y: definitions["IntegerWithUnits"];
    };
    /** @description A whole number dimension and its unit of measurement. For example, this can represent 100 pixels. */
    IntegerWithUnits: {
        /** @description The dimension value. */
        value: number;
        /** @description The unit of measurement. */
        units: string;
    };
    /** @description A content document with additional information for content management. */
    ContentRecord: {
        contentReferenceKey: definitions["ContentReferenceKey"];
        contentMetadata?: definitions["ContentMetadata"];
        contentDocument?: definitions["ContentDocument"];
    };
    /** @description The A+ Content document. This is the enhanced content that is published to product detail pages. */
    ContentDocument: {
        /** @description The A+ Content document name. */
        name: string;
        contentType: definitions["ContentType"];
        contentSubType?: definitions["ContentSubType"];
        locale: definitions["LanguageTag"];
        contentModuleList: definitions["ContentModuleList"];
    };
    /** @description A list of A+ Content modules. */
    ContentModuleList: definitions["ContentModule"][];
    /** @description An A+ Content module. An A+ Content document is composed of content modules. The contentModuleType property selects which content module types to use. */
    ContentModule: {
        contentModuleType: definitions["ContentModuleType"];
        standardCompanyLogo?: definitions["StandardCompanyLogoModule"];
        standardComparisonTable?: definitions["StandardComparisonTableModule"];
        standardFourImageText?: definitions["StandardFourImageTextModule"];
        standardFourImageTextQuadrant?: definitions["StandardFourImageTextQuadrantModule"];
        standardHeaderImageText?: definitions["StandardHeaderImageTextModule"];
        standardImageSidebar?: definitions["StandardImageSidebarModule"];
        standardImageTextOverlay?: definitions["StandardImageTextOverlayModule"];
        standardMultipleImageText?: definitions["StandardMultipleImageTextModule"];
        standardProductDescription?: definitions["StandardProductDescriptionModule"];
        standardSingleImageHighlights?: definitions["StandardSingleImageHighlightsModule"];
        standardSingleImageSpecsDetail?: definitions["StandardSingleImageSpecsDetailModule"];
        standardSingleSideImage?: definitions["StandardSingleSideImageModule"];
        standardTechSpecs?: definitions["StandardTechSpecsModule"];
        standardText?: definitions["StandardTextModule"];
        standardThreeImageText?: definitions["StandardThreeImageTextModule"];
    };
    /** @description The type of A+ Content module. */
    ContentModuleType: "STANDARD_COMPANY_LOGO" | "STANDARD_COMPARISON_TABLE" | "STANDARD_FOUR_IMAGE_TEXT" | "STANDARD_FOUR_IMAGE_TEXT_QUADRANT" | "STANDARD_HEADER_IMAGE_TEXT" | "STANDARD_IMAGE_SIDEBAR" | "STANDARD_IMAGE_TEXT_OVERLAY" | "STANDARD_MULTIPLE_IMAGE_TEXT" | "STANDARD_PRODUCT_DESCRIPTION" | "STANDARD_SINGLE_IMAGE_HIGHLIGHTS" | "STANDARD_SINGLE_IMAGE_SPECS_DETAIL" | "STANDARD_SINGLE_SIDE_IMAGE" | "STANDARD_TECH_SPECS" | "STANDARD_TEXT" | "STANDARD_THREE_IMAGE_TEXT";
    /** @description The standard company logo image. */
    StandardCompanyLogoModule: {
        companyLogo: definitions["ImageComponent"];
    };
    /** @description The standard product comparison table. */
    StandardComparisonTableModule: {
        productColumns?: definitions["StandardComparisonProductBlock"][];
        metricRowLabels?: definitions["PlainTextItem"][];
    };
    /** @description Four standard images with text, presented across a single row. */
    StandardFourImageTextModule: {
        headline?: definitions["TextComponent"];
        block1?: definitions["StandardImageTextBlock"];
        block2?: definitions["StandardImageTextBlock"];
        block3?: definitions["StandardImageTextBlock"];
        block4?: definitions["StandardImageTextBlock"];
    };
    /** @description Four standard images with text, presented on a grid of four quadrants. */
    StandardFourImageTextQuadrantModule: {
        block1: definitions["StandardImageTextBlock"];
        block2: definitions["StandardImageTextBlock"];
        block3: definitions["StandardImageTextBlock"];
        block4: definitions["StandardImageTextBlock"];
    };
    /** @description Standard headline text, an image, and body text. */
    StandardHeaderImageTextModule: {
        headline?: definitions["TextComponent"];
        block?: definitions["StandardImageTextBlock"];
    };
    /** @description Two images, two paragraphs, and two bulleted lists. One image is smaller and displayed in the sidebar. */
    StandardImageSidebarModule: {
        headline?: definitions["TextComponent"];
        imageCaptionBlock?: definitions["StandardImageCaptionBlock"];
        descriptionTextBlock?: definitions["StandardTextBlock"];
        descriptionListBlock?: definitions["StandardTextListBlock"];
        sidebarImageTextBlock?: definitions["StandardImageTextBlock"];
        sidebarListBlock?: definitions["StandardTextListBlock"];
    };
    /** @description A standard background image with a floating text box. */
    StandardImageTextOverlayModule: {
        overlayColorType: definitions["ColorType"];
        block?: definitions["StandardImageTextBlock"];
    };
    /** @description Standard images with text, presented one at a time. The user clicks on thumbnails to view each block. */
    StandardMultipleImageTextModule: {
        blocks?: definitions["StandardImageTextCaptionBlock"][];
    };
    /** @description Standard product description text. */
    StandardProductDescriptionModule: {
        body: definitions["ParagraphComponent"];
    };
    /** @description A standard image with several paragraphs and a bulleted list. */
    StandardSingleImageHighlightsModule: {
        image?: definitions["ImageComponent"];
        headline?: definitions["TextComponent"];
        textBlock1?: definitions["StandardTextBlock"];
        textBlock2?: definitions["StandardTextBlock"];
        textBlock3?: definitions["StandardTextBlock"];
        bulletedListBlock?: definitions["StandardHeaderTextListBlock"];
    };
    /** @description A standard image with paragraphs and a bulleted list, and extra space for technical details. */
    StandardSingleImageSpecsDetailModule: {
        headline?: definitions["TextComponent"];
        image?: definitions["ImageComponent"];
        descriptionHeadline?: definitions["TextComponent"];
        descriptionBlock1?: definitions["StandardTextBlock"];
        descriptionBlock2?: definitions["StandardTextBlock"];
        specificationHeadline?: definitions["TextComponent"];
        specificationListBlock?: definitions["StandardHeaderTextListBlock"];
        specificationTextBlock?: definitions["StandardTextBlock"];
    };
    /** @description A standard headline and body text with an image on the side. */
    StandardSingleSideImageModule: {
        imagePositionType: definitions["PositionType"];
        block?: definitions["StandardImageTextBlock"];
    };
    /** @description The standard table of technical feature names and definitions. */
    StandardTechSpecsModule: {
        headline?: definitions["TextComponent"];
        /** @description The specification list. */
        specificationList: definitions["StandardTextPairBlock"][];
        /** @description The number of tables to present. Features are evenly divided between the tables. */
        tableCount?: number;
    };
    /** @description A standard headline and body text. */
    StandardTextModule: {
        headline?: definitions["TextComponent"];
        body: definitions["ParagraphComponent"];
    };
    /** @description Three standard images with text, presented across a single row. */
    StandardThreeImageTextModule: {
        headline?: definitions["TextComponent"];
        block1?: definitions["StandardImageTextBlock"];
        block2?: definitions["StandardImageTextBlock"];
        block3?: definitions["StandardImageTextBlock"];
    };
    /** @description The A+ Content standard comparison product block. */
    StandardComparisonProductBlock: {
        /** @description The rank or index of this comparison product block within the module. Different blocks cannot occupy the same position within a single module. */
        position: number;
        image?: definitions["ImageComponent"];
        /** @description The comparison product title. */
        title?: string;
        asin?: definitions["Asin"];
        /** @description Determines whether this block of content is visually highlighted. */
        highlight?: boolean;
        /** @description Comparison metrics for the product. */
        metrics?: definitions["PlainTextItem"][];
    };
    /** @description The A+ standard fixed-length list of text, with a related headline. */
    StandardHeaderTextListBlock: {
        headline?: definitions["TextComponent"];
        block?: definitions["StandardTextListBlock"];
    };
    /** @description The A+ Content standard fixed length list of text, usually presented as bullet points. */
    StandardTextListBlock: {
        textList: definitions["TextItem"][];
    };
    /** @description The A+ Content standard image and text block, with a related caption. The caption may not display on all devices. */
    StandardImageTextCaptionBlock: {
        block?: definitions["StandardImageTextBlock"];
        caption?: definitions["TextComponent"];
    };
    /** @description The A+ Content standard image and caption block. */
    StandardImageCaptionBlock: {
        image?: definitions["ImageComponent"];
        caption?: definitions["TextComponent"];
    };
    /** @description The A+ Content standard image and text box block. */
    StandardImageTextBlock: {
        image?: definitions["ImageComponent"];
        headline?: definitions["TextComponent"];
        body?: definitions["ParagraphComponent"];
    };
    /** @description The A+ Content standard text box block, comprised of a paragraph with a headline. */
    StandardTextBlock: {
        headline?: definitions["TextComponent"];
        body?: definitions["ParagraphComponent"];
    };
    /** @description The A+ Content standard label and description block, comprised of a pair of text components. */
    StandardTextPairBlock: {
        label?: definitions["TextComponent"];
        description?: definitions["TextComponent"];
    };
    /** @description Rich positional text, usually presented as a collection of bullet points. */
    TextItem: {
        /** @description The rank or index of this text item within the collection. Different items cannot occupy the same position within a single collection. */
        position: number;
        text: definitions["TextComponent"];
    };
    /** @description Plain positional text, used in collections of brief labels and descriptors. */
    PlainTextItem: {
        /** @description The rank or index of this text item within the collection. Different items cannot occupy the same position within a single collection. */
        position: number;
        /** @description The actual plain text. */
        value: string;
    };
    /** @description A reference to an image, hosted in the A+ Content media library. */
    ImageComponent: {
        /** @description This identifier is provided by the Selling Partner API for Uploads. */
        uploadDestinationId: string;
        imageCropSpecification: definitions["ImageCropSpecification"];
        /** @description The alternative text for the image. */
        altText: string;
    };
    /** @description A list of rich text content, usually presented in a text box. */
    ParagraphComponent: {
        textList: definitions["TextComponent"][];
    };
    /** @description Rich text content. */
    TextComponent: {
        /** @description The actual plain text. */
        value: string;
        decoratorSet?: definitions["DecoratorSet"];
    };
    /** @description The relative color scheme of content. */
    ColorType: "DARK" | "LIGHT";
    /** @description The relative positioning of content. */
    PositionType: "LEFT" | "RIGHT";
    /** @description A set of content decorators. */
    DecoratorSet: definitions["Decorator"][];
    /** @description A decorator applied to a content string value in order to create rich text. */
    Decorator: {
        type?: definitions["DecoratorType"];
        /** @description The starting character of this decorator within the content string. Use zero for the first character. */
        offset?: number;
        /** @description The number of content characters to alter with this decorator. Decorators such as line breaks can have zero length and fit between characters. */
        length?: number;
        /** @description The relative intensity or variation of this decorator. Decorators such as bullet-points, for example, can have multiple indentation depths. */
        depth?: number;
    };
    /** @description The type of rich text decorator. */
    DecoratorType: "LIST_ITEM" | "LIST_ORDERED" | "LIST_UNORDERED" | "STYLE_BOLD" | "STYLE_ITALIC" | "STYLE_LINEBREAK" | "STYLE_PARAGRAPH" | "STYLE_UNDERLINE";
    SearchContentDocumentsResponse: definitions["AplusPaginatedResponse"] & {
        /** @description The content metadata records. */
        contentMetadataRecords: definitions["ContentMetadataRecordList"];
    };
    GetContentDocumentResponse: definitions["AplusResponse"] & {
        contentRecord: definitions["ContentRecord"];
    };
    PostContentDocumentRequest: {
        contentDocument: definitions["ContentDocument"];
    };
    PostContentDocumentResponse: definitions["AplusResponse"] & {
        contentReferenceKey: definitions["ContentReferenceKey"];
    };
    ListContentDocumentAsinRelationsResponse: definitions["AplusPaginatedResponse"] & {
        asinMetadataSet: definitions["AsinMetadataSet"];
    };
    PostContentDocumentAsinRelationsRequest: {
        asinSet: definitions["AsinSet"];
    };
    PostContentDocumentAsinRelationsResponse: definitions["AplusResponse"];
    ValidateContentDocumentAsinRelationsResponse: definitions["AplusResponse"] & definitions["ErrorList"];
    SearchContentPublishRecordsResponse: definitions["AplusPaginatedResponse"] & {
        publishRecordList: definitions["PublishRecordList"];
    };
    PostContentDocumentApprovalSubmissionResponse: definitions["AplusResponse"];
    PostContentDocumentSuspendSubmissionResponse: definitions["AplusResponse"];
}
export interface parameters {
    /** @description The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier. */
    contentReferenceKey: string;
    /** @description The identifier for the marketplace where the A+ Content is published. */
    marketplaceId: string;
    /** @description A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. */
    pageToken: string;
    /** @description The set of ASINs. */
    asinSet: string[];
    /** @description The Amazon Standard Identification Number (ASIN). */
    asin: string;
    /** @description The set of A+ data types to include in the response. */
    getContentDocumentIncludedDataSet: ("CONTENTS" | "METADATA")[];
    /** @description The set of A+ data types to include in the response. */
    listContentDocumentAsinRelationsIncludedDataSet: "METADATA"[];
}
export interface operations {
    /**
     * Returns a list of all A+ Content documents assigned to a selling partner. This operation returns only the metadata of the A+ Content documents. Call the getContentDocument operation to get the actual contents of the A+ Content documents.
     *
     * **Usage Plans:**
     *
     * | Plan type | Rate (requests per second) | Burst |
     * | ---- | ---- | ---- |
     * |Default| 10 | 10 |
     * |Selling partner specific| Variable | Variable |
     *
     * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    searchContentDocuments: {
        parameters: {
            query: {
                /** The identifier for the marketplace where the A+ Content is published. */
                marketplaceId: string;
                /** A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. */
                pageToken?: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["SearchContentDocumentsResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The specified resource no longer exists. */
            410: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["ErrorList"];
            };
        };
    };
    /**
     * Creates a new A+ Content document.
     *
     * **Usage Plans:**
     *
     * | Plan type | Rate (requests per second) | Burst |
     * | ---- | ---- | ---- |
     * |Default| 10 | 10 |
     * |Selling partner specific| Variable | Variable |
     *
     * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    createContentDocument: {
        parameters: {
            query: {
                /** The identifier for the marketplace where the A+ Content is published. */
                marketplaceId: string;
            };
            body: {
                /** The content document request details. */
                postContentDocumentRequest: definitions["PostContentDocumentRequest"];
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["PostContentDocumentResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["ErrorList"];
            };
        };
    };
    /**
     * Returns an A+ Content document, if available.
     *
     * **Usage Plans:**
     *
     * | Plan type | Rate (requests per second) | Burst |
     * | ---- | ---- | ---- |
     * |Default| 10 | 10 |
     * |Selling partner specific| Variable | Variable |
     *
     * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    getContentDocument: {
        parameters: {
            path: {
                /** The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier. */
                contentReferenceKey: string;
            };
            query: {
                /** The identifier for the marketplace where the A+ Content is published. */
                marketplaceId: string;
                /** The set of A+ Content data types to include in the response. */
                includedDataSet: ("CONTENTS" | "METADATA")[];
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["GetContentDocumentResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The specified resource no longer exists. */
            410: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["ErrorList"];
            };
        };
    };
    /**
     * Updates an existing A+ Content document.
     *
     * **Usage Plans:**
     *
     * | Plan type | Rate (requests per second) | Burst |
     * | ---- | ---- | ---- |
     * |Default| 10 | 10 |
     * |Selling partner specific| Variable | Variable |
     *
     * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    updateContentDocument: {
        parameters: {
            path: {
                /** The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier. */
                contentReferenceKey: string;
            };
            query: {
                /** The identifier for the marketplace where the A+ Content is published. */
                marketplaceId: string;
            };
            body: {
                /** The content document request details. */
                postContentDocumentRequest: definitions["PostContentDocumentRequest"];
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["PostContentDocumentResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The specified resource no longer exists. */
            410: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["ErrorList"];
            };
        };
    };
    /**
     * Returns a list of ASINs related to the specified A+ Content document, if available. If you do not include the asinSet parameter, the operation returns all ASINs related to the content document.
     *
     * **Usage Plans:**
     *
     * | Plan type | Rate (requests per second) | Burst |
     * | ---- | ---- | ---- |
     * |Default| 10 | 10 |
     * |Selling partner specific| Variable | Variable |
     *
     * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    listContentDocumentAsinRelations: {
        parameters: {
            path: {
                /** The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier. */
                contentReferenceKey: string;
            };
            query: {
                /** The identifier for the marketplace where the A+ Content is published. */
                marketplaceId: string;
                /** The set of A+ Content data types to include in the response. If you do not include this parameter, the operation returns the related ASINs without metadata. */
                includedDataSet?: "METADATA"[];
                /** The set of ASINs. */
                asinSet?: string[];
                /** A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. */
                pageToken?: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["ListContentDocumentAsinRelationsResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The specified resource no longer exists. */
            410: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["ErrorList"];
            };
        };
    };
    /**
     * Replaces all ASINs related to the specified A+ Content document, if available. This may add or remove ASINs, depending on the current set of related ASINs. Removing an ASIN has the side effect of suspending the content document from that ASIN.
     *
     * **Usage Plans:**
     *
     * | Plan type | Rate (requests per second) | Burst |
     * | ---- | ---- | ---- |
     * |Default| 10 | 10 |
     * |Selling partner specific| Variable | Variable |
     *
     * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    postContentDocumentAsinRelations: {
        parameters: {
            path: {
                /** The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier. */
                contentReferenceKey: string;
            };
            query: {
                /** The identifier for the marketplace where the A+ Content is published. */
                marketplaceId: string;
            };
            body: {
                /** The content document ASIN relations request details. */
                postContentDocumentAsinRelationsRequest: definitions["PostContentDocumentAsinRelationsRequest"];
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["PostContentDocumentAsinRelationsResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The specified resource no longer exists. */
            410: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["ErrorList"];
            };
        };
    };
    /**
     * Checks if the A+ Content document is valid for use on a set of ASINs.
     *
     * **Usage Plans:**
     *
     * | Plan type | Rate (requests per second) | Burst |
     * | ---- | ---- | ---- |
     * |Default| 10 | 10 |
     * |Selling partner specific| Variable | Variable |
     *
     * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    validateContentDocumentAsinRelations: {
        parameters: {
            query: {
                /** The identifier for the marketplace where the A+ Content is published. */
                marketplaceId: string;
                /** The set of ASINs. */
                asinSet?: string[];
            };
            body: {
                /** The content document request details. */
                postContentDocumentRequest: definitions["PostContentDocumentRequest"];
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["ValidateContentDocumentAsinRelationsResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["ErrorList"];
            };
        };
    };
    /**
     * Searches for A+ Content publishing records, if available.
     *
     * **Usage Plans:**
     *
     * | Plan type | Rate (requests per second) | Burst |
     * | ---- | ---- | ---- |
     * |Default| 10 | 10 |
     * |Selling partner specific| Variable | Variable |
     *
     * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    searchContentPublishRecords: {
        parameters: {
            query: {
                /** The identifier for the marketplace where the A+ Content is published. */
                marketplaceId: string;
                /** The Amazon Standard Identification Number (ASIN). */
                asin: string;
                /** A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. */
                pageToken?: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["SearchContentPublishRecordsResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["ErrorList"];
            };
        };
    };
    /**
     * Submits an A+ Content document for review, approval, and publishing.
     *
     * **Usage Plans:**
     *
     * | Plan type | Rate (requests per second) | Burst |
     * | ---- | ---- | ---- |
     * |Default| 10 | 10 |
     * |Selling partner specific| Variable | Variable |
     *
     * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    postContentDocumentApprovalSubmission: {
        parameters: {
            path: {
                /** The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier. */
                contentReferenceKey: string;
            };
            query: {
                /** The identifier for the marketplace where the A+ Content is published. */
                marketplaceId: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["PostContentDocumentApprovalSubmissionResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The specified resource no longer exists. */
            410: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["ErrorList"];
            };
        };
    };
    /**
     * Submits a request to suspend visible A+ Content. This neither deletes the content document nor the ASIN relations.
     *
     * **Usage Plans:**
     *
     * | Plan type | Rate (requests per second) | Burst |
     * | ---- | ---- | ---- |
     * |Default| 10 | 10 |
     * |Selling partner specific| Variable | Variable |
     *
     * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    postContentDocumentSuspendSubmission: {
        parameters: {
            path: {
                /** The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier. */
                contentReferenceKey: string;
            };
            query: {
                /** The identifier for the marketplace where the A+ Content is published. */
                marketplaceId: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["PostContentDocumentSuspendSubmissionResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The specified resource no longer exists. */
            410: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["ErrorList"];
            };
        };
    };
}
export interface external {
}

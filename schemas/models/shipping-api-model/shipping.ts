/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/shipping/v1/shipments": {
    /**
     * Create a new shipment.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 5 | 15 |
     *
     * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     */
    post: operations["createShipment"];
  };
  "/shipping/v1/shipments/{shipmentId}": {
    /**
     * Return the entire shipment object for the shipmentId.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 5 | 15 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    get: operations["getShipment"];
  };
  "/shipping/v1/shipments/{shipmentId}/cancel": {
    /**
     * Cancel a shipment by the given shipmentId.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 5 | 15 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    post: operations["cancelShipment"];
  };
  "/shipping/v1/shipments/{shipmentId}/purchaseLabels": {
    /**
     * Purchase shipping labels based on a given rate.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 5 | 15 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    post: operations["purchaseLabels"];
  };
  "/shipping/v1/shipments/{shipmentId}/containers/{trackingId}/label": {
    /**
     * Retrieve shipping label based on the shipment id and tracking id.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 5 | 15 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    post: operations["retrieveShippingLabel"];
  };
  "/shipping/v1/purchaseShipment": {
    /**
     * Purchase shipping labels.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 5 | 15 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    post: operations["purchaseShipment"];
  };
  "/shipping/v1/rates": {
    /**
     * Get service rates.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 5 | 15 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    post: operations["getRates"];
  };
  "/shipping/v1/account": {
    /**
     * Verify if the current account is valid.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 5 | 15 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    get: operations["getAccount"];
  };
  "/shipping/v1/tracking/{trackingId}": {
    /**
     * Return the tracking information of a shipment.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 1 | 1 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    get: operations["getTrackingInformation"];
  };
}

export interface definitions {
  /** @description Error response returned when the request is unsuccessful. */
  Error: {
    /** @description An error code that identifies the type of error that occured. */
    code: string;
    /** @description A message that describes the error condition in a human-readable form. */
    message: string;
    /** @description Additional details that can help the caller understand or fix the issue. */
    details?: string;
  };
  /** @description A list of error responses returned when a request is unsuccessful. */
  ErrorList: definitions["Error"][];
  /** @description This is the Amazon Shipping account id generated during the Amazon Shipping onboarding process. */
  AccountId: string;
  /** @description The unique shipment identifier. */
  ShipmentId: string;
  /** @description Client reference id. */
  ClientReferenceId: string;
  /** @description An identifier for the container. This must be unique within all the containers in the same shipment. */
  ContainerReferenceId: string;
  /** @description The event code of a shipment, such as Departed, Received, and ReadyForReceive. */
  EventCode: string;
  /** @description The state or region where the person, business or institution is located. */
  StateOrRegion: string;
  /** @description The city where the person, business or institution is located. */
  City: string;
  /** @description The two digit country code. In ISO 3166-1 alpha-2 format. */
  CountryCode: string;
  /** @description The postal code of that address. It contains a series of letters or digits or both, sometimes including spaces or punctuation. */
  PostalCode: string;
  /** @description The location where the person, business or institution is located. */
  Location: {
    stateOrRegion?: definitions["StateOrRegion"];
    city?: definitions["City"];
    countryCode?: definitions["CountryCode"];
    postalCode?: definitions["PostalCode"];
  };
  /** @description An event of a shipment */
  Event: {
    eventCode: definitions["EventCode"];
    /**
     * Format: date-time
     * @description The date and time of an event for a shipment.
     */
    eventTime: string;
    location?: definitions["Location"];
  };
  /** @description A list of events of a shipment. */
  EventList: definitions["Event"][];
  /** @description The tracking id generated to each shipment. It contains a series of letters or digits or both. */
  TrackingId: string;
  /** @description The tracking summary. */
  TrackingSummary: {
    /** @description The derived status based on the events in the eventHistory. */
    status?: string;
  };
  /**
   * Format: date-time
   * @description The promised delivery date and time of a shipment.
   */
  PromisedDeliveryDate: string;
  /** @description The address. */
  Address: {
    /** @description The name of the person, business or institution at that address. */
    name: string;
    /** @description First line of that address. */
    addressLine1: string;
    /** @description Additional address information, if required. */
    addressLine2?: string;
    /** @description Additional address information, if required. */
    addressLine3?: string;
    stateOrRegion: definitions["StateOrRegion"];
    city: definitions["City"];
    countryCode: definitions["CountryCode"];
    postalCode: definitions["PostalCode"];
    /** @description The email address of the contact associated with the address. */
    email?: string;
    /** @description The email cc addresses of the contact associated with the address. */
    copyEmails?: string[];
    /** @description The phone number of the person, business or institution located at that address. */
    phoneNumber?: string;
  };
  /** @description The time range. */
  TimeRange: {
    /**
     * Format: date-time
     * @description The start date and time. This defaults to the current date and time.
     */
    start?: string;
    /**
     * Format: date-time
     * @description The end date and time. This must come after the value of start. This defaults to the next business day from the start.
     */
    end?: string;
  };
  /** @description The promised delivery time and pickup time. */
  ShippingPromiseSet: {
    /** @description The time window in which the shipment will be delivered. */
    deliveryWindow?: definitions["TimeRange"];
    /** @description The time window in which Amazon Shipping will pick up the shipment. */
    receiveWindow?: definitions["TimeRange"];
  };
  /** @description The type of shipping service that will be used for the service offering. */
  ServiceType:
    | "Amazon Shipping Ground"
    | "Amazon Shipping Standard"
    | "Amazon Shipping Premium";
  /** @description A list of service types that can be used to send the shipment. */
  ServiceTypeList: definitions["ServiceType"][];
  /** @description The available rate that can be used to send the shipment */
  Rate: {
    /** @description An identifier for the rate. */
    rateId?: string;
    /** @description The total charge that will be billed for the rate. */
    totalCharge?: definitions["Currency"];
    /** @description The weight that was used to calculate the totalCharge. */
    billedWeight?: definitions["Weight"];
    /**
     * Format: date-time
     * @description The time after which the offering will expire.
     */
    expirationTime?: string;
    serviceType?: definitions["ServiceType"];
    promise?: definitions["ShippingPromiseSet"];
  };
  /** @description A list of all the available rates that can be used to send the shipment. */
  RateList: definitions["Rate"][];
  /** @description An identifier for the rating. */
  RateId: string;
  /** @description The specific rate purchased for the shipment, or null if unpurchased. */
  AcceptedRate: {
    /** @description The total charge that will be billed for the rate. */
    totalCharge?: definitions["Currency"];
    /** @description The weight that was used to calculate the totalCharge. */
    billedWeight?: definitions["Weight"];
    serviceType?: definitions["ServiceType"];
    promise?: definitions["ShippingPromiseSet"];
  };
  /** @description The specific rate for a shipping service, or null if no service available. */
  ServiceRate: {
    /** @description The total charge that will be billed for the rate. */
    totalCharge: definitions["Currency"];
    /** @description The weight that was used to calculate the totalCharge. */
    billableWeight: definitions["Weight"];
    serviceType: definitions["ServiceType"];
    promise: definitions["ShippingPromiseSet"];
  };
  /** @description A list of service rates. */
  ServiceRateList: definitions["ServiceRate"][];
  /** @description The account related with the shipment. */
  Party: {
    accountId?: definitions["AccountId"];
  };
  /** @description The total value of all items in the container. */
  Currency: {
    /** @description The amount of currency. */
    value: number;
    /** @description A 3-character currency code. */
    unit: string;
  };
  /** @description A set of measurements for a three-dimensional object. */
  Dimensions: {
    /** @description The length of the container. */
    length: number;
    /** @description The width of the container. */
    width: number;
    /** @description The height of the container. */
    height: number;
    /** @description The unit of these measurements. */
    unit: "IN" | "CM";
  };
  /** @description The weight. */
  Weight: {
    /** @description The unit of measurement. */
    unit: "g" | "kg" | "oz" | "lb";
    /** @description The measurement value. */
    value: number;
  };
  /** @description Item in the container. */
  ContainerItem: {
    /** @description The quantity of the items of this type in the container. */
    quantity: number;
    /** @description The unit price of an item of this type (the total value of this item type in the container is unitPrice * quantity). */
    unitPrice: definitions["Currency"];
    /** @description The unit weight of an item of this type (the total weight of this item type in the container is unitWeight * quantity). */
    unitWeight: definitions["Weight"];
    /** @description A descriptive title of the item. */
    title: string;
  };
  /** @description Container in the shipment. */
  Container: {
    /** @description The type of physical container being used. (always 'PACKAGE') */
    containerType?: "PACKAGE";
    containerReferenceId: definitions["ContainerReferenceId"];
    /** @description The total value of all items in the container. */
    value: definitions["Currency"];
    /** @description The length, width, height, and weight of the container. */
    dimensions: definitions["Dimensions"];
    /** @description A list of the items in the container. */
    items: definitions["ContainerItem"][];
    /** @description The weight of the container. */
    weight: definitions["Weight"];
  };
  /** @description A list of container. */
  ContainerList: definitions["Container"][];
  /** @description Container specification for checking the service rate. */
  ContainerSpecification: {
    /** @description The length, width, and height of the container. */
    dimensions: definitions["Dimensions"];
    /** @description The weight of the container. */
    weight: definitions["Weight"];
  };
  /** @description A list of container specifications. */
  ContainerSpecificationList: definitions["ContainerSpecification"][];
  /** @description The label details of the container. */
  Label: {
    labelStream?: definitions["LabelStream"];
    labelSpecification?: definitions["LabelSpecification"];
  };
  /** @description Label details including label stream, format, size. */
  LabelResult: {
    containerReferenceId?: definitions["ContainerReferenceId"];
    /** @description The tracking identifier assigned to the container. */
    trackingId?: string;
    label?: definitions["Label"];
  };
  /** @description A list of label results */
  LabelResultList: definitions["LabelResult"][];
  /** @description Contains binary image data encoded as a base-64 string. */
  LabelStream: string;
  /** @description The label specification info. */
  LabelSpecification: {
    /** @description The format of the label. Enum of PNG only for now. */
    labelFormat: "PNG";
    /** @description The label stock size specification in length and height. Enum of 4x6 only for now. */
    labelStockSize: "4x6";
  };
  /** @description The request schema for the createShipment operation. */
  CreateShipmentRequest: {
    clientReferenceId: definitions["ClientReferenceId"];
    shipTo: definitions["Address"];
    shipFrom: definitions["Address"];
    containers: definitions["ContainerList"];
  };
  /** @description The request schema for the purchaseLabels operation. */
  PurchaseLabelsRequest: {
    rateId: definitions["RateId"];
    labelSpecification: definitions["LabelSpecification"];
  };
  /** @description The request schema for the retrieveShippingLabel operation. */
  RetrieveShippingLabelRequest: {
    labelSpecification: definitions["LabelSpecification"];
  };
  /** @description The payload schema for the getRates operation. */
  GetRatesRequest: {
    shipTo: definitions["Address"];
    shipFrom: definitions["Address"];
    serviceTypes: definitions["ServiceTypeList"];
    /**
     * Format: date-time
     * @description The start date and time. This defaults to the current date and time.
     */
    shipDate?: string;
    containerSpecifications: definitions["ContainerSpecificationList"];
  };
  /** @description The payload schema for the purchaseShipment operation. */
  PurchaseShipmentRequest: {
    clientReferenceId: definitions["ClientReferenceId"];
    shipTo: definitions["Address"];
    shipFrom: definitions["Address"];
    /**
     * Format: date-time
     * @description The start date and time. This defaults to the current date and time.
     */
    shipDate?: string;
    serviceType: definitions["ServiceType"];
    containers: definitions["ContainerList"];
    labelSpecification: definitions["LabelSpecification"];
  };
  /** @description The payload schema for the createShipment operation. */
  CreateShipmentResult: {
    shipmentId: definitions["ShipmentId"];
    eligibleRates: definitions["RateList"];
  };
  /** @description The shipment related data. */
  Shipment: {
    shipmentId: definitions["ShipmentId"];
    clientReferenceId: definitions["ClientReferenceId"];
    shipFrom: definitions["Address"];
    shipTo: definitions["Address"];
    acceptedRate?: definitions["AcceptedRate"];
    shipper?: definitions["Party"];
    containers: definitions["ContainerList"];
  };
  /** @description The payload schema for the purchaseLabels operation. */
  PurchaseLabelsResult: {
    shipmentId: definitions["ShipmentId"];
    clientReferenceId?: definitions["ClientReferenceId"];
    acceptedRate: definitions["AcceptedRate"];
    labelResults: definitions["LabelResultList"];
  };
  /** @description The payload schema for the retrieveShippingLabel operation. */
  RetrieveShippingLabelResult: {
    labelStream: definitions["LabelStream"];
    labelSpecification: definitions["LabelSpecification"];
  };
  /** @description The account related data. */
  Account: {
    accountId: definitions["AccountId"];
  };
  /** @description The payload schema for the getRates operation. */
  GetRatesResult: {
    serviceRates: definitions["ServiceRateList"];
  };
  /** @description The payload schema for the purchaseShipment operation. */
  PurchaseShipmentResult: {
    shipmentId: definitions["ShipmentId"];
    serviceRate: definitions["ServiceRate"];
    labelResults: definitions["LabelResultList"];
  };
  /** @description The payload schema for the getTrackingInformation operation. */
  TrackingInformation: {
    trackingId: definitions["TrackingId"];
    summary: definitions["TrackingSummary"];
    promisedDeliveryDate: definitions["PromisedDeliveryDate"];
    eventHistory: definitions["EventList"];
  };
  /** @description The response schema for the createShipment operation. */
  CreateShipmentResponse: {
    /** @description The payload for createShipment operation */
    payload?: definitions["CreateShipmentResult"];
    /** @description Encountered errors for the operation. */
    errors?: definitions["ErrorList"];
  };
  /** @description The response schema for the getShipment operation. */
  GetShipmentResponse: {
    /** @description The payload for getShipment operation */
    payload?: definitions["Shipment"];
    /** @description Encountered errors for the operation. */
    errors?: definitions["ErrorList"];
  };
  /** @description The response schema for the getRates operation. */
  GetRatesResponse: {
    /** @description The payload for getRates operation */
    payload?: definitions["GetRatesResult"];
    /** @description Encountered errors for the operation. */
    errors?: definitions["ErrorList"];
  };
  /** @description The response schema for the purchaseShipment operation. */
  PurchaseShipmentResponse: {
    /** @description The payload for purchaseShipment operation */
    payload?: definitions["PurchaseShipmentResult"];
    /** @description Encountered errors for the operation. */
    errors?: definitions["ErrorList"];
  };
  /** @description The response schema for the cancelShipment operation. */
  CancelShipmentResponse: {
    /** @description Encountered errors for the operation. */
    errors?: definitions["ErrorList"];
  };
  /** @description The response schema for the purchaseLabels operation. */
  PurchaseLabelsResponse: {
    /** @description The payload for purchaseLabels operation */
    payload?: definitions["PurchaseLabelsResult"];
    /** @description Encountered errors for the operation. */
    errors?: definitions["ErrorList"];
  };
  /** @description The response schema for the retrieveShippingLabel operation. */
  RetrieveShippingLabelResponse: {
    /** @description The payload for retrieveShippingLabel operation */
    payload?: definitions["RetrieveShippingLabelResult"];
    /** @description Encountered errors for the operation. */
    errors?: definitions["ErrorList"];
  };
  /** @description The response schema for the getAccount operation. */
  GetAccountResponse: {
    /** @description The payload for getAccount operation */
    payload?: definitions["Account"];
    /** @description Encountered errors for the operation. */
    errors?: definitions["ErrorList"];
  };
  /** @description The response schema for the getTrackingInformation operation. */
  GetTrackingInformationResponse: {
    /** @description The payload for getTrackingInformation operation */
    payload?: definitions["TrackingInformation"];
    /** @description Encountered errors for the operation. */
    errors?: definitions["ErrorList"];
  };
}

export interface operations {
  /**
   * Create a new shipment.
   *
   * **Usage Plan:**
   *
   * | Rate (requests per second) | Burst |
   * | ---- | ---- |
   * | 5 | 15 |
   *
   * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
   */
  createShipment: {
    parameters: {
      body: {
        body: definitions["CreateShipmentRequest"];
      };
    };
    responses: {
      /** Success. */
      200: {
        headers: {};
        schema: definitions["CreateShipmentResponse"];
      };
      /** Request has missing or invalid parameters and cannot be parsed. */
      400: {
        headers: {};
        schema: definitions["CreateShipmentResponse"];
      };
      /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
      401: {
        headers: {};
        schema: definitions["CreateShipmentResponse"];
      };
      /** 403 can be caused for reasons like Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found. */
      403: {
        headers: {};
        schema: definitions["CreateShipmentResponse"];
      };
      /** The resource specified does not exist. */
      404: {
        headers: {};
        schema: definitions["CreateShipmentResponse"];
      };
      /** The frequency of requests was greater than allowed. */
      429: {
        headers: {};
        schema: definitions["CreateShipmentResponse"];
      };
      /** Encountered an unexpected condition which prevented the server from fulfilling the request. */
      500: {
        headers: {};
        schema: definitions["CreateShipmentResponse"];
      };
      /** Temporary overloading or maintenance of the server. */
      503: {
        headers: {};
        schema: definitions["CreateShipmentResponse"];
      };
    };
  };
  /**
   * Return the entire shipment object for the shipmentId.
   *
   * **Usage Plan:**
   *
   * | Rate (requests per second) | Burst |
   * | ---- | ---- |
   * | 5 | 15 |
   *
   * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
   */
  getShipment: {
    parameters: {
      path: {
        shipmentId: string;
      };
    };
    responses: {
      /** Success. */
      200: {
        headers: {};
        schema: definitions["GetShipmentResponse"];
      };
      /** Request has missing or invalid parameters and cannot be parsed. */
      400: {
        headers: {};
        schema: definitions["GetShipmentResponse"];
      };
      /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
      401: {
        headers: {};
        schema: definitions["GetShipmentResponse"];
      };
      /** 403 can be caused for reasons like Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found. */
      403: {
        headers: {};
        schema: definitions["GetShipmentResponse"];
      };
      /** The resource specified does not exist. */
      404: {
        headers: {};
        schema: definitions["GetShipmentResponse"];
      };
      /** The frequency of requests was greater than allowed. */
      429: {
        headers: {};
        schema: definitions["GetShipmentResponse"];
      };
      /** Encountered an unexpected condition which prevented the server from fulfilling the request. */
      500: {
        headers: {};
        schema: definitions["GetShipmentResponse"];
      };
      /** Temporary overloading or maintenance of the server. */
      503: {
        headers: {};
        schema: definitions["GetShipmentResponse"];
      };
    };
  };
  /**
   * Cancel a shipment by the given shipmentId.
   *
   * **Usage Plan:**
   *
   * | Rate (requests per second) | Burst |
   * | ---- | ---- |
   * | 5 | 15 |
   *
   * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
   */
  cancelShipment: {
    parameters: {
      path: {
        shipmentId: string;
      };
    };
    responses: {
      /** Success. */
      200: {
        headers: {};
        schema: definitions["CancelShipmentResponse"];
      };
      /** Request has missing or invalid parameters and cannot be parsed. */
      400: {
        headers: {};
        schema: definitions["CancelShipmentResponse"];
      };
      /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
      401: {
        headers: {};
        schema: definitions["CancelShipmentResponse"];
      };
      /** 403 can be caused for reasons like Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found. */
      403: {
        headers: {};
        schema: definitions["CancelShipmentResponse"];
      };
      /** The resource specified does not exist. */
      404: {
        headers: {};
        schema: definitions["CancelShipmentResponse"];
      };
      /** The frequency of requests was greater than allowed. */
      429: {
        headers: {};
        schema: definitions["CancelShipmentResponse"];
      };
      /** Encountered an unexpected condition which prevented the server from fulfilling the request. */
      500: {
        headers: {};
        schema: definitions["CancelShipmentResponse"];
      };
      /** Temporary overloading or maintenance of the server. */
      503: {
        headers: {};
        schema: definitions["CancelShipmentResponse"];
      };
    };
  };
  /**
   * Purchase shipping labels based on a given rate.
   *
   * **Usage Plan:**
   *
   * | Rate (requests per second) | Burst |
   * | ---- | ---- |
   * | 5 | 15 |
   *
   * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
   */
  purchaseLabels: {
    parameters: {
      path: {
        shipmentId: string;
      };
      body: {
        body: definitions["PurchaseLabelsRequest"];
      };
    };
    responses: {
      /** Success. */
      200: {
        headers: {};
        schema: definitions["PurchaseLabelsResponse"];
      };
      /** Request has missing or invalid parameters and cannot be parsed. */
      400: {
        headers: {};
        schema: definitions["PurchaseLabelsResponse"];
      };
      /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
      401: {
        headers: {};
        schema: definitions["PurchaseLabelsResponse"];
      };
      /** 403 can be caused for reasons like Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found. */
      403: {
        headers: {};
        schema: definitions["PurchaseLabelsResponse"];
      };
      /** The resource specified does not exist. */
      404: {
        headers: {};
        schema: definitions["PurchaseLabelsResponse"];
      };
      /** The frequency of requests was greater than allowed. */
      429: {
        headers: {};
        schema: definitions["PurchaseLabelsResponse"];
      };
      /** Encountered an unexpected condition which prevented the server from fulfilling the request. */
      500: {
        headers: {};
        schema: definitions["PurchaseLabelsResponse"];
      };
      /** Temporary overloading or maintenance of the server. */
      503: {
        headers: {};
        schema: definitions["PurchaseLabelsResponse"];
      };
    };
  };
  /**
   * Retrieve shipping label based on the shipment id and tracking id.
   *
   * **Usage Plan:**
   *
   * | Rate (requests per second) | Burst |
   * | ---- | ---- |
   * | 5 | 15 |
   *
   * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
   */
  retrieveShippingLabel: {
    parameters: {
      path: {
        shipmentId: string;
        trackingId: string;
      };
      body: {
        body: definitions["RetrieveShippingLabelRequest"];
      };
    };
    responses: {
      /** Success. */
      200: {
        headers: {};
        schema: definitions["RetrieveShippingLabelResponse"];
      };
      /** Request has missing or invalid parameters and cannot be parsed. */
      400: {
        headers: {};
        schema: definitions["RetrieveShippingLabelResponse"];
      };
      /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
      401: {
        headers: {};
        schema: definitions["RetrieveShippingLabelResponse"];
      };
      /** 403 can be caused for reasons like Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found. */
      403: {
        headers: {};
        schema: definitions["RetrieveShippingLabelResponse"];
      };
      /** The resource specified does not exist. */
      404: {
        headers: {};
        schema: definitions["RetrieveShippingLabelResponse"];
      };
      /** The frequency of requests was greater than allowed. */
      429: {
        headers: {};
        schema: definitions["RetrieveShippingLabelResponse"];
      };
      /** Encountered an unexpected condition which prevented the server from fulfilling the request. */
      500: {
        headers: {};
        schema: definitions["RetrieveShippingLabelResponse"];
      };
      /** Temporary overloading or maintenance of the server. */
      503: {
        headers: {};
        schema: definitions["RetrieveShippingLabelResponse"];
      };
    };
  };
  /**
   * Purchase shipping labels.
   *
   * **Usage Plan:**
   *
   * | Rate (requests per second) | Burst |
   * | ---- | ---- |
   * | 5 | 15 |
   *
   * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
   */
  purchaseShipment: {
    parameters: {
      body: {
        body: definitions["PurchaseShipmentRequest"];
      };
    };
    responses: {
      /** Success. */
      200: {
        headers: {};
        schema: definitions["PurchaseShipmentResponse"];
      };
      /** Request has missing or invalid parameters and cannot be parsed. */
      400: {
        headers: {};
        schema: definitions["PurchaseShipmentResponse"];
      };
      /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
      401: {
        headers: {};
        schema: definitions["PurchaseShipmentResponse"];
      };
      /** 403 can be caused for reasons like Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found. */
      403: {
        headers: {};
        schema: definitions["PurchaseShipmentResponse"];
      };
      /** The resource specified does not exist. */
      404: {
        headers: {};
        schema: definitions["PurchaseShipmentResponse"];
      };
      /** The frequency of requests was greater than allowed. */
      429: {
        headers: {};
        schema: definitions["PurchaseShipmentResponse"];
      };
      /** Encountered an unexpected condition which prevented the server from fulfilling the request. */
      500: {
        headers: {};
        schema: definitions["PurchaseShipmentResponse"];
      };
      /** Temporary overloading or maintenance of the server. */
      503: {
        headers: {};
        schema: definitions["PurchaseShipmentResponse"];
      };
    };
  };
  /**
   * Get service rates.
   *
   * **Usage Plan:**
   *
   * | Rate (requests per second) | Burst |
   * | ---- | ---- |
   * | 5 | 15 |
   *
   * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
   */
  getRates: {
    parameters: {
      body: {
        body: definitions["GetRatesRequest"];
      };
    };
    responses: {
      /** Success. */
      200: {
        headers: {};
        schema: definitions["GetRatesResponse"];
      };
      /** Request is missing or has invalid parameters and cannot be parsed. */
      400: {
        headers: {};
        schema: definitions["GetRatesResponse"];
      };
      /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
      401: {
        headers: {};
        schema: definitions["GetRatesResponse"];
      };
      /** 403 can be caused for reasons like Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found. */
      403: {
        headers: {};
        schema: definitions["GetRatesResponse"];
      };
      /** The resource specified does not exist. */
      404: {
        headers: {};
        schema: definitions["GetRatesResponse"];
      };
      /** The frequency of requests was greater than allowed. */
      429: {
        headers: {};
        schema: definitions["GetRatesResponse"];
      };
      /** Encountered an unexpected condition which prevented the server from fulfilling the request. */
      500: {
        headers: {};
        schema: definitions["GetRatesResponse"];
      };
      /** Temporary overloading or maintenance of the server. */
      503: {
        headers: {};
        schema: definitions["GetRatesResponse"];
      };
    };
  };
  /**
   * Verify if the current account is valid.
   *
   * **Usage Plan:**
   *
   * | Rate (requests per second) | Burst |
   * | ---- | ---- |
   * | 5 | 15 |
   *
   * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
   */
  getAccount: {
    parameters: {};
    responses: {
      /** The account was valid. */
      200: {
        headers: {};
        schema: definitions["GetAccountResponse"];
      };
      /** Request has missing or invalid parameters and cannot be parsed. */
      400: {
        headers: {};
        schema: definitions["GetAccountResponse"];
      };
      /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
      401: {
        headers: {};
        schema: definitions["GetAccountResponse"];
      };
      /** 403 can be caused for reasons like Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found. */
      403: {
        headers: {};
        schema: definitions["GetAccountResponse"];
      };
      /** The resource specified does not exist. */
      404: {
        headers: {};
        schema: definitions["GetAccountResponse"];
      };
      /** The frequency of requests was greater than allowed. */
      429: {
        headers: {};
        schema: definitions["GetAccountResponse"];
      };
      /** Encountered an unexpected condition which prevented the server from fulfilling the request. */
      500: {
        headers: {};
        schema: definitions["GetAccountResponse"];
      };
      /** Temporary overloading or maintenance of the server. */
      503: {
        headers: {};
        schema: definitions["GetAccountResponse"];
      };
    };
  };
  /**
   * Return the tracking information of a shipment.
   *
   * **Usage Plan:**
   *
   * | Rate (requests per second) | Burst |
   * | ---- | ---- |
   * | 1 | 1 |
   *
   * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
   */
  getTrackingInformation: {
    parameters: {
      path: {
        trackingId: string;
      };
    };
    responses: {
      /** Success. */
      200: {
        headers: {};
        schema: definitions["GetTrackingInformationResponse"];
      };
      /** Request has missing or invalid parameters and cannot be parsed. */
      400: {
        headers: {};
        schema: definitions["GetTrackingInformationResponse"];
      };
      /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
      401: {
        headers: {};
        schema: definitions["GetTrackingInformationResponse"];
      };
      /** 403 can be caused for reasons like Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found. */
      403: {
        headers: {};
        schema: definitions["GetTrackingInformationResponse"];
      };
      /** The resource specified does not exist. */
      404: {
        headers: {};
        schema: definitions["GetTrackingInformationResponse"];
      };
      /** The frequency of requests was greater than allowed. */
      429: {
        headers: {};
        schema: definitions["GetTrackingInformationResponse"];
      };
      /** Encountered an unexpected condition which prevented the server from fulfilling the request. */
      500: {
        headers: {};
        schema: definitions["GetTrackingInformationResponse"];
      };
      /** Temporary overloading or maintenance of the server. */
      503: {
        headers: {};
        schema: definitions["GetTrackingInformationResponse"];
      };
    };
  };
}

export interface external {}

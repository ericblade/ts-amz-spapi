/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/products/pricing/v0/price": {
    /**
     * Returns pricing information for a seller's offer listings based on seller SKU or ASIN.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 0.5 | 1 |
     *
     * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     */
    get: operations["getPricing"];
  };
  "/products/pricing/v0/competitivePrice": {
    /**
     * Returns competitive pricing information for a seller's offer listings based on seller SKU or ASIN.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 0.5 | 1 |
     *
     * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     */
    get: operations["getCompetitivePricing"];
  };
  "/products/pricing/v0/listings/{SellerSKU}/offers": {
    /**
     * Returns the lowest priced offers for a single SKU listing.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 1 | 2 |
     *
     * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     */
    get: operations["getListingOffers"];
  };
  "/products/pricing/v0/items/{Asin}/offers": {
    /**
     * Returns the lowest priced offers for a single item based on ASIN.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 0.5 | 1 |
     *
     * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     */
    get: operations["getItemOffers"];
  };
  "/batches/products/pricing/v0/itemOffers": {
    /**
     * Returns the lowest priced offers for a batch of items based on ASIN.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 0.5 | 1 |
     *
     * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     */
    post: operations["getItemOffersBatch"];
  };
  "/batches/products/pricing/v0/listingOffers": {
    /**
     * Returns the lowest priced offers for a batch of listings by SKU.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 0.5 | 1 |
     *
     * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     */
    post: operations["getListingOffersBatch"];
  };
}

export interface definitions {
  /** @description The request associated with the `getItemOffersBatch` API call. */
  GetItemOffersBatchRequest: {
    requests?: definitions["ItemOffersRequestList"];
  };
  /** @description The request associated with the `getListingOffersBatch` API call. */
  GetListingOffersBatchRequest: {
    requests?: definitions["ListingOffersRequestList"];
  };
  /** @description A list of `getListingOffers` batched requests to run. */
  ListingOffersRequestList: definitions["ListingOffersRequest"][];
  /** @description A list of `getListingOffers` batched requests to run. */
  ItemOffersRequestList: definitions["ItemOffersRequest"][];
  BatchOffersRequestParams: {
    MarketplaceId: definitions["MarketplaceId"];
    ItemCondition: definitions["ItemCondition"];
    CustomerType?: definitions["CustomerType"];
  };
  ItemOffersRequest: definitions["BatchRequest"] &
    definitions["BatchOffersRequestParams"];
  ListingOffersRequest: definitions["BatchRequest"] &
    definitions["BatchOffersRequestParams"];
  /** @description The response associated with the `getItemOffersBatch` API call. */
  GetItemOffersBatchResponse: {
    responses?: definitions["ItemOffersResponseList"];
  };
  /** @description The response associated with the `getListingOffersBatch` API call. */
  GetListingOffersBatchResponse: {
    responses?: definitions["ListingOffersResponseList"];
  };
  /** @description A list of `getItemOffers` batched responses. */
  ItemOffersResponseList: definitions["ItemOffersResponse"][];
  /** @description A list of `getListingOffers` batched responses. */
  ListingOffersResponseList: definitions["ListingOffersResponse"][];
  BatchOffersResponse: {
    headers?: definitions["HttpResponseHeaders"];
    status?: definitions["GetOffersHttpStatusLine"];
    body: definitions["GetOffersResponse"];
  };
  ItemOffersRequestParams: definitions["BatchOffersRequestParams"] & {
    /** @description The Amazon Standard Identification Number (ASIN) of the item. This is the same Asin passed as a request parameter. */
    Asin?: string;
  };
  ItemOffersResponse: definitions["BatchOffersResponse"] & {
    request: definitions["ItemOffersRequestParams"];
  };
  ListingOffersRequestParams: definitions["BatchOffersRequestParams"] & {
    /** @description The seller stock keeping unit (SKU) of the item. This is the same SKU passed as a path parameter. */
    SellerSKU: string;
  };
  ListingOffersResponse: definitions["BatchOffersResponse"] & {
    request?: definitions["ListingOffersRequestParams"];
  };
  /** @description A list of error responses returned when a request is unsuccessful. */
  Errors: {
    /** @description One or more unexpected errors occurred during the operation. */
    errors: definitions["ErrorList"];
  };
  /** @description The response schema for the `getPricing` and `getCompetitivePricing` operations. */
  GetPricingResponse: {
    /** @description The payload for the getPricing and getCompetitivePricing operations. */
    payload?: definitions["PriceList"];
    /** @description One or more unexpected errors occurred during the operation. */
    errors?: definitions["ErrorList"];
  };
  /** @description The response schema for the `getListingOffers` and `getItemOffers` operations. */
  GetOffersResponse: {
    /** @description The payload for the `getListingOffers` and `getItemOffers` operations. */
    payload?: definitions["GetOffersResult"];
    /** @description One or more unexpected errors occurred during the operation. */
    errors?: definitions["ErrorList"];
  };
  PriceList: definitions["Price"][];
  GetOffersResult: {
    /** @description A marketplace identifier. */
    MarketplaceID: string;
    /** @description The Amazon Standard Identification Number (ASIN) of the item. */
    ASIN?: string;
    /** @description The stock keeping unit (SKU) of the item. */
    SKU?: string;
    /** @description The condition of the item. */
    ItemCondition: definitions["ConditionType"];
    /** @description The status of the operation. */
    status: string;
    /** @description Metadata that identifies the item. */
    Identifier: definitions["ItemIdentifier"];
    /** @description Pricing information about the item. */
    Summary: definitions["Summary"];
    /** @description A list of offer details. The list is the same length as the TotalOfferCount in the Summary or 20, whichever is less. */
    Offers: definitions["OfferDetailList"];
  };
  /** @description A mapping of additional HTTP headers to send/receive for the individual batch request. */
  HttpRequestHeaders: { [key: string]: string };
  /** @description A mapping of additional HTTP headers to send/receive for the individual batch request. */
  HttpResponseHeaders: {
    /** @description The timestamp that the API request was received.  For more information, consult [RFC 2616 Section 14](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html). */
    Date?: string;
    /** @description Unique request reference ID. */
    "x-amzn-RequestId"?: string;
  } & { [key: string]: string };
  /** @description The HTTP status line associated with the response.  For more information, consult [RFC 2616](https://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html). */
  GetOffersHttpStatusLine: {
    /** @description The HTTP response Status Code. */
    statusCode?: number;
    /** @description The HTTP response Reason-Phase. */
    reasonPhrase?: string;
  };
  /** @description The URI associated with the individual APIs being called as part of the batch request. */
  HttpUri: string;
  /** @description The HTTP method associated with the individual APIs being called as part of the batch request. */
  HttpMethod: "GET" | "PUT" | "PATCH" | "DELETE" | "POST";
  /** @description Common properties of batch requests against individual APIs. */
  BatchRequest: {
    /**
     * @description The resource path of the operation you are calling in batch without any query parameters.
     *
     * If you are calling `getItemOffersBatch`, supply the path of `getItemOffers`.
     *
     * **Example:** `/products/pricing/v0/items/B000P6Q7MY/offers`
     *
     * If you are calling `getListingOffersBatch`, supply the path of `getListingOffers`.
     *
     * **Example:** `/products/pricing/v0/listings/B000P6Q7MY/offers`
     */
    uri: string;
    method: definitions["HttpMethod"];
    headers?: definitions["HttpRequestHeaders"];
  };
  Price: {
    /** @description The status of the operation. */
    status: string;
    /** @description The seller stock keeping unit (SKU) of the item. */
    SellerSKU?: string;
    /** @description The Amazon Standard Identification Number (ASIN) of the item. */
    ASIN?: string;
    Product?: definitions["Product"];
  };
  /** @description An item. */
  Product: {
    Identifiers: definitions["IdentifierType"];
    AttributeSets?: definitions["AttributeSetList"];
    Relationships?: definitions["RelationshipList"];
    CompetitivePricing?: definitions["CompetitivePricingType"];
    SalesRankings?: definitions["SalesRankList"];
    Offers?: definitions["OffersList"];
  };
  /** @description Specifies the identifiers used to uniquely identify an item. */
  IdentifierType: {
    /** @description Indicates the item is identified by MarketPlaceId and ASIN. */
    MarketplaceASIN: definitions["ASINIdentifier"];
    /** @description Indicates the item is identified by MarketPlaceId, SellerId, and SellerSKU. */
    SKUIdentifier?: definitions["SellerSKUIdentifier"];
  };
  ASINIdentifier: {
    /** @description A marketplace identifier. */
    MarketplaceId: string;
    /** @description The Amazon Standard Identification Number (ASIN) of the item. */
    ASIN: string;
  };
  SellerSKUIdentifier: {
    /** @description A marketplace identifier. */
    MarketplaceId: string;
    /** @description The seller identifier submitted for the operation. */
    SellerId: string;
    /** @description The seller stock keeping unit (SKU) of the item. */
    SellerSKU: string;
  };
  /** @description A list of product attributes if they are applicable to the product that is returned. */
  AttributeSetList: { [key: string]: unknown }[];
  /** @description A list that contains product variation information, if applicable. */
  RelationshipList: { [key: string]: unknown }[];
  /** @description Competitive pricing information for the item. */
  CompetitivePricingType: {
    CompetitivePrices: definitions["CompetitivePriceList"];
    NumberOfOfferListings: definitions["NumberOfOfferListingsList"];
    /** @description The trade-in value of the item in the trade-in program. */
    TradeInValue?: definitions["MoneyType"];
  };
  /** @description A list of competitive pricing information. */
  CompetitivePriceList: definitions["CompetitivePriceType"][];
  CompetitivePriceType: {
    /**
     * @description The pricing model for each price that is returned.
     *
     * Possible values:
     *
     * * 1 - New Buy Box Price.
     * * 2 - Used Buy Box Price.
     */
    CompetitivePriceId: string;
    /** @description Pricing information for a given CompetitivePriceId value. */
    Price: definitions["PriceType"];
    /** @description Indicates the condition of the item whose pricing information is returned. Possible values are: New, Used, Collectible, Refurbished, or Club. */
    condition?: string;
    /** @description Indicates the subcondition of the item whose pricing information is returned. Possible values are: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, or Other. */
    subcondition?: string;
    /** @description Indicates the type of customer that the offer is valid for.<br><br>When the offer type is B2C in a quantity discount, the seller is winning the Buy Box because others do not have inventory at that quantity, not because they have a quantity discount on the ASIN. */
    offerType?: definitions["OfferCustomerType"];
    /**
     * Format: int32
     * @description Indicates at what quantity this price becomes active.
     */
    quantityTier?: number;
    /** @description Indicates the type of quantity discount this price applies to. */
    quantityDiscountType?: definitions["QuantityDiscountType"];
    /** @description The seller identifier for the offer. */
    sellerId?: string;
    /** @description  Indicates whether or not the pricing information is for an offer listing that belongs to the requester. The requester is the seller associated with the SellerId that was submitted with the request. Possible values are: true and false. */
    belongsToRequester?: boolean;
  };
  /** @description The number of active offer listings for the item that was submitted. The listing count is returned by condition, one for each listing condition value that is returned. */
  NumberOfOfferListingsList: definitions["OfferListingCountType"][];
  /** @description The number of offer listings with the specified condition. */
  OfferListingCountType: {
    /**
     * Format: int32
     * @description The number of offer listings.
     */
    Count: number;
    /** @description The condition of the item. */
    condition: string;
  };
  MoneyType: {
    /** @description The currency code in ISO 4217 format. */
    CurrencyCode?: string;
    /** @description The monetary value. */
    Amount?: number;
  };
  /** @description A list of sales rank information for the item, by category. */
  SalesRankList: definitions["SalesRankType"][];
  SalesRankType: {
    /** @description  Identifies the item category from which the sales rank is taken. */
    ProductCategoryId: string;
    /**
     * Format: int32
     * @description The sales rank of the item within the item category.
     */
    Rank: number;
  };
  PriceType: {
    /** @description The value calculated by adding ListingPrice + Shipping - Points. Note that if the landed price is not returned, the listing price represents the product with the lowest landed price. */
    LandedPrice?: definitions["MoneyType"];
    /** @description The listing price of the item including any promotions that apply. */
    ListingPrice: definitions["MoneyType"];
    /** @description The shipping cost of the product. Note that the shipping cost is not always available. */
    Shipping?: definitions["MoneyType"];
    /** @description The number of Amazon Points offered with the purchase of an item, and their monetary value. */
    Points?: definitions["Points"];
  };
  /** @description A list of offers. */
  OffersList: definitions["OfferType"][];
  OfferType: {
    /** @description Indicates the type of customer that the offer is valid for. */
    offerType?: definitions["OfferCustomerType"];
    /** @description Contains pricing information that includes promotions and contains the shipping cost. */
    BuyingPrice: definitions["PriceType"];
    /** @description The current price excluding any promotions that apply to the product. Excludes the shipping cost. */
    RegularPrice: definitions["MoneyType"];
    /** @description The current listing price for Business buyers. */
    businessPrice?: definitions["MoneyType"];
    quantityDiscountPrices?: definitions["QuantityDiscountPriceType"][];
    /**
     * @description The fulfillment channel for the offer listing. Possible values:
     *
     * * Amazon - Fulfilled by Amazon.
     * * Merchant - Fulfilled by the seller.
     */
    FulfillmentChannel: string;
    /** @description The item condition for the offer listing. Possible values: New, Used, Collectible, Refurbished, or Club. */
    ItemCondition: string;
    /** @description The item subcondition for the offer listing. Possible values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, or Other. */
    ItemSubCondition: string;
    /** @description The seller stock keeping unit (SKU) of the item. */
    SellerSKU: string;
  };
  OfferCustomerType: "B2C" | "B2B";
  /** @description Contains pricing information that includes special pricing when buying in bulk. */
  QuantityDiscountPriceType: {
    /**
     * Format: int32
     * @description Indicates at what quantity this price becomes active.
     */
    quantityTier: number;
    /** @description Indicates the type of quantity discount this price applies to. */
    quantityDiscountType: definitions["QuantityDiscountType"];
    /** @description The price at this quantity tier. */
    listingPrice: definitions["MoneyType"];
  };
  QuantityDiscountType: "QUANTITY_DISCOUNT";
  Points: {
    /**
     * Format: int32
     * @description The number of points.
     */
    PointsNumber?: number;
    /** @description The monetary value of the points. */
    PointsMonetaryValue?: definitions["MoneyType"];
  };
  /** @description Indicates the condition of the item. Possible values: New, Used, Collectible, Refurbished, Club. */
  ConditionType: "New" | "Used" | "Collectible" | "Refurbished" | "Club";
  /** @description Information that identifies an item. */
  ItemIdentifier: {
    /** @description A marketplace identifier. Specifies the marketplace from which prices are returned. */
    MarketplaceId: string;
    /** @description The Amazon Standard Identification Number (ASIN) of the item. */
    ASIN?: string;
    /** @description The seller stock keeping unit (SKU) of the item. */
    SellerSKU?: string;
    /** @description The condition of the item. */
    ItemCondition: definitions["ConditionType"];
  };
  /** @description Contains price information about the product, including the LowestPrices and BuyBoxPrices, the ListPrice, the SuggestedLowerPricePlusShipping, and NumberOfOffers and NumberOfBuyBoxEligibleOffers. */
  Summary: {
    /**
     * Format: int32
     * @description The number of unique offers contained in NumberOfOffers.
     */
    TotalOfferCount: number;
    /** @description A list that contains the total number of offers for the item for the given conditions and fulfillment channels. */
    NumberOfOffers?: definitions["NumberOfOffers"];
    /** @description A list of the lowest prices for the item. */
    LowestPrices?: definitions["LowestPrices"];
    /** @description A list of item prices. */
    BuyBoxPrices?: definitions["BuyBoxPrices"];
    /** @description The list price of the item as suggested by the manufacturer. */
    ListPrice?: definitions["MoneyType"];
    /** @description This price is based on competitive prices from other retailers (excluding other Amazon sellers). The offer may be ineligible for the Buy Box if the seller's price + shipping (minus Amazon Points) is greater than this competitive price. */
    CompetitivePriceThreshold?: definitions["MoneyType"];
    /** @description The suggested lower price of the item, including shipping and Amazon Points. The suggested lower price is based on a range of factors, including historical selling prices, recent Buy Box-eligible prices, and input from customers for your products. */
    SuggestedLowerPricePlusShipping?: definitions["MoneyType"];
    /** @description A list that contains the sales rank of the item in the given product categories. */
    SalesRankings?: definitions["SalesRankList"];
    /** @description A list that contains the total number of offers that are eligible for the Buy Box for the given conditions and fulfillment channels. */
    BuyBoxEligibleOffers?: definitions["BuyBoxEligibleOffers"];
    /**
     * Format: date-time
     * @description When the status is ActiveButTooSoonForProcessing, this is the time when the offers will be available for processing.
     */
    OffersAvailableTime?: string;
  };
  BuyBoxEligibleOffers: definitions["OfferCountType"][];
  BuyBoxPrices: definitions["BuyBoxPriceType"][];
  LowestPrices: definitions["LowestPriceType"][];
  NumberOfOffers: definitions["OfferCountType"][];
  /** @description The total number of offers for the specified condition and fulfillment channel. */
  OfferCountType: {
    /** @description Indicates the condition of the item. For example: New, Used, Collectible, Refurbished, or Club. */
    condition?: string;
    /** @description Indicates whether the item is fulfilled by Amazon or by the seller. */
    fulfillmentChannel?: definitions["FulfillmentChannelType"];
    /**
     * Format: int32
     * @description The number of offers in a fulfillment channel that meet a specific condition.
     */
    OfferCount?: number;
  };
  /** @description Indicates whether the item is fulfilled by Amazon or by the seller (merchant). */
  FulfillmentChannelType: "Amazon" | "Merchant";
  LowestPriceType: {
    /** @description Indicates the condition of the item. For example: New, Used, Collectible, Refurbished, or Club. */
    condition: string;
    /** @description Indicates whether the item is fulfilled by Amazon or by the seller. */
    fulfillmentChannel: string;
    /** @description Indicates the type of customer that the offer is valid for. */
    offerType?: definitions["OfferCustomerType"];
    /**
     * Format: int32
     * @description Indicates at what quantity this price becomes active.
     */
    quantityTier?: number;
    /** @description Indicates the type of quantity discount this price applies to. */
    quantityDiscountType?: definitions["QuantityDiscountType"];
    /** @description The value calculated by adding ListingPrice + Shipping - Points. */
    LandedPrice: definitions["MoneyType"];
    /** @description The price of the item. */
    ListingPrice: definitions["MoneyType"];
    /** @description The shipping cost. */
    Shipping: definitions["MoneyType"];
    /** @description The number of Amazon Points offered with the purchase of an item. */
    Points?: definitions["Points"];
  };
  BuyBoxPriceType: {
    /** @description Indicates the condition of the item. For example: New, Used, Collectible, Refurbished, or Club. */
    condition: string;
    /** @description Indicates the type of customer that the offer is valid for.<br><br>When the offer type is B2C in a quantity discount, the seller is winning the Buy Box because others do not have inventory at that quantity, not because they have a quantity discount on the ASIN. */
    offerType?: definitions["OfferCustomerType"];
    /**
     * Format: int32
     * @description Indicates at what quantity this price becomes active.
     */
    quantityTier?: number;
    /** @description Indicates the type of quantity discount this price applies to. */
    quantityDiscountType?: definitions["QuantityDiscountType"];
    /** @description The value calculated by adding ListingPrice + Shipping - Points. */
    LandedPrice: definitions["MoneyType"];
    /** @description The price of the item. */
    ListingPrice: definitions["MoneyType"];
    /** @description The shipping cost. */
    Shipping: definitions["MoneyType"];
    /** @description The number of Amazon Points offered with the purchase of an item. */
    Points?: definitions["Points"];
    /** @description The seller identifier for the offer. */
    sellerId?: string;
  };
  OfferDetailList: definitions["OfferDetail"][];
  OfferDetail: {
    /** @description When true, this is the seller's offer. */
    MyOffer?: boolean;
    /** @description Indicates the type of customer that the offer is valid for. */
    offerType?: definitions["OfferCustomerType"];
    /** @description The subcondition of the item. Subcondition values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, or Other. */
    SubCondition: string;
    /** @description The seller identifier for the offer. */
    SellerId?: string;
    /** @description Information about the condition of the item. */
    ConditionNotes?: string;
    /** @description Information about the seller's feedback, including the percentage of positive feedback, and the total number of ratings received. */
    SellerFeedbackRating?: definitions["SellerFeedbackType"];
    /** @description The maximum time within which the item will likely be shipped once an order has been placed. */
    ShippingTime: definitions["DetailedShippingTimeType"];
    /** @description The price of the item. */
    ListingPrice: definitions["MoneyType"];
    quantityDiscountPrices?: definitions["QuantityDiscountPriceType"][];
    /** @description The number of Amazon Points offered with the purchase of an item. */
    Points?: definitions["Points"];
    /** @description The shipping cost. */
    Shipping: definitions["MoneyType"];
    /** @description The state and country from where the item is shipped. */
    ShipsFrom?: definitions["ShipsFromType"];
    /** @description When true, the offer is fulfilled by Amazon. */
    IsFulfilledByAmazon: boolean;
    /** @description Amazon Prime information. */
    PrimeInformation?: definitions["PrimeInformationType"];
    /** @description When true, the offer is currently in the Buy Box. There can be up to two Buy Box winners at any time per ASIN, one that is eligible for Prime and one that is not eligible for Prime. */
    IsBuyBoxWinner?: boolean;
    /** @description When true, the seller of the item is eligible to win the Buy Box. */
    IsFeaturedMerchant?: boolean;
  };
  /** @description Amazon Prime information. */
  PrimeInformationType: {
    /** @description Indicates whether the offer is an Amazon Prime offer. */
    IsPrime: boolean;
    /** @description Indicates whether the offer is an Amazon Prime offer throughout the entire marketplace where it is listed. */
    IsNationalPrime: boolean;
  };
  /** @description Information about the seller's feedback, including the percentage of positive feedback, and the total number of ratings received. */
  SellerFeedbackType: {
    /**
     * Format: double
     * @description The percentage of positive feedback for the seller in the past 365 days.
     */
    SellerPositiveFeedbackRating?: number;
    /**
     * Format: int64
     * @description The number of ratings received about the seller.
     */
    FeedbackCount: number;
  };
  /** @description A list of error responses returned when a request is unsuccessful. */
  ErrorList: definitions["Error"][];
  /** @description The time range in which an item will likely be shipped once an order has been placed. */
  DetailedShippingTimeType: {
    /**
     * Format: int64
     * @description The minimum time, in hours, that the item will likely be shipped after the order has been placed.
     */
    minimumHours?: number;
    /**
     * Format: int64
     * @description The maximum time, in hours, that the item will likely be shipped after the order has been placed.
     */
    maximumHours?: number;
    /** @description The date when the item will be available for shipping. Only displayed for items that are not currently available for shipping. */
    availableDate?: string;
    /** @description Indicates whether the item is available for shipping now, or on a known or an unknown date in the future. If known, the availableDate property indicates the date that the item will be available for shipping. Possible values: NOW, FUTURE_WITHOUT_DATE, FUTURE_WITH_DATE. */
    availabilityType?: "NOW" | "FUTURE_WITHOUT_DATE" | "FUTURE_WITH_DATE";
  };
  /** @description The state and country from where the item is shipped. */
  ShipsFromType: {
    /** @description The state from where the item is shipped. */
    State?: string;
    /** @description The country from where the item is shipped. */
    Country?: string;
  };
  /** @description A marketplace identifier. Specifies the marketplace for which prices are returned. */
  MarketplaceId: string;
  /** @description Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club. */
  ItemCondition: "New" | "Used" | "Collectible" | "Refurbished" | "Club";
  /** @description The Amazon Standard Identification Number (ASIN) of the item. */
  Asin: string;
  /** @description Indicates whether to request Consumer or Business offers. Default is Consumer. */
  CustomerType: "Consumer" | "Business";
  /** @description Error response returned when the request is unsuccessful. */
  Error: {
    /** @description An error code that identifies the type of error that occurred. */
    code: string;
    /** @description A message that describes the error condition in a human-readable form. */
    message: string;
    /** @description Additional information that can help the caller understand or fix the issue. */
    details?: string;
  };
}

export interface operations {
  /**
   * Returns pricing information for a seller's offer listings based on seller SKU or ASIN.
   *
   * **Usage Plan:**
   *
   * | Rate (requests per second) | Burst |
   * | ---- | ---- |
   * | 0.5 | 1 |
   *
   * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
   */
  getPricing: {
    parameters: {
      query: {
        /** A marketplace identifier. Specifies the marketplace for which prices are returned. */
        MarketplaceId: string;
        /** A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace. */
        Asins?: string[];
        /** A list of up to twenty seller SKU values used to identify items in the given marketplace. */
        Skus?: string[];
        /** Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. */
        ItemType: "Asin" | "Sku";
        /** Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club. */
        ItemCondition?: "New" | "Used" | "Collectible" | "Refurbished" | "Club";
        /** Indicates whether to request pricing information for the seller's B2C or B2B offers. Default is B2C. */
        OfferType?: "B2C" | "B2B";
      };
    };
    responses: {
      /** Success. */
      200: {
        headers: {};
        schema: definitions["GetPricingResponse"];
      };
      /** Request has missing or invalid parameters and cannot be parsed. */
      400: {
        headers: {};
        schema: definitions["GetPricingResponse"];
      };
      /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
      401: {
        headers: {};
        schema: definitions["GetPricingResponse"];
      };
      /** Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
      403: {
        headers: {};
        schema: definitions["GetPricingResponse"];
      };
      /** The specified resource does not exist. */
      404: {
        headers: {};
        schema: definitions["GetPricingResponse"];
      };
      /** The frequency of requests was greater than allowed. */
      429: {
        headers: {};
        schema: definitions["GetPricingResponse"];
      };
      /** An unexpected condition occurred that prevented the server from fulfilling the request. */
      500: {
        headers: {};
        schema: definitions["GetPricingResponse"];
      };
      /** Temporary overloading or maintenance of the server. */
      503: {
        headers: {};
        schema: definitions["GetPricingResponse"];
      };
    };
  };
  /**
   * Returns competitive pricing information for a seller's offer listings based on seller SKU or ASIN.
   *
   * **Usage Plan:**
   *
   * | Rate (requests per second) | Burst |
   * | ---- | ---- |
   * | 0.5 | 1 |
   *
   * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
   */
  getCompetitivePricing: {
    parameters: {
      query: {
        /** A marketplace identifier. Specifies the marketplace for which prices are returned. */
        MarketplaceId: string;
        /** A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace. */
        Asins?: string[];
        /** A list of up to twenty seller SKU values used to identify items in the given marketplace. */
        Skus?: string[];
        /** Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku. */
        ItemType: "Asin" | "Sku";
        /** Indicates whether to request pricing information from the point of view of Consumer or Business buyers. Default is Consumer. */
        CustomerType?: "Consumer" | "Business";
      };
    };
    responses: {
      /** Success. */
      200: {
        headers: {};
        schema: definitions["GetPricingResponse"];
      };
      /** Request has missing or invalid parameters and cannot be parsed. */
      400: {
        headers: {};
        schema: definitions["GetPricingResponse"];
      };
      /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
      401: {
        headers: {};
        schema: definitions["GetPricingResponse"];
      };
      /** Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
      403: {
        headers: {};
        schema: definitions["GetPricingResponse"];
      };
      /** The specified resource does not exist. */
      404: {
        headers: {};
        schema: definitions["GetPricingResponse"];
      };
      /** The frequency of requests was greater than allowed. */
      429: {
        headers: {};
        schema: definitions["GetPricingResponse"];
      };
      /** An unexpected condition occurred that prevented the server from fulfilling the request. */
      500: {
        headers: {};
        schema: definitions["GetPricingResponse"];
      };
      /** Temporary overloading or maintenance of the server. */
      503: {
        headers: {};
        schema: definitions["GetPricingResponse"];
      };
    };
  };
  /**
   * Returns the lowest priced offers for a single SKU listing.
   *
   * **Usage Plan:**
   *
   * | Rate (requests per second) | Burst |
   * | ---- | ---- |
   * | 1 | 2 |
   *
   * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
   */
  getListingOffers: {
    parameters: {
      query: {
        /** A marketplace identifier. Specifies the marketplace for which prices are returned. */
        MarketplaceId: string;
        /** Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club. */
        ItemCondition: "New" | "Used" | "Collectible" | "Refurbished" | "Club";
        /** Indicates whether to request Consumer or Business offers. Default is Consumer. */
        CustomerType?: "Consumer" | "Business";
      };
      path: {
        /** Identifies an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit. */
        SellerSKU: string;
      };
    };
    responses: {
      /** Success. */
      200: {
        headers: {};
        schema: definitions["GetOffersResponse"];
      };
      /** Request has missing or invalid parameters and cannot be parsed. */
      400: {
        headers: {};
        schema: definitions["GetOffersResponse"];
      };
      /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
      401: {
        headers: {};
        schema: definitions["GetOffersResponse"];
      };
      /** Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
      403: {
        headers: {};
        schema: definitions["GetOffersResponse"];
      };
      /** The specified resource does not exist. */
      404: {
        headers: {};
        schema: definitions["GetOffersResponse"];
      };
      /** The frequency of requests was greater than allowed. */
      429: {
        headers: {};
        schema: definitions["GetOffersResponse"];
      };
      /** An unexpected condition occurred that prevented the server from fulfilling the request. */
      500: {
        headers: {};
        schema: definitions["GetOffersResponse"];
      };
      /** Temporary overloading or maintenance of the server. */
      503: {
        headers: {};
        schema: definitions["GetOffersResponse"];
      };
    };
  };
  /**
   * Returns the lowest priced offers for a single item based on ASIN.
   *
   * **Usage Plan:**
   *
   * | Rate (requests per second) | Burst |
   * | ---- | ---- |
   * | 0.5 | 1 |
   *
   * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
   */
  getItemOffers: {
    parameters: {
      query: {
        /** A marketplace identifier. Specifies the marketplace for which prices are returned. */
        MarketplaceId: string;
        /** Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club. */
        ItemCondition: "New" | "Used" | "Collectible" | "Refurbished" | "Club";
        /** Indicates whether to request Consumer or Business offers. Default is Consumer. */
        CustomerType?: "Consumer" | "Business";
      };
      path: {
        /** The Amazon Standard Identification Number (ASIN) of the item. */
        Asin: string;
      };
    };
    responses: {
      /** Success. */
      200: {
        headers: {};
        schema: definitions["GetOffersResponse"];
      };
      /** Request has missing or invalid parameters and cannot be parsed. */
      400: {
        headers: {};
        schema: definitions["GetOffersResponse"];
      };
      /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
      401: {
        headers: {};
        schema: definitions["GetOffersResponse"];
      };
      /** Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
      403: {
        headers: {};
        schema: definitions["GetOffersResponse"];
      };
      /** The specified resource does not exist. */
      404: {
        headers: {};
        schema: definitions["GetOffersResponse"];
      };
      /** The frequency of requests was greater than allowed. */
      429: {
        headers: {};
        schema: definitions["GetOffersResponse"];
      };
      /** An unexpected condition occurred that prevented the server from fulfilling the request. */
      500: {
        headers: {};
        schema: definitions["GetOffersResponse"];
      };
      /** Temporary overloading or maintenance of the server. */
      503: {
        headers: {};
        schema: definitions["GetOffersResponse"];
      };
    };
  };
  /**
   * Returns the lowest priced offers for a batch of items based on ASIN.
   *
   * **Usage Plan:**
   *
   * | Rate (requests per second) | Burst |
   * | ---- | ---- |
   * | 0.5 | 1 |
   *
   * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
   */
  getItemOffersBatch: {
    parameters: {
      body: {
        getItemOffersBatchRequestBody: definitions["GetItemOffersBatchRequest"];
      };
    };
    responses: {
      /** Indicates that requests were run in batch.  Check the batch response status lines for information on whether a batch request succeeded. */
      200: {
        headers: {};
        schema: definitions["GetItemOffersBatchResponse"];
      };
      /** Request has missing or invalid parameters and cannot be parsed. */
      400: {
        headers: {};
        schema: definitions["Errors"];
      };
      /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
      401: {
        headers: {};
        schema: definitions["Errors"];
      };
      /** Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
      403: {
        headers: {};
        schema: definitions["Errors"];
      };
      /** The specified resource does not exist. */
      404: {
        headers: {};
        schema: definitions["Errors"];
      };
      /** The frequency of requests was greater than allowed. */
      429: {
        headers: {};
        schema: definitions["Errors"];
      };
      /** An unexpected condition occurred that prevented the server from fulfilling the request. */
      500: {
        headers: {};
        schema: definitions["Errors"];
      };
      /** Temporary overloading or maintenance of the server. */
      503: {
        headers: {};
        schema: definitions["Errors"];
      };
    };
  };
  /**
   * Returns the lowest priced offers for a batch of listings by SKU.
   *
   * **Usage Plan:**
   *
   * | Rate (requests per second) | Burst |
   * | ---- | ---- |
   * | 0.5 | 1 |
   *
   * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
   */
  getListingOffersBatch: {
    parameters: {
      body: {
        getListingOffersBatchRequestBody: definitions["GetListingOffersBatchRequest"];
      };
    };
    responses: {
      /** Indicates that requests were run in batch.  Check the batch response status lines for information on whether a batch request succeeded. */
      200: {
        headers: {};
        schema: definitions["GetListingOffersBatchResponse"];
      };
      /** Request has missing or invalid parameters and cannot be parsed. */
      400: {
        headers: {};
        schema: definitions["Errors"];
      };
      /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
      401: {
        headers: {};
        schema: definitions["Errors"];
      };
      /** Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
      403: {
        headers: {};
        schema: definitions["Errors"];
      };
      /** The specified resource does not exist. */
      404: {
        headers: {};
        schema: definitions["Errors"];
      };
      /** The frequency of requests was greater than allowed. */
      429: {
        headers: {};
        schema: definitions["Errors"];
      };
      /** An unexpected condition occurred that prevented the server from fulfilling the request. */
      500: {
        headers: {};
        schema: definitions["Errors"];
      };
      /** Temporary overloading or maintenance of the server. */
      503: {
        headers: {};
        schema: definitions["Errors"];
      };
    };
  };
}

export interface external {}

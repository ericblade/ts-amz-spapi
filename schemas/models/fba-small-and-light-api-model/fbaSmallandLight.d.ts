/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    "/fba/smallAndLight/v1/enrollments/{sellerSKU}": {
        /**
         * Returns the Small and Light enrollment status for the item indicated by the specified seller SKU in the specified marketplace.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 2 | 10 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        get: operations["getSmallAndLightEnrollmentBySellerSKU"];
        /**
         * Enrolls the item indicated by the specified seller SKU in the Small and Light program in the specified marketplace. If the item is not eligible, the ineligibility reasons are returned.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 2 | 5 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        put: operations["putSmallAndLightEnrollmentBySellerSKU"];
        /**
         * Removes the item indicated by the specified seller SKU from the Small and Light program in the specified marketplace. If the item is not eligible for disenrollment, the ineligibility reasons are returned.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 2 | 5 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        delete: operations["deleteSmallAndLightEnrollmentBySellerSKU"];
    };
    "/fba/smallAndLight/v1/eligibilities/{sellerSKU}": {
        /**
         * Returns the Small and Light program eligibility status of the item indicated by the specified seller SKU in the specified marketplace. If the item is not eligible, the ineligibility reasons are returned.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 2 | 10 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        get: operations["getSmallAndLightEligibilityBySellerSKU"];
    };
    "/fba/smallAndLight/v1/feePreviews": {
        /**
         * Returns the Small and Light fee estimates for the specified items. You must include a marketplaceId parameter to retrieve the proper fee estimates for items to be sold in that marketplace. The ordering of items in the response will mirror the order of the items in the request. Duplicate ASIN/price combinations are removed.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 1 | 3 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        post: operations["getSmallAndLightFeePreview"];
    };
}
export interface definitions {
    /** @description A marketplace identifier. */
    MarketplaceId: string;
    /** @description Identifies an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit. */
    SellerSKU: string;
    /** @description Error response returned when the request is unsuccessful. */
    Error: {
        /** @description An error code that identifies the type of error that occurred. */
        code: string;
        /** @description A message that describes the error condition in a human-readable form. */
        message: string;
        /** @description Additional information that can help the caller understand or fix the issue. */
        details?: string;
    };
    /** @description A list of error responses returned when a request is unsuccessful. */
    ErrorList: {
        errors?: definitions["Error"][];
    };
    /** @description The Small and Light enrollment status of the item. */
    SmallAndLightEnrollmentStatus: "ENROLLED" | "NOT_ENROLLED";
    /** @description The Small and Light eligibility status of the item. */
    SmallAndLightEligibilityStatus: "ELIGIBLE" | "NOT_ELIGIBLE";
    /** @description The Small and Light enrollment status of the item indicated by the specified seller SKU. */
    SmallAndLightEnrollment: {
        marketplaceId: definitions["MarketplaceId"];
        sellerSKU: definitions["SellerSKU"];
        status: definitions["SmallAndLightEnrollmentStatus"];
    };
    /** @description The Small and Light eligibility status of the item indicated by the specified seller SKU. */
    SmallAndLightEligibility: {
        marketplaceId: definitions["MarketplaceId"];
        sellerSKU: definitions["SellerSKU"];
        status: definitions["SmallAndLightEligibilityStatus"];
    };
    /** @description Request schema for submitting items for which to retrieve fee estimates. */
    SmallAndLightFeePreviewRequest: {
        marketplaceId: definitions["MarketplaceId"];
        /** @description A list of items for which to retrieve fee estimates (limit: 25). */
        items: definitions["Item"][];
    };
    SmallAndLightFeePreviews: {
        /** @description A list of fee estimates for the requested items. The order of the fee estimates will follow the same order as the items in the request, with duplicates removed. */
        data?: definitions["FeePreview"][];
    };
    /** @description An item to be sold. */
    Item: {
        /** @description The Amazon Standard Identification Number (ASIN) value used to identify the item. */
        asin: string;
        /** @description The price that the seller plans to charge for the item. */
        price: definitions["MoneyType"];
    };
    /** @description The fee estimate for a specific item. */
    FeePreview: {
        /** @description The Amazon Standard Identification Number (ASIN) value used to identify the item. */
        asin?: string;
        /** @description The price that the seller plans to charge for the item. */
        price?: definitions["MoneyType"];
        /** @description A list of the Small and Light fees for the item. */
        feeBreakdown?: definitions["FeeLineItem"][];
        /** @description The total fees charged if the item participated in the Small and Light program. */
        totalFees?: definitions["MoneyType"];
        /** @description One or more unexpected errors occurred during the getSmallAndLightFeePreview operation. */
        errors?: definitions["Error"][];
    };
    /** @description Fee details for a specific fee. */
    FeeLineItem: {
        /** @description The type of fee charged to the seller. */
        feeType: "FBAWeightBasedFee" | "FBAPerOrderFulfillmentFee" | "FBAPerUnitFulfillmentFee" | "Commission";
        /** @description Amount charged to the seller for the specific fee type. */
        feeCharge: definitions["MoneyType"];
    };
    MoneyType: {
        /** @description The currency code in ISO 4217 format. */
        currencyCode?: string;
        /** @description The monetary value. */
        amount?: number;
    };
}
export interface operations {
    /**
     * Returns the Small and Light enrollment status for the item indicated by the specified seller SKU in the specified marketplace.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2 | 10 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    getSmallAndLightEnrollmentBySellerSKU: {
        parameters: {
            path: {
                /** The seller SKU that identifies the item. */
                sellerSKU: string;
            };
            query: {
                /** The marketplace for which the enrollment status is retrieved. Note: Accepts a single marketplace only. */
                marketplaceIds: string[];
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["SmallAndLightEnrollment"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The request size exceeded the maximum accepted size. */
            413: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The request payload is in an unsupported format. */
            415: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["ErrorList"];
            };
        };
    };
    /**
     * Enrolls the item indicated by the specified seller SKU in the Small and Light program in the specified marketplace. If the item is not eligible, the ineligibility reasons are returned.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2 | 5 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    putSmallAndLightEnrollmentBySellerSKU: {
        parameters: {
            path: {
                /** The seller SKU that identifies the item. */
                sellerSKU: string;
            };
            query: {
                /** The marketplace in which to enroll the item. Note: Accepts a single marketplace only. */
                marketplaceIds: string[];
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["SmallAndLightEnrollment"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The request size exceeded the maximum accepted size. */
            413: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The request payload is in an unsupported format. */
            415: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["ErrorList"];
            };
        };
    };
    /**
     * Removes the item indicated by the specified seller SKU from the Small and Light program in the specified marketplace. If the item is not eligible for disenrollment, the ineligibility reasons are returned.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2 | 5 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    deleteSmallAndLightEnrollmentBySellerSKU: {
        parameters: {
            path: {
                /** The seller SKU that identifies the item. */
                sellerSKU: string;
            };
            query: {
                /** The marketplace in which to remove the item from the Small and Light program. Note: Accepts a single marketplace only. */
                marketplaceIds: string[];
            };
        };
        responses: {
            /** Success. */
            204: never;
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The request size exceeded the maximum accepted size. */
            413: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The request payload is in an unsupported format. */
            415: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["ErrorList"];
            };
        };
    };
    /**
     * Returns the Small and Light program eligibility status of the item indicated by the specified seller SKU in the specified marketplace. If the item is not eligible, the ineligibility reasons are returned.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2 | 10 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    getSmallAndLightEligibilityBySellerSKU: {
        parameters: {
            path: {
                /** The seller SKU that identifies the item. */
                sellerSKU: string;
            };
            query: {
                /** The marketplace for which the eligibility status is retrieved. NOTE: Accepts a single marketplace only. */
                marketplaceIds: string[];
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["SmallAndLightEligibility"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The request size exceeded the maximum accepted size. */
            413: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The request payload is in an unsupported format. */
            415: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["ErrorList"];
            };
        };
    };
    /**
     * Returns the Small and Light fee estimates for the specified items. You must include a marketplaceId parameter to retrieve the proper fee estimates for items to be sold in that marketplace. The ordering of items in the response will mirror the order of the items in the request. Duplicate ASIN/price combinations are removed.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 1 | 3 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    getSmallAndLightFeePreview: {
        parameters: {
            body: {
                body: definitions["SmallAndLightFeePreviewRequest"];
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["SmallAndLightFeePreviews"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["ErrorList"];
            };
        };
    };
}
export interface external {
}

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/catalog/2020-12-01/items": {
    /**
     * Search for and return a list of Amazon catalog items and associated information.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2 | 2 |
     *
     * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     */
    get: operations["searchCatalogItems"];
  };
  "/catalog/2020-12-01/items/{asin}": {
    /**
     * Retrieves details for an item in the Amazon catalog.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2 | 2 |
     *
     * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     */
    get: operations["getCatalogItem"];
  };
}

export interface definitions {
  /** @description Error response returned when the request is unsuccessful. */
  Error: {
    /** @description An error code that identifies the type of error that occurred. */
    code: string;
    /** @description A message that describes the error condition. */
    message: string;
    /** @description Additional details that can help the caller understand or fix the issue. */
    details?: string;
  };
  /** @description A list of error responses returned when a request is unsuccessful. */
  ErrorList: {
    errors: definitions["Error"][];
  };
  /** @description An item in the Amazon catalog. */
  Item: {
    asin: definitions["ItemAsin"];
    attributes?: definitions["ItemAttributes"];
    identifiers?: definitions["ItemIdentifiers"];
    images?: definitions["ItemImages"];
    productTypes?: definitions["ItemProductTypes"];
    salesRanks?: definitions["ItemSalesRanks"];
    summaries?: definitions["ItemSummaries"];
    variations?: definitions["ItemVariations"];
    vendorDetails?: definitions["ItemVendorDetails"];
  };
  /** @description Amazon Standard Identification Number (ASIN) is the unique identifier for an item in the Amazon catalog. */
  ItemAsin: string;
  /** @description A JSON object that contains structured item attribute data keyed by attribute name. Catalog item attributes are available only to brand owners and conform to the related product type definitions available in the Selling Partner API for Product Type Definitions. */
  ItemAttributes: { [key: string]: unknown };
  /** @description Identifiers associated with the item in the Amazon catalog, such as UPC and EAN identifiers. */
  ItemIdentifiers: definitions["ItemIdentifiersByMarketplace"][];
  /** @description Identifiers associated with the item in the Amazon catalog for the indicated Amazon marketplace. */
  ItemIdentifiersByMarketplace: {
    /** @description Amazon marketplace identifier. */
    marketplaceId: string;
    /** @description Identifiers associated with the item in the Amazon catalog for the indicated Amazon marketplace. */
    identifiers: definitions["ItemIdentifier"][];
  };
  /** @description Identifier associated with the item in the Amazon catalog, such as a UPC or EAN identifier. */
  ItemIdentifier: {
    /** @description Type of identifier, such as UPC, EAN, or ISBN. */
    identifierType: string;
    /** @description Identifier. */
    identifier: string;
  };
  /** @description Images for an item in the Amazon catalog. All image variants are provided to brand owners. Otherwise, a thumbnail of the "MAIN" image variant is provided. */
  ItemImages: definitions["ItemImagesByMarketplace"][];
  /** @description Images for an item in the Amazon catalog for the indicated Amazon marketplace. */
  ItemImagesByMarketplace: {
    /** @description Amazon marketplace identifier. */
    marketplaceId: string;
    /** @description Images for an item in the Amazon catalog for the indicated Amazon marketplace. */
    images: definitions["ItemImage"][];
  };
  /** @description Image for an item in the Amazon catalog. */
  ItemImage: {
    /**
     * @description Variant of the image, such as MAIN or PT01.
     * @example MAIN
     */
    variant:
      | "MAIN"
      | "PT01"
      | "PT02"
      | "PT03"
      | "PT04"
      | "PT05"
      | "PT06"
      | "PT07"
      | "PT08"
      | "SWCH";
    /** @description Link, or URL, for the image. */
    link: string;
    /** @description Height of the image in pixels. */
    height: number;
    /** @description Width of the image in pixels. */
    width: number;
  };
  /** @description Product types associated with the Amazon catalog item. */
  ItemProductTypes: definitions["ItemProductTypeByMarketplace"][];
  /** @description Product type associated with the Amazon catalog item for the indicated Amazon marketplace. */
  ItemProductTypeByMarketplace: {
    /** @description Amazon marketplace identifier. */
    marketplaceId?: string;
    /**
     * @description Name of the product type associated with the Amazon catalog item.
     * @example LUGGAGE
     */
    productType?: string;
  };
  /** @description Sales ranks of an Amazon catalog item. */
  ItemSalesRanks: definitions["ItemSalesRanksByMarketplace"][];
  /** @description Sales ranks of an Amazon catalog item for the indicated Amazon marketplace. */
  ItemSalesRanksByMarketplace: {
    /** @description Amazon marketplace identifier. */
    marketplaceId: string;
    /** @description Sales ranks of an Amazon catalog item for an Amazon marketplace. */
    ranks: definitions["ItemSalesRank"][];
  };
  /** @description Sales rank of an Amazon catalog item. */
  ItemSalesRank: {
    /** @description Title, or name, of the sales rank. */
    title: string;
    /** @description Corresponding Amazon retail website link, or URL, for the sales rank. */
    link?: string;
    /** @description Sales rank value. */
    rank: number;
  };
  /** @description Summary details of an Amazon catalog item. */
  ItemSummaries: definitions["ItemSummaryByMarketplace"][];
  /** @description Summary details of an Amazon catalog item for the indicated Amazon marketplace. */
  ItemSummaryByMarketplace: {
    /** @description Amazon marketplace identifier. */
    marketplaceId: string;
    /** @description Name of the brand associated with an Amazon catalog item. */
    brandName?: string;
    /** @description Identifier of the browse node associated with an Amazon catalog item. */
    browseNode?: string;
    /** @description Name of the color associated with an Amazon catalog item. */
    colorName?: string;
    /** @description Name, or title, associated with an Amazon catalog item. */
    itemName?: string;
    /** @description Name of the manufacturer associated with an Amazon catalog item. */
    manufacturer?: string;
    /** @description Model number associated with an Amazon catalog item. */
    modelNumber?: string;
    /** @description Name of the size associated with an Amazon catalog item. */
    sizeName?: string;
    /** @description Name of the style associated with an Amazon catalog item. */
    styleName?: string;
  };
  /** @description Variation details by marketplace for an Amazon catalog item (variation relationships). */
  ItemVariations: definitions["ItemVariationsByMarketplace"][];
  /** @description Variation details for the Amazon catalog item for the indicated Amazon marketplace. */
  ItemVariationsByMarketplace: {
    /** @description Amazon marketplace identifier. */
    marketplaceId: string;
    /** @description Identifiers (ASINs) of the related items. */
    asins: string[];
    /**
     * @description Type of variation relationship of the Amazon catalog item in the request to the related item(s): "PARENT" or "CHILD".
     * @example PARENT
     */
    variationType: "PARENT" | "CHILD";
  };
  /** @description Vendor details associated with an Amazon catalog item. Vendor details are available to vendors only. */
  ItemVendorDetails: definitions["ItemVendorDetailsByMarketplace"][];
  /** @description Vendor details associated with an Amazon catalog item for the indicated Amazon marketplace. */
  ItemVendorDetailsByMarketplace: {
    /** @description Amazon marketplace identifier. */
    marketplaceId: string;
    /** @description Brand code associated with an Amazon catalog item. */
    brandCode?: string;
    /** @description Product category associated with an Amazon catalog item. */
    categoryCode?: string;
    /** @description Manufacturer code associated with an Amazon catalog item. */
    manufacturerCode?: string;
    /** @description Parent vendor code of the manufacturer code. */
    manufacturerCodeParent?: string;
    /** @description Product group associated with an Amazon catalog item. */
    productGroup?: string;
    /** @description Replenishment category associated with an Amazon catalog item. */
    replenishmentCategory?:
      | "ALLOCATED"
      | "BASIC_REPLENISHMENT"
      | "IN_SEASON"
      | "LIMITED_REPLENISHMENT"
      | "MANUFACTURER_OUT_OF_STOCK"
      | "NEW_PRODUCT"
      | "NON_REPLENISHABLE"
      | "NON_STOCKUPABLE"
      | "OBSOLETE"
      | "PLANNED_REPLENISHMENT";
    /** @description Product subcategory associated with an Amazon catalog item. */
    subcategoryCode?: string;
  };
  /** @description Items in the Amazon catalog and search related metadata. */
  ItemSearchResults: {
    /**
     * @description The estimated total number of products matched by the search query (only results up to the page count limit will be returned per request regardless of the number found).
     *
     * Note: The maximum number of items (ASINs) that can be returned and paged through is 1000.
     */
    numberOfResults: number;
    /** @description If available, the nextToken and/or previousToken values required to return paginated results. */
    pagination: definitions["Pagination"];
    refinements: definitions["Refinements"];
    /** @description A list of items from the Amazon catalog. */
    items: definitions["Item"][];
  };
  /** @description When a request produces a response that exceeds the pageSize, pagination occurs. This means the response is divided into individual pages. To retrieve the next page or the previous page, you must pass the nextToken value or the previousToken value as the pageToken parameter in the next request. When you receive the last page, there will be no nextToken key in the pagination object. */
  Pagination: {
    /** @description A token that can be used to fetch the next page. */
    nextToken?: string;
    /** @description A token that can be used to fetch the previous page. */
    previousToken?: string;
  };
  /** @description Search refinements. */
  Refinements: {
    /** @description Brand search refinements. */
    brands: definitions["BrandRefinement"][];
    /** @description Classification search refinements. */
    classifications: definitions["ClassificationRefinement"][];
  };
  /** @description Description of a brand that can be used to get more fine-grained search results. */
  BrandRefinement: {
    /** @description The estimated number of results that would still be returned if refinement key applied. */
    numberOfResults: number;
    /** @description Brand name. For display and can be used as a search refinement. */
    brandName: string;
  };
  /** @description Description of a classification that can be used to get more fine-grained search results. */
  ClassificationRefinement: {
    /** @description The estimated number of results that would still be returned if refinement key applied. */
    numberOfResults: number;
    /** @description Display name for the classification. */
    displayName: string;
    /** @description Identifier for the classification that can be used for search refinement purposes. */
    classificationId: string;
  };
}

export interface operations {
  /**
   * Search for and return a list of Amazon catalog items and associated information.
   *
   * **Usage Plan:**
   *
   * | Rate (requests per second) | Burst |
   * | ---- | ---- |
   * | 2 | 2 |
   *
   * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
   */
  searchCatalogItems: {
    parameters: {
      query: {
        /** A comma-delimited list of words or item identifiers to search the Amazon catalog for. */
        keywords: string[];
        /** A comma-delimited list of Amazon marketplace identifiers for the request. */
        marketplaceIds: string[];
        /** A comma-delimited list of data sets to include in the response. Default: summaries. */
        includedData?: (
          | "identifiers"
          | "images"
          | "productTypes"
          | "salesRanks"
          | "summaries"
          | "variations"
          | "vendorDetails"
        )[];
        /** A comma-delimited list of brand names to limit the search to. */
        brandNames?: string[];
        /** A comma-delimited list of classification identifiers to limit the search to. */
        classificationIds?: string[];
        /** Number of results to be returned per page. */
        pageSize?: number;
        /** A token to fetch a certain page when there are multiple pages worth of results. */
        pageToken?: string;
        /** The language the keywords are provided in. Defaults to the primary locale of the marketplace. */
        keywordsLocale?: string;
        /** Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. */
        locale?: string;
      };
    };
    responses: {
      /** Success. */
      200: {
        headers: {};
        schema: definitions["ItemSearchResults"];
      };
      /** Request has missing or invalid parameters and cannot be parsed. */
      400: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
      403: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** The resource specified does not exist. */
      404: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** The request size exceeded the maximum accepted size. */
      413: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** The request payload is in an unsupported format. */
      415: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** The frequency of requests was greater than allowed. */
      429: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** An unexpected condition occurred that prevented the server from fulfilling the request. */
      500: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** Temporary overloading or maintenance of the server. */
      503: {
        headers: {};
        schema: definitions["ErrorList"];
      };
    };
  };
  /**
   * Retrieves details for an item in the Amazon catalog.
   *
   * **Usage Plan:**
   *
   * | Rate (requests per second) | Burst |
   * | ---- | ---- |
   * | 2 | 2 |
   *
   * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
   */
  getCatalogItem: {
    parameters: {
      path: {
        /** The Amazon Standard Identification Number (ASIN) of the item. */
        asin: string;
      };
      query: {
        /** A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces. */
        marketplaceIds: string[];
        /** A comma-delimited list of data sets to include in the response. Default: summaries. */
        includedData?: (
          | "attributes"
          | "identifiers"
          | "images"
          | "productTypes"
          | "salesRanks"
          | "summaries"
          | "variations"
          | "vendorDetails"
        )[];
        /** Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. */
        locale?: string;
      };
    };
    responses: {
      /** Success. */
      200: {
        headers: {};
        schema: definitions["Item"];
      };
      /** Request has missing or invalid parameters and cannot be parsed. */
      400: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
      403: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** The resource specified does not exist. */
      404: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** The request size exceeded the maximum accepted size. */
      413: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** The request payload is in an unsupported format. */
      415: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** The frequency of requests was greater than allowed. */
      429: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** An unexpected condition occurred that prevented the server from fulfilling the request. */
      500: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** Temporary overloading or maintenance of the server. */
      503: {
        headers: {};
        schema: definitions["ErrorList"];
      };
    };
  };
}

export interface external {}

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    "/feeds/2021-06-30/feeds": {
        /**
         * Returns feed details for the feeds that match the filters that you specify.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 0.0222 | 10 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        get: operations["getFeeds"];
        /**
         * Creates a feed. Upload the contents of the feed document before calling this operation.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 0.0083 | 15 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        post: operations["createFeed"];
        parameters: {};
    };
    "/feeds/2021-06-30/feeds/{feedId}": {
        /**
         * Returns feed details (including the resultDocumentId, if available) for the feed that you specify.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 2.0 | 15 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        get: operations["getFeed"];
        /**
         * Cancels the feed that you specify. Only feeds with processingStatus=IN_QUEUE can be cancelled. Cancelled feeds are returned in subsequent calls to the getFeed and getFeeds operations.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 0.0222 | 10 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        delete: operations["cancelFeed"];
        parameters: {};
    };
    "/feeds/2021-06-30/documents": {
        /**
         * Creates a feed document for the feed type that you specify. This operation returns a presigned URL for uploading the feed document contents. It also returns a feedDocumentId value that you can pass in with a subsequent call to the createFeed operation.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 0.0083 | 15 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        post: operations["createFeedDocument"];
        parameters: {};
    };
    "/feeds/2021-06-30/documents/{feedDocumentId}": {
        /**
         * Returns the information required for retrieving a feed document's contents.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 0.0222 | 10 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        get: operations["getFeedDocument"];
    };
}
export interface definitions {
    /** @description An error response returned when the request is unsuccessful. */
    Error: {
        /** @description An error code that identifies the type of error that occurred. */
        code: string;
        /** @description A message that describes the error condition in a human-readable form. */
        message: string;
        /** @description Additional details that can help the caller understand or fix the issue. */
        details?: string;
    };
    /** @description A list of error responses returned when a request is unsuccessful. */
    ErrorList: {
        errors: definitions["Error"][];
    };
    /** @description Response schema. */
    CreateFeedResponse: {
        /** @description The identifier for the feed. This identifier is unique only in combination with a seller ID. */
        feedId: string;
    };
    /** @description Detailed information about the feed. */
    Feed: {
        /** @description The identifier for the feed. This identifier is unique only in combination with a seller ID. */
        feedId: string;
        /** @description The feed type. */
        feedType: string;
        /** @description A list of identifiers for the marketplaces that the feed is applied to. */
        marketplaceIds?: string[];
        /**
         * Format: date-time
         * @description The date and time when the feed was created, in ISO 8601 date time format.
         */
        createdTime: string;
        /** @description The processing status of the feed. */
        processingStatus: "CANCELLED" | "DONE" | "FATAL" | "IN_PROGRESS" | "IN_QUEUE";
        /**
         * Format: date-time
         * @description The date and time when feed processing started, in ISO 8601 date time format.
         */
        processingStartTime?: string;
        /**
         * Format: date-time
         * @description The date and time when feed processing completed, in ISO 8601 date time format.
         */
        processingEndTime?: string;
        /** @description The identifier for the feed document. This identifier is unique only in combination with a seller ID. */
        resultFeedDocumentId?: string;
    };
    /** @description A list of feeds. */
    FeedList: definitions["Feed"][];
    /** @description Response schema. */
    GetFeedsResponse: {
        /** @description The feeds. */
        feeds: definitions["FeedList"];
        /** @description Returned when the number of results exceeds pageSize. To get the next page of results, call the getFeeds operation with this token as the only parameter. */
        nextToken?: string;
    };
    /** @description Information required for the feed document. */
    FeedDocument: {
        /** @description The identifier for the feed document. This identifier is unique only in combination with a seller ID. */
        feedDocumentId: string;
        /** @description A presigned URL for the feed document. If `compressionAlgorithm` is not returned, you can download the feed directly from this URL. This URL expires after 5 minutes. */
        url: string;
        /** @description If the feed document contents have been compressed, the compression algorithm used is returned in this property and you must decompress the feed when you download. Otherwise, you can download the feed directly. Refer to [Step 7. Download the feed processing report](doc:feeds-api-v2021-06-30-use-case-guide#step-7-download-the-feed-processing-report) in the use case guide, where sample code is provided. */
        compressionAlgorithm?: "GZIP";
    };
    /** @description Additional options to control the feed. These vary by feed type. */
    FeedOptions: {
        [key: string]: string;
    };
    /** @description Information required to create the feed. */
    CreateFeedSpecification: {
        /** @description The feed type. */
        feedType: string;
        /** @description A list of identifiers for marketplaces that you want the feed to be applied to. */
        marketplaceIds: string[];
        /** @description The document identifier returned by the createFeedDocument operation. Upload the feed document contents before calling the createFeed operation. */
        inputFeedDocumentId: string;
        feedOptions?: definitions["FeedOptions"];
    };
    /** @description Specifies the content type for the createFeedDocument operation. */
    CreateFeedDocumentSpecification: {
        /** @description The content type of the feed. */
        contentType: string;
    };
    /** @description Information required to upload a feed document's contents. */
    CreateFeedDocumentResponse: {
        /** @description The identifier of the feed document. */
        feedDocumentId: string;
        /** @description The presigned URL for uploading the feed contents. This URL expires after 5 minutes. */
        url: string;
    };
}
export interface operations {
    /**
     * Returns feed details for the feeds that match the filters that you specify.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 0.0222 | 10 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    getFeeds: {
        parameters: {
            query: {
                /** A list of feed types used to filter feeds. When feedTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either feedTypes or nextToken is required. */
                feedTypes?: string[];
                /** A list of marketplace identifiers used to filter feeds. The feeds returned will match at least one of the marketplaces that you specify. */
                marketplaceIds?: string[];
                /** The maximum number of feeds to return in a single call. */
                pageSize?: number;
                /** A list of processing statuses used to filter feeds. */
                processingStatuses?: ("CANCELLED" | "DONE" | "FATAL" | "IN_PROGRESS" | "IN_QUEUE")[];
                /** The earliest feed creation date and time for feeds included in the response, in ISO 8601 format. The default is 90 days ago. Feeds are retained for a maximum of 90 days. */
                createdSince?: string;
                /** The latest feed creation date and time for feeds included in the response, in ISO 8601 format. The default is now. */
                createdUntil?: string;
                /** A string token returned in the response to your previous request. nextToken is returned when the number of results exceeds the specified pageSize value. To get the next page of results, call the getFeeds operation and include this token as the only parameter. Specifying nextToken with any other parameters will cause the request to fail. */
                nextToken?: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["GetFeedsResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The request's Content-Type header is invalid. */
            415: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["ErrorList"];
            };
        };
    };
    /**
     * Creates a feed. Upload the contents of the feed document before calling this operation.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 0.0083 | 15 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    createFeed: {
        parameters: {
            body: {
                body: definitions["CreateFeedSpecification"];
            };
        };
        responses: {
            /** Success. */
            202: {
                headers: {};
                schema: definitions["CreateFeedResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The request's Content-Type header is invalid. */
            415: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["ErrorList"];
            };
        };
    };
    /**
     * Returns feed details (including the resultDocumentId, if available) for the feed that you specify.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2.0 | 15 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    getFeed: {
        parameters: {
            path: {
                /** The identifier for the feed. This identifier is unique only in combination with a seller ID. */
                feedId: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["Feed"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The request's Content-Type header is invalid. */
            415: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["ErrorList"];
            };
        };
    };
    /**
     * Cancels the feed that you specify. Only feeds with processingStatus=IN_QUEUE can be cancelled. Cancelled feeds are returned in subsequent calls to the getFeed and getFeeds operations.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 0.0222 | 10 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    cancelFeed: {
        parameters: {
            path: {
                /** The identifier for the feed. This identifier is unique only in combination with a seller ID. */
                feedId: string;
            };
        };
        responses: {
            /** Success. */
            200: unknown;
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The request's Content-Type header is invalid. */
            415: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["ErrorList"];
            };
        };
    };
    /**
     * Creates a feed document for the feed type that you specify. This operation returns a presigned URL for uploading the feed document contents. It also returns a feedDocumentId value that you can pass in with a subsequent call to the createFeed operation.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 0.0083 | 15 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    createFeedDocument: {
        parameters: {
            body: {
                body: definitions["CreateFeedDocumentSpecification"];
            };
        };
        responses: {
            /** Successfully created a feed document that is ready to receive contents. */
            201: {
                headers: {};
                schema: definitions["CreateFeedDocumentResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The request size exceeded the maximum accepted size. */
            413: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The request payload is in an unsupported format. */
            415: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["ErrorList"];
            };
        };
    };
    /**
     * Returns the information required for retrieving a feed document's contents.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 0.0222 | 10 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    getFeedDocument: {
        parameters: {
            path: {
                /** The identifier of the feed document. */
                feedDocumentId: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["FeedDocument"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The request's Content-Type header is invalid. */
            415: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["ErrorList"];
            };
        };
    };
}
export interface external {
}

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/vendor/directFulfillment/transactions/2021-12-28/transactions/{transactionId}": {
    /**
     * Returns the status of the transaction indicated by the specified transactionId.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 10 | 10 |
     *
     * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     */
    get: operations["getTransactionStatus"];
    parameters: {};
  };
}

export interface definitions {
  /** @description The payload for the getTransactionStatus operation. */
  TransactionStatus: {
    transactionStatus?: definitions["Transaction"];
  };
  /** @description The transaction status details. */
  Transaction: {
    /** @description The unique identifier sent in the 'transactionId' field in response to the post request of a specific transaction. */
    transactionId: string;
    /** @description Current processing status of the transaction. */
    status: "Failure" | "Processing" | "Success";
    /** @description Error code and message for the failed transaction. Only available when transaction status is 'Failure'. */
    errors?: definitions["ErrorList"];
  };
  /** @description A list of error responses returned when a request is unsuccessful. */
  ErrorList: {
    errors: definitions["Error"][];
  };
  /** @description Error response returned when the request is unsuccessful. */
  Error: {
    /** @description An error code that identifies the type of error that occurred. */
    code: string;
    /** @description A message that describes the error condition. */
    message: string;
    /** @description Additional details that can help the caller understand or fix the issue. */
    details?: string;
  };
}

export interface operations {
  /**
   * Returns the status of the transaction indicated by the specified transactionId.
   *
   * **Usage Plan:**
   *
   * | Rate (requests per second) | Burst |
   * | ---- | ---- |
   * | 10 | 10 |
   *
   * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
   */
  getTransactionStatus: {
    parameters: {
      path: {
        /** Previously returned in the response to the POST request of a specific transaction. */
        transactionId: string;
      };
    };
    responses: {
      /** Success. */
      200: {
        headers: {};
        schema: definitions["TransactionStatus"];
      };
      /** Request has missing or invalid parameters and cannot be parsed. */
      400: {
        headers: {};
        schema: definitions["ErrorList"];
      };
      /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
      401: {
        headers: {};
        schema: definitions["Error"];
      };
      /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
      403: {
        headers: {};
        schema: definitions["Error"];
      };
      /** The resource specified does not exist. */
      404: {
        headers: {};
        schema: definitions["Error"];
      };
      /** The request payload is in an unsupported format. */
      415: {
        headers: {};
        schema: definitions["Error"];
      };
      /** The frequency of requests was greater than allowed. */
      429: {
        headers: {};
        schema: definitions["Error"];
      };
      /** An unexpected condition occurred that prevented the server from fulfilling the request. */
      500: {
        headers: {};
        schema: definitions["Error"];
      };
      /** Temporary overloading or maintenance of the server. */
      503: {
        headers: {};
        schema: definitions["Error"];
      };
    };
  };
}

export interface external {}

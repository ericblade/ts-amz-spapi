/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    "/fba/inbound/v0/itemsGuidance": {
        /**
         * Returns information that lets a seller know if Amazon recommends sending an item to a given marketplace. In some cases, Amazon provides guidance for why a given SellerSKU or ASIN is not recommended for shipment to Amazon's fulfillment network. Sellers may still ship items that are not recommended, at their discretion.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 2 | 30 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        get: operations["getInboundGuidance"];
    };
    "/fba/inbound/v0/plans": {
        /**
         * Returns one or more inbound shipment plans, which provide the information you need to create one or more inbound shipments for a set of items that you specify. Multiple inbound shipment plans might be required so that items can be optimally placed in Amazon's fulfillment network—for example, positioning inventory closer to the customer. Alternatively, two inbound shipment plans might be created with the same Amazon fulfillment center destination if the two shipment plans require different processing—for example, items that require labels must be shipped separately from stickerless, commingled inventory.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 2 | 30 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        post: operations["createInboundShipmentPlan"];
    };
    "/fba/inbound/v0/shipments/{shipmentId}": {
        /**
         * Updates or removes items from the inbound shipment identified by the specified shipment identifier. Adding new items is not supported.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 2 | 30 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        put: operations["updateInboundShipment"];
        /**
         * Returns a new inbound shipment based on the specified shipmentId that was returned by the createInboundShipmentPlan operation.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 2 | 30 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        post: operations["createInboundShipment"];
    };
    "/fba/inbound/v0/shipments/{shipmentId}/preorder": {
        /**
         * Returns pre-order information, including dates, that a seller needs before confirming a shipment for pre-order.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 2 | 30 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        get: operations["getPreorderInfo"];
    };
    "/fba/inbound/v0/shipments/{shipmentId}/preorder/confirm": {
        /**
         * Returns information needed to confirm a shipment for pre-order. Call this operation after calling the getPreorderInfo operation to get the NeedByDate value and other pre-order information about the shipment.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 2 | 30 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        put: operations["confirmPreorder"];
    };
    "/fba/inbound/v0/prepInstructions": {
        /**
         * Returns labeling requirements and item preparation instructions to help prepare items for shipment to Amazon's fulfillment network.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 2 | 30 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        get: operations["getPrepInstructions"];
    };
    "/fba/inbound/v0/shipments/{shipmentId}/transport": {
        /**
         * Returns current transportation information about an inbound shipment.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 2 | 30 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        get: operations["getTransportDetails"];
        /**
         * Sends transportation information to Amazon about an inbound shipment.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 2 | 30 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        put: operations["putTransportDetails"];
    };
    "/fba/inbound/v0/shipments/{shipmentId}/transport/void": {
        /**
         * Cancels a previously-confirmed request to ship an inbound shipment using an Amazon-partnered carrier.
         *
         * To be successful, you must call this operation before the VoidDeadline date that is returned by the getTransportDetails operation.
         *
         * Important: The VoidDeadline date is 24 hours after you confirm a Small Parcel shipment transportation request or one hour after you confirm a Less Than Truckload/Full Truckload (LTL/FTL) shipment transportation request. After the void deadline passes, your account will be charged for the shipping cost.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 2 | 30 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        post: operations["voidTransport"];
    };
    "/fba/inbound/v0/shipments/{shipmentId}/transport/estimate": {
        /**
         * Initiates the process of estimating the shipping cost for an inbound shipment by an Amazon-partnered carrier.
         *
         * Prior to calling the estimateTransport operation, you must call the putTransportDetails operation to provide Amazon with the transportation information for the inbound shipment.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 2 | 30 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        post: operations["estimateTransport"];
    };
    "/fba/inbound/v0/shipments/{shipmentId}/transport/confirm": {
        /**
         * Confirms that the seller accepts the Amazon-partnered shipping estimate, agrees to allow Amazon to charge their account for the shipping cost, and requests that the Amazon-partnered carrier ship the inbound shipment.
         *
         * Prior to calling the confirmTransport operation, you should call the getTransportDetails operation to get the Amazon-partnered shipping estimate.
         *
         * Important: After confirming the transportation request, if the seller decides that they do not want the Amazon-partnered carrier to ship the inbound shipment, you can call the voidTransport operation to cancel the transportation request. Note that for a Small Parcel shipment, the seller has 24 hours after confirming a transportation request to void the transportation request. For a Less Than Truckload/Full Truckload (LTL/FTL) shipment, the seller has one hour after confirming a transportation request to void it. After the grace period has expired the seller's account will be charged for the shipping cost.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 2 | 30 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        post: operations["confirmTransport"];
    };
    "/fba/inbound/v0/shipments/{shipmentId}/labels": {
        /**
         * Returns package/pallet labels for faster and more accurate shipment processing at the Amazon fulfillment center.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 2 | 30 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        get: operations["getLabels"];
    };
    "/fba/inbound/v0/shipments/{shipmentId}/billOfLading": {
        /**
         * Returns a bill of lading for a Less Than Truckload/Full Truckload (LTL/FTL) shipment. The getBillOfLading operation returns PDF document data for printing a bill of lading for an Amazon-partnered Less Than Truckload/Full Truckload (LTL/FTL) inbound shipment.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 2 | 30 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        get: operations["getBillOfLading"];
    };
    "/fba/inbound/v0/shipments": {
        /**
         * Returns a list of inbound shipments based on criteria that you specify.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 2 | 30 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        get: operations["getShipments"];
    };
    "/fba/inbound/v0/shipments/{shipmentId}/items": {
        /**
         * Returns a list of items in a specified inbound shipment.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 2 | 30 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        get: operations["getShipmentItemsByShipmentId"];
    };
    "/fba/inbound/v0/shipmentItems": {
        /**
         * Returns a list of items in a specified inbound shipment, or a list of items that were updated within a specified time frame.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 2 | 30 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        get: operations["getShipmentItems"];
    };
}
export interface definitions {
    /** @description Error response returned when the request is unsuccessful. */
    Error: {
        /** @description An error code that identifies the type of error that occured. */
        code: string;
        /** @description A message that describes the error condition in a human-readable form. */
        message: string;
        /** @description Additional details that can help the caller understand or fix the issue. */
        details?: string;
    };
    /** @description A list of error responses returned when a request is unsuccessful. */
    ErrorList: definitions["Error"][];
    /** @description Reasons why a given ASIN is not recommended for shipment to Amazon's fulfillment network. */
    ASINInboundGuidance: {
        /** @description The Amazon Standard Identification Number (ASIN) of the item. */
        ASIN: string;
        InboundGuidance: definitions["InboundGuidance"];
        /** @description A list of reasons for the current inbound guidance for this item. */
        GuidanceReasonList?: definitions["GuidanceReasonList"];
    };
    /** @description A list of ASINs and their associated inbound guidance. */
    ASINInboundGuidanceList: definitions["ASINInboundGuidance"][];
    /** @description Item preparation instructions to help with item sourcing decisions. */
    ASINPrepInstructions: {
        /** @description The Amazon Standard Identification Number (ASIN) of the item. */
        ASIN?: string;
        BarcodeInstruction?: definitions["BarcodeInstruction"];
        PrepGuidance?: definitions["PrepGuidance"];
        PrepInstructionList?: definitions["PrepInstructionList"];
    };
    /** @description A list of item preparation instructions. */
    ASINPrepInstructionsList: definitions["ASINPrepInstructions"][];
    Address: {
        /** @description Name of the individual or business. */
        Name: string;
        /** @description The street address information. */
        AddressLine1: string;
        /** @description Additional street address information, if required. */
        AddressLine2?: string;
        /** @description The district or county. */
        DistrictOrCounty?: string;
        /** @description The city. */
        City: string;
        /**
         * @description The state or province code.
         *
         * If state or province codes are used in your marketplace, it is recommended that you include one with your request. This helps Amazon to select the most appropriate Amazon fulfillment center for your inbound shipment plan.
         */
        StateOrProvinceCode: string;
        /** @description The country code in two-character ISO 3166-1 alpha-2 format. */
        CountryCode: string;
        /**
         * @description The postal code.
         *
         * If postal codes are used in your marketplace, we recommended that you include one with your request. This helps Amazon select the most appropriate Amazon fulfillment center for the inbound shipment plan.
         */
        PostalCode: string;
    };
    /** @description The fees for Amazon to prep goods for shipment. */
    AmazonPrepFeesDetails: {
        PrepInstruction?: definitions["PrepInstruction"];
        /** @description The fee for Amazon to prepare 1 unit. */
        FeePerUnit?: definitions["Amount"];
    };
    /** @description A list of preparation instructions and fees for Amazon to prep goods for shipment. */
    AmazonPrepFeesDetailsList: definitions["AmazonPrepFeesDetails"][];
    /** @description The monetary value. */
    Amount: {
        CurrencyCode: definitions["CurrencyCode"];
        /** @description The amount. */
        Value: definitions["BigDecimalType"];
    };
    /** @description Labeling requirements for the item. For more information about FBA labeling requirements, see the Seller Central Help for your marketplace. */
    BarcodeInstruction: "RequiresFNSKULabel" | "CanUseOriginalBarcode" | "MustProvideSellerSKU";
    /** Format: double */
    BigDecimalType: number;
    /** @description The manual processing fee per unit and total fee for a shipment. */
    BoxContentsFeeDetails: {
        /** @description The number of units to ship. */
        TotalUnits?: definitions["Quantity"];
        /** @description The manual processing fee per unit. */
        FeePerUnit?: definitions["Amount"];
        /** @description The total manual processing fee for the shipment. */
        TotalFee?: definitions["Amount"];
    };
    /** @description Where the seller provided box contents information for a shipment. */
    BoxContentsSource: "NONE" | "FEED" | "2D_BARCODE" | "INTERACTIVE";
    /** @description The condition of the item. */
    Condition: "NewItem" | "NewWithWarranty" | "NewOEM" | "NewOpenBox" | "UsedLikeNew" | "UsedVeryGood" | "UsedGood" | "UsedAcceptable" | "UsedPoor" | "UsedRefurbished" | "CollectibleLikeNew" | "CollectibleVeryGood" | "CollectibleGood" | "CollectibleAcceptable" | "CollectiblePoor" | "RefurbishedWithWarranty" | "Refurbished" | "Club";
    ConfirmPreorderResult: {
        /** @description Date passed in with the NeedByDate parameter. The confirmed shipment must arrive at the Amazon fulfillment center by this date to avoid delivery promise breaks for pre-ordered items. In YYYY-MM-DD format. */
        ConfirmedNeedByDate?: definitions["DateStringType"];
        /** @description Date that determines which pre-order items in the shipment are eligible for pre-order. The pre-order Buy Box will appear for any pre-order item in the shipment with a release date on or after this date. In YYYY-MM-DD format. */
        ConfirmedFulfillableDate?: definitions["DateStringType"];
    };
    /** @description The response schema for the confirmPreorder operation. */
    ConfirmPreorderResponse: {
        /** @description The payload for the confirmPreorder operation. */
        payload?: definitions["ConfirmPreorderResult"];
        errors?: definitions["ErrorList"];
    };
    CommonTransportResult: {
        TransportResult?: definitions["TransportResult"];
    };
    /** @description The response schema for the confirmTransport operation. */
    ConfirmTransportResponse: {
        /** @description The payload for the confirmTransport operation. */
        payload?: definitions["CommonTransportResult"];
        errors?: definitions["ErrorList"];
    };
    /** @description Contact information for the person in the seller's organization who is responsible for a Less Than Truckload/Full Truckload (LTL/FTL) shipment. */
    Contact: {
        /** @description The name of the contact person. */
        Name: string;
        /** @description The phone number of the contact person. */
        Phone: string;
        /** @description The email address of the contact person. */
        Email: string;
        /** @description The fax number of the contact person. */
        Fax?: string;
    };
    /** @description The request schema for the createInboundShipmentPlan operation. */
    CreateInboundShipmentPlanRequest: {
        /** @description The address from which the inbound shipment will be sent. */
        ShipFromAddress: definitions["Address"];
        /** @description The seller's preference for label preparation for an inbound shipment. */
        LabelPrepPreference: definitions["LabelPrepPreference"];
        /**
         * @description The two-character country code for the country where the inbound shipment is to be sent.
         *
         * Note: Not required. Specifying both ShipToCountryCode and ShipToCountrySubdivisionCode returns an error.
         *
         *  Values:
         *
         *  ShipToCountryCode values for North America:
         *  * CA – Canada
         *  * MX - Mexico
         *  * US - United States
         *
         * ShipToCountryCode values for MCI sellers in Europe:
         *  * DE – Germany
         *  * ES – Spain
         *  * FR – France
         *  * GB – United Kingdom
         *  * IT – Italy
         *
         * Default: The country code for the seller's home marketplace.
         */
        ShipToCountryCode?: string;
        /**
         * @description The two-character country code, followed by a dash and then up to three characters that represent the subdivision of the country where the inbound shipment is to be sent. For example, "IN-MH". In full ISO 3166-2 format.
         *
         * Note: Not required. Specifying both ShipToCountryCode and ShipToCountrySubdivisionCode returns an error.
         */
        ShipToCountrySubdivisionCode?: string;
        InboundShipmentPlanRequestItems: definitions["InboundShipmentPlanRequestItemList"];
    };
    CreateInboundShipmentPlanResult: {
        InboundShipmentPlans?: definitions["InboundShipmentPlanList"];
    };
    /** @description The response schema for the createInboundShipmentPlan operation. */
    CreateInboundShipmentPlanResponse: {
        /** @description The payload for the createInboundShipmentPlan operation. */
        payload?: definitions["CreateInboundShipmentPlanResult"];
        errors?: definitions["ErrorList"];
    };
    /** @description The request schema for an inbound shipment. */
    InboundShipmentRequest: {
        InboundShipmentHeader: definitions["InboundShipmentHeader"];
        InboundShipmentItems: definitions["InboundShipmentItemList"];
        /** @description A marketplace identifier. Specifies the marketplace where the product would be stored. */
        MarketplaceId: string;
    };
    InboundShipmentResult: {
        /** @description The shipment identifier submitted in the request. */
        ShipmentId: string;
    };
    /** @description The response schema for this operation. */
    InboundShipmentResponse: {
        /** @description The payload for this operation. */
        payload?: definitions["InboundShipmentResult"];
        errors?: definitions["ErrorList"];
    };
    /** @description The currency code. */
    CurrencyCode: "USD" | "GBP";
    /** Format: date */
    DateStringType: string;
    /** @description The dimension values and unit of measurement. */
    Dimensions: {
        /** @description The length dimension. */
        Length: definitions["BigDecimalType"];
        /** @description The width dimension. */
        Width: definitions["BigDecimalType"];
        /** @description The height dimension. */
        Height: definitions["BigDecimalType"];
        /** @description The unit of measurement for the dimensions. */
        Unit: definitions["UnitOfMeasurement"];
    };
    /** @description The reason that the ASIN is invalid. */
    ErrorReason: "DoesNotExist" | "InvalidASIN";
    /** @description The response schema for the estimateTransport operation. */
    EstimateTransportResponse: {
        /** @description The payload for the estimateTransport operation. */
        payload?: definitions["CommonTransportResult"];
        errors?: definitions["ErrorList"];
    };
    /** @description The response schema for the getBillOfLading operation. */
    GetBillOfLadingResponse: {
        /** @description The payload for the getBillOfLading operation. */
        payload?: definitions["BillOfLadingDownloadURL"];
        errors?: definitions["ErrorList"];
    };
    GetInboundGuidanceResult: {
        SKUInboundGuidanceList?: definitions["SKUInboundGuidanceList"];
        InvalidSKUList?: definitions["InvalidSKUList"];
        ASINInboundGuidanceList?: definitions["ASINInboundGuidanceList"];
        InvalidASINList?: definitions["InvalidASINList"];
    };
    /** @description The response schema for the getInboundGuidance operation. */
    GetInboundGuidanceResponse: {
        /** @description The payload for the getInboundGuidance operation. */
        payload?: definitions["GetInboundGuidanceResult"];
        errors?: definitions["ErrorList"];
    };
    LabelDownloadURL: {
        /** @description URL to download the label for the package. Note: The URL will only be valid for 15 seconds */
        DownloadURL?: string;
    };
    BillOfLadingDownloadURL: {
        /** @description URL to download the bill of lading for the package. Note: The URL will only be valid for 15 seconds */
        DownloadURL?: string;
    };
    /** @description The response schema for the getLabels operation. */
    GetLabelsResponse: {
        /** @description The payload for the getLabels operation. */
        payload?: definitions["LabelDownloadURL"];
        errors?: definitions["ErrorList"];
    };
    GetPreorderInfoResult: {
        /** @description Indicates whether the shipment contains items that have been enabled for pre-order. For more information about enabling items for pre-order, see the Seller Central Help. */
        ShipmentContainsPreorderableItems?: boolean;
        /** @description Indicates whether this shipment has been confirmed for pre-order. */
        ShipmentConfirmedForPreorder?: boolean;
        /** @description Date that the shipment would need to arrive at an Amazon fulfillment center to avoid delivery promise breaks for pre-ordered items if this shipment is later confirmed for pre-order. In YYYY-MM-DD format. See also the confirmPreorder operation. */
        NeedByDate?: definitions["DateStringType"];
        /** @description Date in YYYY-MM-DD format that determines which pre-order items in the shipment are eligible for pre-order. If this shipment is confirmed for pre-order with a subsequent call to the confirmPreorder operation, the pre-order Buy Box will appear for any pre-order items in the shipment with a release date on or after this date. Call the getShipmentItems operation to get the release dates for the pre-order items in this shipment. */
        ConfirmedFulfillableDate?: definitions["DateStringType"];
    };
    /** @description The response schema for the getPreorderInfo operation. */
    GetPreorderInfoResponse: {
        /** @description The payload for the getPreorderInfo operation. */
        payload?: definitions["GetPreorderInfoResult"];
        /** @description One or more unexpected errors occurred during the operation. */
        errors?: definitions["ErrorList"];
    };
    GetPrepInstructionsResult: {
        SKUPrepInstructionsList?: definitions["SKUPrepInstructionsList"];
        InvalidSKUList?: definitions["InvalidSKUList"];
        ASINPrepInstructionsList?: definitions["ASINPrepInstructionsList"];
        InvalidASINList?: definitions["InvalidASINList"];
    };
    /** @description The response schema for the getPrepInstructions operation. */
    GetPrepInstructionsResponse: {
        /** @description The payload for the getPrepInstructions operation. */
        payload?: definitions["GetPrepInstructionsResult"];
        errors?: definitions["ErrorList"];
    };
    GetTransportDetailsResult: {
        TransportContent?: definitions["TransportContent"];
    };
    /** @description The response schema for the getTransportDetails operation. */
    GetTransportDetailsResponse: {
        /** @description The payload for the getTransportDetails operation. */
        payload?: definitions["GetTransportDetailsResult"];
        errors?: definitions["ErrorList"];
    };
    /** @description A reason for the current inbound guidance for an item. */
    GuidanceReason: "SlowMovingASIN" | "NoApplicableGuidance";
    /** @description A list of inbound guidance reason information. */
    GuidanceReasonList: definitions["GuidanceReason"][];
    /** @description Specific inbound guidance for an item. */
    InboundGuidance: "InboundNotRecommended" | "InboundOK";
    /** @description Inbound shipment information used to create and update inbound shipments. */
    InboundShipmentHeader: {
        /** @description The name for the shipment. Use a naming convention that helps distinguish between shipments over time, such as the date the shipment was created. */
        ShipmentName: string;
        /** @description The return address. */
        ShipFromAddress: definitions["Address"];
        /** @description The identifier for the fulfillment center to which the shipment will be shipped. Get this value from the InboundShipmentPlan object in the response returned by the createInboundShipmentPlan operation. */
        DestinationFulfillmentCenterId: string;
        /**
         * @description Indicates whether or not an inbound shipment contains case-packed boxes. Note: A shipment must contain either all case-packed boxes or all individually packed boxes.
         *
         * Possible values:
         *
         * true - All boxes in the shipment must be case packed.
         *
         * false - All boxes in the shipment must be individually packed.
         *
         * Note: If AreCasesRequired = true for an inbound shipment, then the value of QuantityInCase must be greater than zero for every item in the shipment. Otherwise the service returns an error.
         */
        AreCasesRequired?: boolean;
        ShipmentStatus: definitions["ShipmentStatus"];
        /** @description The preference for label preparation for an inbound shipment. */
        LabelPrepPreference: definitions["LabelPrepPreference"];
        IntendedBoxContentsSource?: definitions["IntendedBoxContentsSource"];
    };
    /** @description Information about the seller's inbound shipments. Returned by the listInboundShipments operation. */
    InboundShipmentInfo: {
        /** @description The shipment identifier submitted in the request. */
        ShipmentId?: string;
        /** @description The name for the inbound shipment. */
        ShipmentName?: string;
        /** @description The return address. */
        ShipFromAddress: definitions["Address"];
        /** @description An Amazon fulfillment center identifier created by Amazon. */
        DestinationFulfillmentCenterId?: string;
        ShipmentStatus?: definitions["ShipmentStatus"];
        LabelPrepType?: definitions["LabelPrepType"];
        /** @description Indicates whether or not an inbound shipment contains case-packed boxes. When AreCasesRequired = true for an inbound shipment, all items in the inbound shipment must be case packed. */
        AreCasesRequired: boolean;
        /** @description Date by which the shipment must arrive at the Amazon fulfillment center to avoid delivery promise breaks for pre-ordered items. */
        ConfirmedNeedByDate?: definitions["DateStringType"];
        BoxContentsSource?: definitions["BoxContentsSource"];
        /** @description An estimate of the manual processing fee charged by Amazon for boxes without box content information. This is only returned when BoxContentsSource is NONE. */
        EstimatedBoxContentsFee?: definitions["BoxContentsFeeDetails"];
    };
    /** @description Item information for an inbound shipment. Submitted with a call to the createInboundShipment or updateInboundShipment operation. */
    InboundShipmentItem: {
        /** @description A shipment identifier originally returned by the createInboundShipmentPlan operation. */
        ShipmentId?: string;
        /** @description The seller SKU of the item. */
        SellerSKU: string;
        /** @description Amazon's fulfillment network SKU of the item. */
        FulfillmentNetworkSKU?: string;
        /** @description The item quantity that you are shipping. */
        QuantityShipped: definitions["Quantity"];
        /** @description The item quantity that has been received at an Amazon fulfillment center. */
        QuantityReceived?: definitions["Quantity"];
        /** @description The item quantity in each case, for case-packed items. Note that QuantityInCase multiplied by the number of boxes in the inbound shipment equals QuantityShipped. Also note that all of the boxes of an inbound shipment must either be case packed or individually packed. For that reason, when you submit the createInboundShipment or the updateInboundShipment operation, the value of QuantityInCase must be provided for every item in the shipment or for none of the items in the shipment. */
        QuantityInCase?: definitions["Quantity"];
        /** @description The date that a pre-order item will be available for sale. */
        ReleaseDate?: definitions["DateStringType"];
        PrepDetailsList?: definitions["PrepDetailsList"];
    };
    /** @description A list of inbound shipment item information. */
    InboundShipmentItemList: definitions["InboundShipmentItem"][];
    /** @description A list of inbound shipment information. */
    InboundShipmentList: definitions["InboundShipmentInfo"][];
    /** @description Inbound shipment information used to create an inbound shipment. Returned by the createInboundShipmentPlan operation. */
    InboundShipmentPlan: {
        /** @description A shipment identifier originally returned by the createInboundShipmentPlan operation. */
        ShipmentId: string;
        /** @description An Amazon fulfillment center identifier created by Amazon. */
        DestinationFulfillmentCenterId: string;
        /** @description The address of the Amazon fulfillment center to which to ship the items. */
        ShipToAddress: definitions["Address"];
        LabelPrepType: definitions["LabelPrepType"];
        /** @description SKU and quantity information for the items in the shipment. */
        Items: definitions["InboundShipmentPlanItemList"];
        EstimatedBoxContentsFee?: definitions["BoxContentsFeeDetails"];
    };
    /** @description Item information used to create an inbound shipment. Returned by the createInboundShipmentPlan operation. */
    InboundShipmentPlanItem: {
        /** @description The seller SKU of the item. */
        SellerSKU: string;
        /** @description Amazon's fulfillment network SKU of the item. */
        FulfillmentNetworkSKU: string;
        /** @description The item quantity that you are shipping. */
        Quantity: definitions["Quantity"];
        PrepDetailsList?: definitions["PrepDetailsList"];
    };
    /** @description A list of inbound shipment plan item information. */
    InboundShipmentPlanItemList: definitions["InboundShipmentPlanItem"][];
    /** @description A list of inbound shipment plan information */
    InboundShipmentPlanList: definitions["InboundShipmentPlan"][];
    /** @description Item information for creating an inbound shipment plan. Submitted with a call to the createInboundShipmentPlan operation. */
    InboundShipmentPlanRequestItem: {
        /** @description The seller SKU of the item. */
        SellerSKU: string;
        /** @description The Amazon Standard Identification Number (ASIN) of the item. */
        ASIN: string;
        Condition: definitions["Condition"];
        Quantity: definitions["Quantity"];
        /** @description The item quantity in each case, for case-packed items. Note that QuantityInCase multiplied by the number of cases in the inbound shipment equals Quantity. Also note that all of the boxes of an inbound shipment must either be case packed or individually packed. For that reason, when you submit the createInboundShipmentPlan operation, the value of QuantityInCase must be provided for every item in the shipment or for none of the items in the shipment. */
        QuantityInCase?: definitions["Quantity"];
        PrepDetailsList?: definitions["PrepDetailsList"];
    };
    InboundShipmentPlanRequestItemList: definitions["InboundShipmentPlanRequestItem"][];
    /** @description How the seller intends to provide box contents information for a shipment. */
    IntendedBoxContentsSource: "NONE" | "FEED" | "2D_BARCODE";
    InvalidASIN: {
        /** @description The Amazon Standard Identification Number (ASIN) of the item. */
        ASIN?: string;
        /** @description The reason that the ASIN is invalid. */
        ErrorReason?: definitions["ErrorReason"];
    };
    /** @description A list of invalid ASIN values and the reasons they are invalid. */
    InvalidASINList: definitions["InvalidASIN"][];
    InvalidSKU: {
        /** @description The seller SKU of the item. */
        SellerSKU?: string;
        /** @description The reason why the seller SKU is invalid. */
        ErrorReason?: definitions["ErrorReason"];
    };
    /** @description A list of invalid SKU values and the reason they are invalid. */
    InvalidSKUList: definitions["InvalidSKU"][];
    /** @description The preference for label preparation for an inbound shipment. */
    LabelPrepPreference: "SELLER_LABEL" | "AMAZON_LABEL_ONLY" | "AMAZON_LABEL_PREFERRED";
    /** @description The type of label preparation that is required for the inbound shipment. */
    LabelPrepType: "NO_LABEL" | "SELLER_LABEL" | "AMAZON_LABEL";
    GetShipmentItemsResult: {
        /** @description A list of item information for an inbound shipment. */
        ItemData?: definitions["InboundShipmentItemList"];
        /** @description When present and not empty, pass this string token in the next request to return the next response page. */
        NextToken?: string;
    };
    /** @description The response schema for the getShipmentItems operation. */
    GetShipmentItemsResponse: {
        /** @description The payload for the getShipmentItems operation. */
        payload?: definitions["GetShipmentItemsResult"];
        errors?: definitions["ErrorList"];
    };
    GetShipmentsResult: {
        /** @description Information about your inbound shipments. */
        ShipmentData?: definitions["InboundShipmentList"];
        /** @description When present and not empty, pass this string token in the next request to return the next response page. */
        NextToken?: string;
    };
    /** @description The response schema for the getShipments operation. */
    GetShipmentsResponse: {
        /** @description The payload for the getShipments operation. */
        payload?: definitions["GetShipmentsResult"];
        errors?: definitions["ErrorList"];
    };
    /** @description Information that you provide to Amazon about a Less Than Truckload/Full Truckload (LTL/FTL) shipment by a carrier that has not partnered with Amazon. */
    NonPartneredLtlDataInput: {
        /** @description The carrier that you are using for the inbound shipment. */
        CarrierName: string;
        ProNumber: definitions["ProNumber"];
    };
    /** @description Information returned by Amazon about a Less Than Truckload/Full Truckload (LTL/FTL) shipment shipped by a carrier that has not partnered with Amazon. */
    NonPartneredLtlDataOutput: {
        /** @description The carrier that you are using for the inbound shipment. */
        CarrierName: string;
        ProNumber: definitions["ProNumber"];
    };
    /** @description Information that you provide to Amazon about a Small Parcel shipment shipped by a carrier that has not partnered with Amazon. */
    NonPartneredSmallParcelDataInput: {
        /** @description The carrier that you are using for the inbound shipment. */
        CarrierName: string;
        PackageList: definitions["NonPartneredSmallParcelPackageInputList"];
    };
    /** @description Information returned by Amazon about a Small Parcel shipment by a carrier that has not partnered with Amazon. */
    NonPartneredSmallParcelDataOutput: {
        PackageList: definitions["NonPartneredSmallParcelPackageOutputList"];
    };
    /** @description The tracking number of the package, provided by the carrier. */
    NonPartneredSmallParcelPackageInput: {
        TrackingId: definitions["TrackingId"];
    };
    /** @description A list of package tracking information. */
    NonPartneredSmallParcelPackageInputList: definitions["NonPartneredSmallParcelPackageInput"][];
    /** @description Carrier, tracking number, and status information for the package. */
    NonPartneredSmallParcelPackageOutput: {
        /** @description The carrier that you are using for the inbound shipment. */
        CarrierName: string;
        TrackingId: definitions["TrackingId"];
        PackageStatus: definitions["PackageStatus"];
    };
    /** @description A list of packages, including carrier, tracking number, and status information for each package. */
    NonPartneredSmallParcelPackageOutputList: definitions["NonPartneredSmallParcelPackageOutput"][];
    /** @description The shipment status of the package. */
    PackageStatus: "SHIPPED" | "IN_TRANSIT" | "DELIVERED" | "CHECKED_IN" | "RECEIVING" | "CLOSED" | "DELETED";
    /** @description Pallet information. */
    Pallet: {
        /** @description The dimensions of the pallet. Length and width must be 40 inches by 48 inches. Height must be less than or equal to 60 inches. */
        Dimensions: definitions["Dimensions"];
        /** @description The weight of the pallet. */
        Weight?: definitions["Weight"];
        /** @description Indicates whether pallets will be stacked when carrier arrives for pick-up. */
        IsStacked: boolean;
    };
    /** @description A list of pallet information. */
    PalletList: definitions["Pallet"][];
    /** @description The estimated shipping cost for a shipment using an Amazon-partnered carrier. */
    PartneredEstimate: {
        /** @description The amount that the Amazon-partnered carrier will charge to ship the inbound shipment. */
        Amount: definitions["Amount"];
        /**
         * @description The date in ISO 8601 date time format by which this estimate must be confirmed. After this date the estimate is no longer valid and cannot be confirmed.
         *
         * Returned only if the TransportStatus value of the inbound shipment is ESTIMATED.
         */
        ConfirmDeadline?: definitions["TimeStampStringType"];
        /**
         * @description The date in ISO 8601 date time format after which a confirmed transportation request can no longer be voided. This date is 24 hours after a Small Parcel shipment transportation request is confirmed or one hour after a Less Than Truckload/Full Truckload (LTL/FTL) shipment transportation request is confirmed. After the void deadline passes the seller's account will be charged for the shipping cost.
         *
         * Returned only if the TransportStatus value of the inbound shipment is CONFIRMED.
         */
        VoidDeadline?: definitions["TimeStampStringType"];
    };
    /** @description Information that is required by an Amazon-partnered carrier to ship a Less Than Truckload/Full Truckload (LTL/FTL) inbound shipment. */
    PartneredLtlDataInput: {
        /** @description Contact information for the person in the seller's organization who is responsible for the shipment. Used by the carrier if they have questions about the shipment. */
        Contact?: definitions["Contact"];
        /** @description The number of boxes in the shipment. */
        BoxCount?: definitions["UnsignedIntType"];
        SellerFreightClass?: definitions["SellerFreightClass"];
        /** @description The date that the shipment will be ready to be picked up by the carrier. */
        FreightReadyDate?: definitions["DateStringType"];
        PalletList?: definitions["PalletList"];
        /** @description The total weight of the shipment. */
        TotalWeight?: definitions["Weight"];
        /** @description The declaration of the total value of the inventory in the shipment. */
        SellerDeclaredValue?: definitions["Amount"];
    };
    /** @description Information returned by Amazon about a Less Than Truckload/Full Truckload (LTL/FTL) shipment by an Amazon-partnered carrier. */
    PartneredLtlDataOutput: {
        /** @description Contact information for the person in the seller's organization who is responsible for the shipment. Used by the carrier if they have questions about the shipment. */
        Contact: definitions["Contact"];
        /** @description The number of boxes in the shipment. */
        BoxCount: definitions["UnsignedIntType"];
        SellerFreightClass?: definitions["SellerFreightClass"];
        /** @description The date that the shipment will be ready to be picked up by the carrier. Must be in YYYY-MM-DD format. */
        FreightReadyDate: definitions["DateStringType"];
        PalletList: definitions["PalletList"];
        /** @description The total weight of the shipment. */
        TotalWeight: definitions["Weight"];
        /** @description Your declaration of the total value of the inventory in the shipment. */
        SellerDeclaredValue?: definitions["Amount"];
        /** @description Estimate by Amazon of the total value of the inventory in the shipment. */
        AmazonCalculatedValue?: definitions["Amount"];
        /** @description The estimated date that the shipment will be picked up by the carrier, in YYYY-MM-DD format. */
        PreviewPickupDate: definitions["DateStringType"];
        /** @description The estimated date that the shipment will be delivered to an Amazon fulfillment center, in YYYY-MM-DD format. */
        PreviewDeliveryDate: definitions["DateStringType"];
        /** @description The freight class of the shipment as estimated by Amazon if you did not include a freight class when you called the putTransportDetails operation. */
        PreviewFreightClass: definitions["SellerFreightClass"];
        /** @description A unique identifier created by Amazon that identifies this Amazon-partnered, Less Than Truckload/Full Truckload (LTL/FTL) shipment. */
        AmazonReferenceId: string;
        /** @description Indicates whether the bill of lading for the shipment is available. */
        IsBillOfLadingAvailable: boolean;
        /** @description The estimated shipping cost using an Amazon-partnered carrier. */
        PartneredEstimate?: definitions["PartneredEstimate"];
        /** @description The carrier for the inbound shipment. */
        CarrierName: string;
    };
    /** @description Information that is required by an Amazon-partnered carrier to ship a Small Parcel inbound shipment. */
    PartneredSmallParcelDataInput: {
        PackageList?: definitions["PartneredSmallParcelPackageInputList"];
        /** @description The Amazon-partnered carrier to use for the inbound shipment. **`CarrierName`** values in France (FR), Italy (IT), Spain (ES), the United Kingdom (UK), and the United States (US): `UNITED_PARCEL_SERVICE_INC`. <br> **`CarrierName`** values in Germany (DE): `DHL_STANDARD`,`UNITED_PARCEL_SERVICE_INC`. <br>Default: `UNITED_PARCEL_SERVICE_INC`. */
        CarrierName?: string;
    };
    /** @description Information returned by Amazon about a Small Parcel shipment by an Amazon-partnered carrier. */
    PartneredSmallParcelDataOutput: {
        PackageList: definitions["PartneredSmallParcelPackageOutputList"];
        PartneredEstimate?: definitions["PartneredEstimate"];
    };
    /** @description Dimension and weight information for the package. */
    PartneredSmallParcelPackageInput: {
        Dimensions: definitions["Dimensions"];
        Weight: definitions["Weight"];
    };
    /** @description A list of dimensions and weight information for packages. */
    PartneredSmallParcelPackageInputList: definitions["PartneredSmallParcelPackageInput"][];
    /** @description Dimension, weight, and shipping information for the package. */
    PartneredSmallParcelPackageOutput: {
        Dimensions: definitions["Dimensions"];
        Weight: definitions["Weight"];
        /** @description The carrier specified with a previous call to putTransportDetails. */
        CarrierName: string;
        TrackingId: definitions["TrackingId"];
        PackageStatus: definitions["PackageStatus"];
    };
    /** @description A list of packages, including shipping information from the Amazon-partnered carrier. */
    PartneredSmallParcelPackageOutputList: definitions["PartneredSmallParcelPackageOutput"][];
    /** @description Preparation instructions and who is responsible for the preparation. */
    PrepDetails: {
        PrepInstruction: definitions["PrepInstruction"];
        PrepOwner: definitions["PrepOwner"];
    };
    /** @description A list of preparation instructions and who is responsible for that preparation. */
    PrepDetailsList: definitions["PrepDetails"][];
    /** @description Item preparation instructions. */
    PrepGuidance: "ConsultHelpDocuments" | "NoAdditionalPrepRequired" | "SeePrepInstructionsList";
    /** @description Preparation instructions for shipping an item to Amazon's fulfillment network. For more information about preparing items for shipment to Amazon's fulfillment network, see the Seller Central Help for your marketplace. */
    PrepInstruction: "Polybagging" | "BubbleWrapping" | "Taping" | "BlackShrinkWrapping" | "Labeling" | "HangGarment" | "SetCreation" | "Boxing" | "RemoveFromHanger" | "Debundle" | "SuffocationStickering" | "CapSealing" | "SetStickering" | "BlankStickering" | "NoPrep";
    /** @description A list of preparation instructions to help with item sourcing decisions. */
    PrepInstructionList: definitions["PrepInstruction"][];
    /** @description Indicates who will prepare the item. */
    PrepOwner: "AMAZON" | "SELLER";
    /** @description The PRO number ("progressive number" or "progressive ID") assigned to the shipment by the carrier. */
    ProNumber: string;
    /** @description The request schema for a putTransportDetails operation. */
    PutTransportDetailsRequest: {
        /** @description Indicates whether a putTransportDetails request is for an Amazon-partnered carrier. */
        IsPartnered: boolean;
        ShipmentType: definitions["ShipmentType"];
        /** @description Information required to create an Amazon-partnered carrier shipping estimate, or to alert the Amazon fulfillment center to the arrival of an inbound shipment by a non-Amazon-partnered carrier. */
        TransportDetails: definitions["TransportDetailInput"];
    };
    /** @description Workflow status for a shipment with an Amazon-partnered carrier. */
    PutTransportDetailsResponse: {
        /** @description The payload for the putTransportDetails operation. */
        payload?: definitions["CommonTransportResult"];
        errors?: definitions["ErrorList"];
    };
    /**
     * Format: int32
     * @description The item quantity.
     */
    Quantity: number;
    /** @description Reasons why a given seller SKU is not recommended for shipment to Amazon's fulfillment network. */
    SKUInboundGuidance: {
        /** @description The seller SKU of the item. */
        SellerSKU: string;
        /** @description The Amazon Standard Identification Number (ASIN) of the item. */
        ASIN: string;
        /** @description Specific inbound guidance for an item. */
        InboundGuidance: definitions["InboundGuidance"];
        /** @description A list of reasons for the current inbound guidance for this item. */
        GuidanceReasonList?: definitions["GuidanceReasonList"];
    };
    /** @description A list of SKU inbound guidance information. */
    SKUInboundGuidanceList: definitions["SKUInboundGuidance"][];
    /** @description Labeling requirements and item preparation instructions to help you prepare items for shipment to Amazon's fulfillment network. */
    SKUPrepInstructions: {
        /** @description The seller SKU of the item. */
        SellerSKU?: string;
        /** @description The Amazon Standard Identification Number (ASIN) of the item. */
        ASIN?: string;
        BarcodeInstruction?: definitions["BarcodeInstruction"];
        PrepGuidance?: definitions["PrepGuidance"];
        PrepInstructionList?: definitions["PrepInstructionList"];
        AmazonPrepFeesDetailsList?: definitions["AmazonPrepFeesDetailsList"];
    };
    /** @description A list of SKU labeling requirements and item preparation instructions. */
    SKUPrepInstructionsList: definitions["SKUPrepInstructions"][];
    /** @description The freight class of the shipment. For information about determining the freight class, contact the carrier. */
    SellerFreightClass: "50" | "55" | "60" | "65" | "70" | "77.5" | "85" | "92.5" | "100" | "110" | "125" | "150" | "175" | "200" | "250" | "300" | "400" | "500";
    /** @description Indicates the status of the inbound shipment. When used with the createInboundShipment operation, WORKING is the only valid value. When used with the updateInboundShipment operation, possible values are WORKING, SHIPPED or CANCELLED. */
    ShipmentStatus: "WORKING" | "SHIPPED" | "RECEIVING" | "CANCELLED" | "DELETED" | "CLOSED" | "ERROR" | "IN_TRANSIT" | "DELIVERED" | "CHECKED_IN";
    /** @description Specifies the carrier shipment type in a putTransportDetails request. */
    ShipmentType: "SP" | "LTL";
    /** Format: date-time */
    TimeStampStringType: string;
    /** @description The tracking number of the package, provided by the carrier. */
    TrackingId: string;
    /** @description Inbound shipment information, including carrier details, shipment status, and the workflow status for a request for shipment with an Amazon-partnered carrier. */
    TransportContent: {
        TransportHeader: definitions["TransportHeader"];
        TransportDetails: definitions["TransportDetailOutput"];
        TransportResult: definitions["TransportResult"];
    };
    /** @description Information required to create an Amazon-partnered carrier shipping estimate, or to alert the Amazon fulfillment center to the arrival of an inbound shipment by a non-Amazon-partnered carrier. */
    TransportDetailInput: {
        PartneredSmallParcelData?: definitions["PartneredSmallParcelDataInput"];
        NonPartneredSmallParcelData?: definitions["NonPartneredSmallParcelDataInput"];
        PartneredLtlData?: definitions["PartneredLtlDataInput"];
        NonPartneredLtlData?: definitions["NonPartneredLtlDataInput"];
    };
    /** @description Inbound shipment information, including carrier details and shipment status. */
    TransportDetailOutput: {
        PartneredSmallParcelData?: definitions["PartneredSmallParcelDataOutput"];
        NonPartneredSmallParcelData?: definitions["NonPartneredSmallParcelDataOutput"];
        PartneredLtlData?: definitions["PartneredLtlDataOutput"];
        NonPartneredLtlData?: definitions["NonPartneredLtlDataOutput"];
    };
    /** @description The shipping identifier, information about whether the shipment is by an Amazon-partnered carrier, and information about whether the shipment is Small Parcel or Less Than Truckload/Full Truckload (LTL/FTL). */
    TransportHeader: {
        /** @description The Amazon seller identifier. */
        SellerId: string;
        /** @description A shipment identifier originally returned by the createInboundShipmentPlan operation. */
        ShipmentId: string;
        /**
         * @description Indicates whether a putTransportDetails request is for a partnered carrier.
         *
         * Possible values:
         *
         * * true – Request is for an Amazon-partnered carrier.
         *
         * * false – Request is for a non-Amazon-partnered carrier.
         */
        IsPartnered: boolean;
        ShipmentType: definitions["ShipmentType"];
    };
    /** @description The workflow status for a shipment with an Amazon-partnered carrier. */
    TransportResult: {
        TransportStatus: definitions["TransportStatus"];
        /** @description An error code that identifies the type of error that occured. */
        ErrorCode?: string;
        /** @description A message that describes the error condition. */
        ErrorDescription?: string;
    };
    /** @description Indicates the status of the Amazon-partnered carrier shipment. */
    TransportStatus: "WORKING" | "ESTIMATING" | "ESTIMATED" | "ERROR_ON_ESTIMATING" | "CONFIRMING" | "CONFIRMED" | "ERROR_ON_CONFIRMING" | "VOIDING" | "VOIDED" | "ERROR_IN_VOIDING" | "ERROR";
    /** @description Indicates the unit of measurement. */
    UnitOfMeasurement: "inches" | "centimeters";
    /** @description Indicates the unit of weight. */
    UnitOfWeight: "pounds" | "kilograms";
    /** Format: int64 */
    UnsignedIntType: number;
    /** @description The response schema for the voidTransport operation. */
    VoidTransportResponse: {
        /** @description The payload for the voidTransport operation. */
        payload?: definitions["CommonTransportResult"];
        errors?: definitions["ErrorList"];
    };
    /** @description The weight of the package. */
    Weight: {
        /** @description The weight value. */
        Value: definitions["BigDecimalType"];
        Unit: definitions["UnitOfWeight"];
    };
}
export interface operations {
    /**
     * Returns information that lets a seller know if Amazon recommends sending an item to a given marketplace. In some cases, Amazon provides guidance for why a given SellerSKU or ASIN is not recommended for shipment to Amazon's fulfillment network. Sellers may still ship items that are not recommended, at their discretion.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2 | 30 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    getInboundGuidance: {
        parameters: {
            query: {
                /** A marketplace identifier. Specifies the marketplace where the product would be stored. */
                MarketplaceId: string;
                /** A list of SellerSKU values. Used to identify items for which you want inbound guidance for shipment to Amazon's fulfillment network. Note: SellerSKU is qualified by the SellerId, which is included with every Selling Partner API operation that you submit. If you specify a SellerSKU that identifies a variation parent ASIN, this operation returns an error. A variation parent ASIN represents a generic product that cannot be sold. Variation child ASINs represent products that have specific characteristics (such as size and color) and can be sold. */
                SellerSKUList?: string[];
                /** A list of ASIN values. Used to identify items for which you want inbound guidance for shipment to Amazon's fulfillment network. Note: If you specify a ASIN that identifies a variation parent ASIN, this operation returns an error. A variation parent ASIN represents a generic product that cannot be sold. Variation child ASINs represent products that have specific characteristics (such as size and color) and can be sold. */
                ASINList?: string[];
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["GetInboundGuidanceResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["GetInboundGuidanceResponse"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["GetInboundGuidanceResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["GetInboundGuidanceResponse"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["GetInboundGuidanceResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["GetInboundGuidanceResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["GetInboundGuidanceResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["GetInboundGuidanceResponse"];
            };
        };
    };
    /**
     * Returns one or more inbound shipment plans, which provide the information you need to create one or more inbound shipments for a set of items that you specify. Multiple inbound shipment plans might be required so that items can be optimally placed in Amazon's fulfillment network—for example, positioning inventory closer to the customer. Alternatively, two inbound shipment plans might be created with the same Amazon fulfillment center destination if the two shipment plans require different processing—for example, items that require labels must be shipped separately from stickerless, commingled inventory.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2 | 30 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    createInboundShipmentPlan: {
        parameters: {
            body: {
                body: definitions["CreateInboundShipmentPlanRequest"];
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["CreateInboundShipmentPlanResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["CreateInboundShipmentPlanResponse"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["CreateInboundShipmentPlanResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["CreateInboundShipmentPlanResponse"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["CreateInboundShipmentPlanResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["CreateInboundShipmentPlanResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["CreateInboundShipmentPlanResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["CreateInboundShipmentPlanResponse"];
            };
        };
    };
    /**
     * Updates or removes items from the inbound shipment identified by the specified shipment identifier. Adding new items is not supported.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2 | 30 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    updateInboundShipment: {
        parameters: {
            body: {
                body: definitions["InboundShipmentRequest"];
            };
            path: {
                /** A shipment identifier originally returned by the createInboundShipmentPlan operation. */
                shipmentId: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["InboundShipmentResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["InboundShipmentResponse"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["InboundShipmentResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["InboundShipmentResponse"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["InboundShipmentResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["InboundShipmentResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["InboundShipmentResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["InboundShipmentResponse"];
            };
        };
    };
    /**
     * Returns a new inbound shipment based on the specified shipmentId that was returned by the createInboundShipmentPlan operation.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2 | 30 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    createInboundShipment: {
        parameters: {
            body: {
                body: definitions["InboundShipmentRequest"];
            };
            path: {
                /** A shipment identifier originally returned by the createInboundShipmentPlan operation. */
                shipmentId: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["InboundShipmentResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["InboundShipmentResponse"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["InboundShipmentResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["InboundShipmentResponse"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["InboundShipmentResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["InboundShipmentResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["InboundShipmentResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["InboundShipmentResponse"];
            };
        };
    };
    /**
     * Returns pre-order information, including dates, that a seller needs before confirming a shipment for pre-order.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2 | 30 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    getPreorderInfo: {
        parameters: {
            path: {
                /** A shipment identifier originally returned by the createInboundShipmentPlan operation. */
                shipmentId: string;
            };
            query: {
                /** A marketplace identifier. Specifies the marketplace the shipment is tied to. */
                MarketplaceId: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["GetPreorderInfoResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["GetPreorderInfoResponse"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["GetPreorderInfoResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["GetPreorderInfoResponse"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["GetPreorderInfoResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["GetPreorderInfoResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["GetPreorderInfoResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["GetPreorderInfoResponse"];
            };
        };
    };
    /**
     * Returns information needed to confirm a shipment for pre-order. Call this operation after calling the getPreorderInfo operation to get the NeedByDate value and other pre-order information about the shipment.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2 | 30 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    confirmPreorder: {
        parameters: {
            path: {
                /** A shipment identifier originally returned by the createInboundShipmentPlan operation. */
                shipmentId: string;
            };
            query: {
                /** Date that the shipment must arrive at the Amazon fulfillment center to avoid delivery promise breaks for pre-ordered items. Must be in YYYY-MM-DD format. The response to the getPreorderInfo operation returns this value. */
                NeedByDate: string;
                /** A marketplace identifier. Specifies the marketplace the shipment is tied to. */
                MarketplaceId: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["ConfirmPreorderResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["ConfirmPreorderResponse"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["ConfirmPreorderResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["ConfirmPreorderResponse"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["ConfirmPreorderResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["ConfirmPreorderResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["ConfirmPreorderResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["ConfirmPreorderResponse"];
            };
        };
    };
    /**
     * Returns labeling requirements and item preparation instructions to help prepare items for shipment to Amazon's fulfillment network.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2 | 30 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    getPrepInstructions: {
        parameters: {
            query: {
                /** The country code of the country to which the items will be shipped. Note that labeling requirements and item preparation instructions can vary by country. */
                ShipToCountryCode: string;
                /**
                 * A list of SellerSKU values. Used to identify items for which you want labeling requirements and item preparation instructions for shipment to Amazon's fulfillment network. The SellerSKU is qualified by the Seller ID, which is included with every call to the Seller Partner API.
                 *
                 * Note: Include seller SKUs that you have used to list items on Amazon's retail website. If you include a seller SKU that you have never used to list an item on Amazon's retail website, the seller SKU is returned in the InvalidSKUList property in the response.
                 */
                SellerSKUList?: string[];
                /**
                 * A list of ASIN values. Used to identify items for which you want item preparation instructions to help with item sourcing decisions.
                 *
                 * Note: ASINs must be included in the product catalog for at least one of the marketplaces that the seller  participates in. Any ASIN that is not included in the product catalog for at least one of the marketplaces that the seller participates in is returned in the InvalidASINList property in the response. You can find out which marketplaces a seller participates in by calling the getMarketplaceParticipations operation in the Selling Partner API for Sellers.
                 */
                ASINList?: string[];
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["GetPrepInstructionsResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["GetPrepInstructionsResponse"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["GetPrepInstructionsResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["GetPrepInstructionsResponse"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["GetPrepInstructionsResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["GetPrepInstructionsResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["GetPrepInstructionsResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["GetPrepInstructionsResponse"];
            };
        };
    };
    /**
     * Returns current transportation information about an inbound shipment.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2 | 30 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    getTransportDetails: {
        parameters: {
            path: {
                /** A shipment identifier originally returned by the createInboundShipmentPlan operation. */
                shipmentId: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["GetTransportDetailsResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["GetTransportDetailsResponse"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["GetTransportDetailsResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["GetTransportDetailsResponse"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["GetTransportDetailsResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["GetTransportDetailsResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["GetTransportDetailsResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["GetTransportDetailsResponse"];
            };
        };
    };
    /**
     * Sends transportation information to Amazon about an inbound shipment.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2 | 30 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    putTransportDetails: {
        parameters: {
            path: {
                /** A shipment identifier originally returned by the createInboundShipmentPlan operation. */
                shipmentId: string;
            };
            body: {
                body: definitions["PutTransportDetailsRequest"];
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["PutTransportDetailsResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["PutTransportDetailsResponse"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["PutTransportDetailsResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["PutTransportDetailsResponse"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["PutTransportDetailsResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["PutTransportDetailsResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["PutTransportDetailsResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["PutTransportDetailsResponse"];
            };
        };
    };
    /**
     * Cancels a previously-confirmed request to ship an inbound shipment using an Amazon-partnered carrier.
     *
     * To be successful, you must call this operation before the VoidDeadline date that is returned by the getTransportDetails operation.
     *
     * Important: The VoidDeadline date is 24 hours after you confirm a Small Parcel shipment transportation request or one hour after you confirm a Less Than Truckload/Full Truckload (LTL/FTL) shipment transportation request. After the void deadline passes, your account will be charged for the shipping cost.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2 | 30 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    voidTransport: {
        parameters: {
            path: {
                /** A shipment identifier originally returned by the createInboundShipmentPlan operation. */
                shipmentId: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["VoidTransportResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["VoidTransportResponse"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["VoidTransportResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["VoidTransportResponse"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["VoidTransportResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["VoidTransportResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["VoidTransportResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["VoidTransportResponse"];
            };
        };
    };
    /**
     * Initiates the process of estimating the shipping cost for an inbound shipment by an Amazon-partnered carrier.
     *
     * Prior to calling the estimateTransport operation, you must call the putTransportDetails operation to provide Amazon with the transportation information for the inbound shipment.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2 | 30 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    estimateTransport: {
        parameters: {
            path: {
                /** A shipment identifier originally returned by the createInboundShipmentPlan operation. */
                shipmentId: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["EstimateTransportResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["EstimateTransportResponse"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["EstimateTransportResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["EstimateTransportResponse"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["EstimateTransportResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["EstimateTransportResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["EstimateTransportResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["EstimateTransportResponse"];
            };
        };
    };
    /**
     * Confirms that the seller accepts the Amazon-partnered shipping estimate, agrees to allow Amazon to charge their account for the shipping cost, and requests that the Amazon-partnered carrier ship the inbound shipment.
     *
     * Prior to calling the confirmTransport operation, you should call the getTransportDetails operation to get the Amazon-partnered shipping estimate.
     *
     * Important: After confirming the transportation request, if the seller decides that they do not want the Amazon-partnered carrier to ship the inbound shipment, you can call the voidTransport operation to cancel the transportation request. Note that for a Small Parcel shipment, the seller has 24 hours after confirming a transportation request to void the transportation request. For a Less Than Truckload/Full Truckload (LTL/FTL) shipment, the seller has one hour after confirming a transportation request to void it. After the grace period has expired the seller's account will be charged for the shipping cost.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2 | 30 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    confirmTransport: {
        parameters: {
            path: {
                /** A shipment identifier originally returned by the createInboundShipmentPlan operation. */
                shipmentId: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["ConfirmTransportResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["ConfirmTransportResponse"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["ConfirmTransportResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["ConfirmTransportResponse"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["ConfirmTransportResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["ConfirmTransportResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["ConfirmTransportResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["ConfirmTransportResponse"];
            };
        };
    };
    /**
     * Returns package/pallet labels for faster and more accurate shipment processing at the Amazon fulfillment center.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2 | 30 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    getLabels: {
        parameters: {
            path: {
                /** A shipment identifier originally returned by the createInboundShipmentPlan operation. */
                shipmentId: string;
            };
            query: {
                /** The page type to use to print the labels. Submitting a PageType value that is not supported in your marketplace returns an error. */
                PageType: "PackageLabel_Letter_2" | "PackageLabel_Letter_4" | "PackageLabel_Letter_6" | "PackageLabel_Letter_6_CarrierLeft" | "PackageLabel_A4_2" | "PackageLabel_A4_4" | "PackageLabel_Plain_Paper" | "PackageLabel_Plain_Paper_CarrierBottom" | "PackageLabel_Thermal" | "PackageLabel_Thermal_Unified" | "PackageLabel_Thermal_NonPCP" | "PackageLabel_Thermal_No_Carrier_Rotation";
                /** The type of labels requested. */
                LabelType: "BARCODE_2D" | "UNIQUE" | "PALLET";
                /** The number of packages in the shipment. */
                NumberOfPackages?: number;
                /**
                 * A list of identifiers that specify packages for which you want package labels printed.
                 *
                 * Must match CartonId values previously passed using the FBA Inbound Shipment Carton Information Feed. If not, the operation returns the IncorrectPackageIdentifier error code.
                 */
                PackageLabelsToPrint?: string[];
                /** The number of pallets in the shipment. This returns four identical labels for each pallet. */
                NumberOfPallets?: number;
                /** The page size for paginating through the total packages' labels. This is a required parameter for Non-Partnered LTL Shipments. Max value:1000. */
                PageSize?: number;
                /** The page start index for paginating through the total packages' labels. This is a required parameter for Non-Partnered LTL Shipments. */
                PageStartIndex?: number;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["GetLabelsResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["GetLabelsResponse"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["GetLabelsResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["GetLabelsResponse"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["GetLabelsResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["GetLabelsResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["GetLabelsResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["GetLabelsResponse"];
            };
        };
    };
    /**
     * Returns a bill of lading for a Less Than Truckload/Full Truckload (LTL/FTL) shipment. The getBillOfLading operation returns PDF document data for printing a bill of lading for an Amazon-partnered Less Than Truckload/Full Truckload (LTL/FTL) inbound shipment.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2 | 30 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    getBillOfLading: {
        parameters: {
            path: {
                /** A shipment identifier originally returned by the createInboundShipmentPlan operation. */
                shipmentId: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["GetBillOfLadingResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["GetBillOfLadingResponse"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["GetBillOfLadingResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["GetBillOfLadingResponse"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["GetBillOfLadingResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["GetBillOfLadingResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["GetBillOfLadingResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["GetBillOfLadingResponse"];
            };
        };
    };
    /**
     * Returns a list of inbound shipments based on criteria that you specify.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2 | 30 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    getShipments: {
        parameters: {
            query: {
                /** A list of ShipmentStatus values. Used to select shipments with a current status that matches the status values that you specify. */
                ShipmentStatusList?: ("WORKING" | "READY_TO_SHIP" | "SHIPPED" | "RECEIVING" | "CANCELLED" | "DELETED" | "CLOSED" | "ERROR" | "IN_TRANSIT" | "DELIVERED" | "CHECKED_IN")[];
                /** A list of shipment IDs used to select the shipments that you want. If both ShipmentStatusList and ShipmentIdList are specified, only shipments that match both parameters are returned. */
                ShipmentIdList?: string[];
                /** A date used for selecting inbound shipments that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller. */
                LastUpdatedAfter?: string;
                /** A date used for selecting inbound shipments that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller. */
                LastUpdatedBefore?: string;
                /** Indicates whether shipments are returned using shipment information (by providing the ShipmentStatusList or ShipmentIdList parameters), using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or by using NextToken to continue returning items specified in a previous request. */
                QueryType: "SHIPMENT" | "DATE_RANGE" | "NEXT_TOKEN";
                /** A string token returned in the response to your previous request. */
                NextToken?: string;
                /** A marketplace identifier. Specifies the marketplace where the product would be stored. */
                MarketplaceId: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["GetShipmentsResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["GetShipmentsResponse"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["GetShipmentsResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["GetShipmentsResponse"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["GetShipmentsResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["GetShipmentsResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["GetShipmentsResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["GetShipmentsResponse"];
            };
        };
    };
    /**
     * Returns a list of items in a specified inbound shipment.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2 | 30 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    getShipmentItemsByShipmentId: {
        parameters: {
            path: {
                /** A shipment identifier used for selecting items in a specific inbound shipment. */
                shipmentId: string;
            };
            query: {
                /** A marketplace identifier. Specifies the marketplace where the product would be stored. */
                MarketplaceId: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["GetShipmentItemsResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["GetShipmentItemsResponse"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["GetShipmentItemsResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["GetShipmentItemsResponse"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["GetShipmentItemsResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["GetShipmentItemsResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["GetShipmentItemsResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["GetShipmentItemsResponse"];
            };
        };
    };
    /**
     * Returns a list of items in a specified inbound shipment, or a list of items that were updated within a specified time frame.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 2 | 30 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    getShipmentItems: {
        parameters: {
            query: {
                /** A date used for selecting inbound shipment items that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller. */
                LastUpdatedAfter?: string;
                /** A date used for selecting inbound shipment items that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller. */
                LastUpdatedBefore?: string;
                /** Indicates whether items are returned using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or using NextToken, which continues returning items specified in a previous request. */
                QueryType: "DATE_RANGE" | "NEXT_TOKEN";
                /** A string token returned in the response to your previous request. */
                NextToken?: string;
                /** A marketplace identifier. Specifies the marketplace where the product would be stored. */
                MarketplaceId: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["GetShipmentItemsResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["GetShipmentItemsResponse"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["GetShipmentItemsResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["GetShipmentItemsResponse"];
            };
            /** The specified resource does not exist. */
            404: {
                headers: {};
                schema: definitions["GetShipmentItemsResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["GetShipmentItemsResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["GetShipmentItemsResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["GetShipmentItemsResponse"];
            };
        };
    };
}
export interface external {
}

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    "/orders/v0/orders": {
        /**
         * Returns orders created or updated during the time frame indicated by the specified parameters. You can also apply a range of filtering criteria to narrow the list of orders returned. If NextToken is present, that will be used to retrieve the orders instead of other criteria.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 0.0167 | 20 |
         *
         * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         */
        get: operations["getOrders"];
    };
    "/orders/v0/orders/{orderId}": {
        /**
         * Returns the order that you specify.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 0.0167 | 20 |
         *
         * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         */
        get: operations["getOrder"];
    };
    "/orders/v0/orders/{orderId}/buyerInfo": {
        /**
         * Returns buyer information for the order that you specify.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 0.0167 | 20 |
         *
         * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         */
        get: operations["getOrderBuyerInfo"];
    };
    "/orders/v0/orders/{orderId}/address": {
        /**
         * Returns the shipping address for the order that you specify.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 0.0167 | 20 |
         *
         * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         */
        get: operations["getOrderAddress"];
    };
    "/orders/v0/orders/{orderId}/orderItems": {
        /**
         * Returns detailed order item information for the order that you specify. If NextToken is provided, it's used to retrieve the next page of order items.
         *
         * __Note__: When an order is in the Pending state (the order has been placed but payment has not been authorized), the getOrderItems operation does not return information about pricing, taxes, shipping charges, gift status or promotions for the order items in the order. After an order leaves the Pending state (this occurs when payment has been authorized) and enters the Unshipped, Partially Shipped, or Shipped state, the getOrderItems operation returns information about pricing, taxes, shipping charges, gift status and promotions for the order items in the order.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 0.5 | 30 |
         *
         * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         */
        get: operations["getOrderItems"];
    };
    "/orders/v0/orders/{orderId}/orderItems/buyerInfo": {
        /**
         * Returns buyer information for the order items in the order that you specify.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 0.5 | 30 |
         *
         * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         */
        get: operations["getOrderItemsBuyerInfo"];
    };
    "/orders/v0/orders/{orderId}/shipment": {
        /**
         * Update the shipment status for an order that you specify.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 5 | 15 |
         *
         * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         */
        post: operations["updateShipmentStatus"];
    };
    "/orders/v0/orders/{orderId}/regulatedInfo": {
        /**
         * Returns regulated information for the order that you specify.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 0.5 | 30 |
         *
         * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         */
        get: operations["getOrderRegulatedInfo"];
        /**
         * Updates (approves or rejects) the verification status of an order containing regulated products.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 0.5 | 30 |
         *
         * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         */
        patch: operations["updateVerificationStatus"];
    };
}
export interface definitions {
    /** @description The request body for the updateShipmentStatus operation. */
    UpdateShipmentStatusRequest: {
        marketplaceId: definitions["MarketplaceId"];
        shipmentStatus: definitions["ShipmentStatus"];
        orderItems?: definitions["OrderItems"];
    };
    /** @description The request body for the updateVerificationStatus operation. */
    UpdateVerificationStatusRequest: {
        /** @description The updated values of the VerificationStatus field. */
        regulatedOrderVerificationStatus: definitions["UpdateVerificationStatusRequestBody"];
    };
    /** @description The updated values of the VerificationStatus field. */
    UpdateVerificationStatusRequestBody: {
        /** @description The new verification status of the order. */
        status: definitions["VerificationStatus"];
        /** @description The identifier for the order's regulated information reviewer. */
        externalReviewerId: string;
        /** @description The unique identifier for the rejection reason used for rejecting the order's regulated information. Only required if the new status is rejected. */
        rejectionReasonId?: string;
    };
    /** @description The unobfuscated marketplace identifier. */
    MarketplaceId: string;
    /** @description The shipment status to apply. */
    ShipmentStatus: "ReadyForPickup" | "PickedUp" | "RefusedPickup";
    /** @description For partial shipment status updates, the list of order items and quantities to be updated. */
    OrderItems: {
        /** @description The unique identifier of the order item. */
        orderItemId?: string;
        /** @description The quantity for which to update the shipment status. */
        quantity?: number;
    }[];
    /** @description The error response schema for the UpdateShipmentStatus operation. */
    UpdateShipmentStatusErrorResponse: {
        /** @description One or more unexpected errors occurred during the UpdateShipmentStatus operation. */
        errors?: definitions["ErrorList"];
    };
    /** @description The error response schema for the UpdateVerificationStatus operation. */
    UpdateVerificationStatusErrorResponse: {
        /** @description One or more unexpected errors occurred during the UpdateVerificationStatus operation. */
        errors?: definitions["ErrorList"];
    };
    /** @description The response schema for the getOrders operation. */
    GetOrdersResponse: {
        /** @description The payload for the getOrders operation. */
        payload?: definitions["OrdersList"];
        /** @description One or more unexpected errors occurred during the getOrders operation. */
        errors?: definitions["ErrorList"];
    };
    /** @description The response schema for the getOrder operation. */
    GetOrderResponse: {
        /** @description The payload for the getOrder operation. */
        payload?: definitions["Order"];
        /** @description One or more unexpected errors occurred during the getOrder operation. */
        errors?: definitions["ErrorList"];
    };
    /** @description The response schema for the getOrderBuyerInfo operation. */
    GetOrderBuyerInfoResponse: {
        /** @description The payload for the getOrderBuyerInfo operation. */
        payload?: definitions["OrderBuyerInfo"];
        /** @description One or more unexpected errors occurred during the getOrderBuyerInfo operation. */
        errors?: definitions["ErrorList"];
    };
    /** @description The response schema for the getOrderRegulatedInfo operation. */
    GetOrderRegulatedInfoResponse: {
        /** @description The payload for the getOrderRegulatedInfo operation. */
        payload?: definitions["OrderRegulatedInfo"];
        /** @description One or more unexpected errors occurred during the getOrderRegulatedInfo operation. */
        errors?: definitions["ErrorList"];
    };
    /** @description The response schema for the getOrderAddress operation. */
    GetOrderAddressResponse: {
        /** @description The payload for the getOrderAddress operations. */
        payload?: definitions["OrderAddress"];
        /** @description One or more unexpected errors occurred during the getOrderAddress operation. */
        errors?: definitions["ErrorList"];
    };
    /** @description The response schema for the getOrderItems operation. */
    GetOrderItemsResponse: {
        /** @description The payload for the getOrderItems operation. */
        payload?: definitions["OrderItemsList"];
        /** @description One or more unexpected errors occurred during the getOrderItems operation. */
        errors?: definitions["ErrorList"];
    };
    /** @description The response schema for the getOrderItemsBuyerInfo operation. */
    GetOrderItemsBuyerInfoResponse: {
        /** @description The payload for the getOrderItemsBuyerInfo operation. */
        payload?: definitions["OrderItemsBuyerInfoList"];
        /** @description One or more unexpected errors occurred during the getOrderItemsBuyerInfo operation. */
        errors?: definitions["ErrorList"];
    };
    /** @description A list of orders along with additional information to make subsequent API calls. */
    OrdersList: {
        Orders: definitions["OrderList"];
        /** @description When present and not empty, pass this string token in the next request to return the next response page. */
        NextToken?: string;
        /** @description A date used for selecting orders that were last updated before (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. All dates must be in ISO 8601 format. */
        LastUpdatedBefore?: string;
        /** @description A date used for selecting orders created before (or at) a specified time. Only orders placed before the specified time are returned. The date must be in ISO 8601 format. */
        CreatedBefore?: string;
    };
    /** @description A list of orders. */
    OrderList: definitions["Order"][];
    /** @description Order information. */
    Order: {
        /** @description An Amazon-defined order identifier, in 3-7-7 format. */
        AmazonOrderId: string;
        /** @description A seller-defined order identifier. */
        SellerOrderId?: string;
        /** @description The date when the order was created. */
        PurchaseDate: string;
        /**
         * @description The date when the order was last updated.
         *
         * __Note__: LastUpdateDate is returned with an incorrect date for orders that were last updated before 2009-04-01.
         */
        LastUpdateDate: string;
        /** @description The current order status. */
        OrderStatus: "Pending" | "Unshipped" | "PartiallyShipped" | "Shipped" | "Canceled" | "Unfulfillable" | "InvoiceUnconfirmed" | "PendingAvailability";
        /** @description Whether the order was fulfilled by Amazon (AFN) or by the seller (MFN). */
        FulfillmentChannel?: "MFN" | "AFN";
        /** @description The sales channel of the first item in the order. */
        SalesChannel?: string;
        /** @description The order channel of the first item in the order. */
        OrderChannel?: string;
        /** @description The shipment service level of the order. */
        ShipServiceLevel?: string;
        /** @description The total charge for this order. */
        OrderTotal?: definitions["Money"];
        /** @description The number of items shipped. */
        NumberOfItemsShipped?: number;
        /** @description The number of items unshipped. */
        NumberOfItemsUnshipped?: number;
        /**
         * @description Information about sub-payment methods for a Cash On Delivery (COD) order.
         *
         * __Note__: For a COD order that is paid for using one sub-payment method, one PaymentExecutionDetailItem object is returned, with PaymentExecutionDetailItem/PaymentMethod = COD. For a COD order that is paid for using multiple sub-payment methods, two or more PaymentExecutionDetailItem objects are returned.
         */
        PaymentExecutionDetail?: definitions["PaymentExecutionDetailItemList"];
        /** @description The payment method for the order. This property is limited to Cash On Delivery (COD) and Convenience Store (CVS) payment methods. Unless you need the specific COD payment information provided by the PaymentExecutionDetailItem object, we recommend using the PaymentMethodDetails property to get payment method information. */
        PaymentMethod?: "COD" | "CVS" | "Other";
        /** @description A list of payment methods for the order. */
        PaymentMethodDetails?: definitions["PaymentMethodDetailItemList"];
        /** @description The identifier for the marketplace where the order was placed. */
        MarketplaceId?: string;
        /**
         * @description The shipment service level category of the order.
         *
         * Possible values: Expedited, FreeEconomy, NextDay, SameDay, SecondDay, Scheduled, Standard.
         */
        ShipmentServiceLevelCategory?: string;
        /** @description The status of the Amazon Easy Ship order. This property is included only for Amazon Easy Ship orders. */
        EasyShipShipmentStatus?: definitions["EasyShipShipmentStatus"];
        /** @description Custom ship label for Checkout by Amazon (CBA). */
        CbaDisplayableShippingLabel?: string;
        /** @description The type of the order. */
        OrderType?: "StandardOrder" | "LongLeadTimeOrder" | "Preorder" | "BackOrder" | "SourcingOnDemandOrder";
        /**
         * @description The start of the time period within which you have committed to ship the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders.
         *
         * __Note__: EarliestShipDate might not be returned for orders placed before February 1, 2013.
         */
        EarliestShipDate?: string;
        /**
         * @description The end of the time period within which you have committed to ship the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders.
         *
         * __Note__: LatestShipDate might not be returned for orders placed before February 1, 2013.
         */
        LatestShipDate?: string;
        /** @description The start of the time period within which you have committed to fulfill the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders. */
        EarliestDeliveryDate?: string;
        /** @description The end of the time period within which you have committed to fulfill the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders that do not have a PendingAvailability, Pending, or Canceled status. */
        LatestDeliveryDate?: string;
        /** @description When true, the order is an Amazon Business order. An Amazon Business order is an order where the buyer is a Verified Business Buyer. */
        IsBusinessOrder?: boolean;
        /** @description When true, the order is a seller-fulfilled Amazon Prime order. */
        IsPrime?: boolean;
        /** @description When true, the order has a Premium Shipping Service Level Agreement. For more information about Premium Shipping orders, see "Premium Shipping Options" in the Seller Central Help for your marketplace. */
        IsPremiumOrder?: boolean;
        /** @description When true, the order is a GlobalExpress order. */
        IsGlobalExpressEnabled?: boolean;
        /** @description The order ID value for the order that is being replaced. Returned only if IsReplacementOrder = true. */
        ReplacedOrderId?: string;
        /** @description When true, this is a replacement order. */
        IsReplacementOrder?: boolean;
        /** @description Indicates the date by which the seller must respond to the buyer with an estimated ship date. Returned only for Sourcing on Demand orders. */
        PromiseResponseDueDate?: string;
        /** @description When true, the estimated ship date is set for the order. Returned only for Sourcing on Demand orders. */
        IsEstimatedShipDateSet?: boolean;
        /** @description When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to customers who would not otherwise purchase from a third-party seller. */
        IsSoldByAB?: boolean;
        /** @description When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to customers who would not otherwise purchase from a third-party seller. */
        IsIBA?: boolean;
        /** @description The recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location. */
        DefaultShipFromLocationAddress?: definitions["Address"];
        /** @description The buyer's invoicing preference. Available only in the TR marketplace. */
        BuyerInvoicePreference?: "INDIVIDUAL" | "BUSINESS";
        /** @description Contains the business invoice tax information. */
        BuyerTaxInformation?: definitions["BuyerTaxInformation"];
        /** @description Contains the instructions about the fulfillment like where should it be fulfilled from. */
        FulfillmentInstruction?: definitions["FulfillmentInstruction"];
        /** @description When true, this order is marked to be picked up from a store rather than delivered. */
        IsISPU?: boolean;
        /** @description When true, this order is marked to be delivered to an Access Point. The access location is chosen by the customer. Access Points include Amazon Hub Lockers, Amazon Hub Counters, and pickup points operated by carriers. */
        IsAccessPointOrder?: boolean;
        /** @description Tax information about the marketplace. */
        MarketplaceTaxInfo?: definitions["MarketplaceTaxInfo"];
        /** @description The seller’s friendly name registered in the marketplace. */
        SellerDisplayName?: string;
        ShippingAddress?: definitions["Address"];
        BuyerInfo?: definitions["BuyerInfo"];
        /** @description Contains information regarding the Shipping Settings Automaton program, such as whether the order's shipping settings were generated automatically, and what those settings are. */
        AutomatedShippingSettings?: definitions["AutomatedShippingSettings"];
        /** @description Whether the order contains regulated items which may require additional approval steps before being fulfilled. */
        HasRegulatedItems?: boolean;
        /** @description The status of the electronic invoice. */
        ElectronicInvoiceStatus?: definitions["ElectronicInvoiceStatus"];
    };
    /** @description Buyer information for an order. */
    OrderBuyerInfo: {
        /** @description An Amazon-defined order identifier, in 3-7-7 format. */
        AmazonOrderId: string;
        /** @description The anonymized email address of the buyer. */
        BuyerEmail?: string;
        /** @description The buyer name or the recipient name. */
        BuyerName?: string;
        /** @description The county of the buyer. */
        BuyerCounty?: string;
        /** @description Tax information about the buyer. */
        BuyerTaxInfo?: definitions["BuyerTaxInfo"];
        /** @description The purchase order (PO) number entered by the buyer at checkout. Returned only for orders where the buyer entered a PO number at checkout. */
        PurchaseOrderNumber?: string;
    };
    /** @description The order's regulated information along with its verification status. */
    OrderRegulatedInfo: {
        /** @description An Amazon-defined order identifier, in 3-7-7 format. */
        AmazonOrderId: string;
        /** @description The regulated information collected during purchase and used to verify the order. */
        RegulatedInformation: definitions["RegulatedInformation"];
        /** @description When true, the order requires attaching a dosage information label when shipped. */
        RequiresDosageLabel: boolean;
        /** @description The order's verification status. */
        RegulatedOrderVerificationStatus: definitions["RegulatedOrderVerificationStatus"];
    };
    /** @description The verification status of the order along with associated approval or rejection metadata. */
    RegulatedOrderVerificationStatus: {
        /** @description The verification status of the order. */
        Status: definitions["VerificationStatus"];
        /** @description When true, the regulated information provided in the order requires a review by the merchant. */
        RequiresMerchantAction: boolean;
        /** @description A list of valid rejection reasons that may be used to reject the order's regulated information. */
        ValidRejectionReasons: definitions["RejectionReason"][];
        /** @description The reason for rejecting the order's regulated information. Not present if the order isn't rejected. */
        RejectionReason?: definitions["RejectionReason"];
        /** @description The date the order was reviewed. In ISO 8601 date time format. */
        ReviewDate?: string;
        /** @description The identifier for the order's regulated information reviewer. */
        ExternalReviewerId?: string;
    };
    /** @description The reason for rejecting the order's regulated information. Not present if the order isn't rejected. */
    RejectionReason: {
        /** @description The unique identifier for the rejection reason. */
        RejectionReasonId: string;
        /** @description The description of this rejection reason. */
        RejectionReasonDescription: string;
    };
    /** @description The verification status of the order. */
    VerificationStatus: "Pending" | "Approved" | "Rejected" | "Expired" | "Cancelled";
    /** @description The regulated information collected during purchase and used to verify the order. */
    RegulatedInformation: {
        /** @description A list of regulated information fields as collected from the regulatory form. */
        Fields: definitions["RegulatedInformationField"][];
    };
    /** @description A field collected from the regulatory form. */
    RegulatedInformationField: {
        /** @description The unique identifier for the field. */
        FieldId: string;
        /** @description The name for the field. */
        FieldLabel: string;
        /** @description The type of field. */
        FieldType: "Text" | "FileAttachment";
        /** @description The content of the field as collected in regulatory form. Note that FileAttachment type fields will contain a URL to download the attachment here. */
        FieldValue: string;
    };
    /** @description The shipping address for the order. */
    OrderAddress: {
        /** @description An Amazon-defined order identifier, in 3-7-7 format. */
        AmazonOrderId: string;
        ShippingAddress?: definitions["Address"];
    };
    /** @description The shipping address for the order. */
    Address: {
        /** @description The name. */
        Name: string;
        /** @description The street address. */
        AddressLine1?: string;
        /** @description Additional street address information, if required. */
        AddressLine2?: string;
        /** @description Additional street address information, if required. */
        AddressLine3?: string;
        /** @description The city */
        City?: string;
        /** @description The county. */
        County?: string;
        /** @description The district. */
        District?: string;
        /** @description The state or region. */
        StateOrRegion?: string;
        /** @description The municipality. */
        Municipality?: string;
        /** @description The postal code. */
        PostalCode?: string;
        /** @description The country code. A two-character country code, in ISO 3166-1 alpha-2 format. */
        CountryCode?: string;
        /** @description The phone number. Not returned for Fulfillment by Amazon (FBA) orders. */
        Phone?: string;
        /** @description The address type of the shipping address. */
        AddressType?: "Residential" | "Commercial";
    };
    /** @description The monetary value of the order. */
    Money: {
        /** @description The three-digit currency code. In ISO 4217 format. */
        CurrencyCode?: string;
        /** @description The currency amount. */
        Amount?: string;
    };
    /** @description A list of payment method detail items. */
    PaymentMethodDetailItemList: string[];
    /** @description A list of payment execution detail items. */
    PaymentExecutionDetailItemList: definitions["PaymentExecutionDetailItem"][];
    /** @description Information about a sub-payment method used to pay for a COD order. */
    PaymentExecutionDetailItem: {
        Payment: definitions["Money"];
        /**
         * @description A sub-payment method for a COD order.
         *
         * Possible values:
         *
         * * COD - Cash On Delivery.
         *
         * * GC - Gift Card.
         *
         * * PointsAccount - Amazon Points.
         */
        PaymentMethod: string;
    };
    /** @description Tax information about the buyer. */
    BuyerTaxInfo: {
        /** @description The legal name of the company. */
        CompanyLegalName?: string;
        /** @description The country or region imposing the tax. */
        TaxingRegion?: string;
        /** @description A list of tax classifications that apply to the order. */
        TaxClassifications?: definitions["TaxClassification"][];
    };
    /** @description Tax information about the marketplace. */
    MarketplaceTaxInfo: {
        /** @description A list of tax classifications that apply to the order. */
        TaxClassifications?: definitions["TaxClassification"][];
    };
    /** @description The tax classification for the order. */
    TaxClassification: {
        /** @description The type of tax. */
        Name?: string;
        /** @description The buyer's tax identifier. */
        Value?: string;
    };
    /** @description The order items list along with the order ID. */
    OrderItemsList: {
        OrderItems: definitions["OrderItemList"];
        /** @description When present and not empty, pass this string token in the next request to return the next response page. */
        NextToken?: string;
        /** @description An Amazon-defined order identifier, in 3-7-7 format. */
        AmazonOrderId: string;
    };
    /** @description A list of order items. */
    OrderItemList: definitions["OrderItem"][];
    /** @description A single order item. */
    OrderItem: {
        /** @description The Amazon Standard Identification Number (ASIN) of the item. */
        ASIN: string;
        /** @description The seller stock keeping unit (SKU) of the item. */
        SellerSKU?: string;
        /** @description An Amazon-defined order item identifier. */
        OrderItemId: string;
        /** @description The name of the item. */
        Title?: string;
        /** @description The number of items in the order. */
        QuantityOrdered: number;
        /** @description The number of items shipped. */
        QuantityShipped?: number;
        /** @description Product information for the item. */
        ProductInfo?: definitions["ProductInfoDetail"];
        /** @description The number and value of Amazon Points granted with the purchase of an item. */
        PointsGranted?: definitions["PointsGrantedDetail"];
        /** @description The selling price of the order item. Note that an order item is an item and a quantity. This means that the value of ItemPrice is equal to the selling price of the item multiplied by the quantity ordered. Note that ItemPrice excludes ShippingPrice and GiftWrapPrice. */
        ItemPrice?: definitions["Money"];
        /** @description The shipping price of the item. */
        ShippingPrice?: definitions["Money"];
        /** @description The tax on the item price. */
        ItemTax?: definitions["Money"];
        /** @description The tax on the shipping price. */
        ShippingTax?: definitions["Money"];
        /** @description The discount on the shipping price. */
        ShippingDiscount?: definitions["Money"];
        /** @description The tax on the discount on the shipping price. */
        ShippingDiscountTax?: definitions["Money"];
        /** @description The total of all promotional discounts in the offer. */
        PromotionDiscount?: definitions["Money"];
        /** @description The tax on the total of all promotional discounts in the offer. */
        PromotionDiscountTax?: definitions["Money"];
        PromotionIds?: definitions["PromotionIdList"];
        /** @description The fee charged for COD service. */
        CODFee?: definitions["Money"];
        /** @description The discount on the COD fee. */
        CODFeeDiscount?: definitions["Money"];
        /** @description When true, the item is a gift. */
        IsGift?: boolean;
        /** @description The condition of the item as described by the seller. */
        ConditionNote?: string;
        /**
         * @description The condition of the item.
         *
         * Possible values: New, Used, Collectible, Refurbished, Preorder, Club.
         */
        ConditionId?: string;
        /**
         * @description The subcondition of the item.
         *
         * Possible values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, Any, Other.
         */
        ConditionSubtypeId?: string;
        /** @description The start date of the scheduled delivery window in the time zone of the order destination. In ISO 8601 date time format. */
        ScheduledDeliveryStartDate?: string;
        /** @description The end date of the scheduled delivery window in the time zone of the order destination. In ISO 8601 date time format. */
        ScheduledDeliveryEndDate?: string;
        /**
         * @description Indicates that the selling price is a special price that is available only for Amazon Business orders. For more information about the Amazon Business Seller Program, see the [Amazon Business website](https://www.amazon.com/b2b/info/amazon-business).
         *
         * Possible values: BusinessPrice - A special price that is available only for Amazon Business orders.
         */
        PriceDesignation?: string;
        /** @description Information about withheld taxes. */
        TaxCollection?: definitions["TaxCollection"];
        /**
         * @description When true, the product type for this item has a serial number.
         *
         * Returned only for Amazon Easy Ship orders.
         */
        SerialNumberRequired?: boolean;
        /** @description When true, transparency codes are required. */
        IsTransparency?: boolean;
        /** @description The IOSS number for the marketplace. Sellers shipping to the European Union (EU) from outside of the EU must provide this IOSS number to their carrier when Amazon has collected the VAT on the sale. */
        IossNumber?: string;
        /** @description The store chain store identifier. Linked to a specific store in a store chain. */
        StoreChainStoreId?: string;
        /** @description The category of deemed reseller. This applies to selling partners that are not based in the EU and is used to help them meet the VAT Deemed Reseller tax laws in the EU and UK. */
        DeemedResellerCategory?: "IOSS" | "UOSS";
        BuyerInfo?: definitions["ItemBuyerInfo"];
        /** @description Information about whether or not a buyer requested cancellation. */
        BuyerRequestedCancel?: definitions["BuyerRequestedCancel"];
    };
    /** @description A single order item's buyer information list with the order ID. */
    OrderItemsBuyerInfoList: {
        OrderItems: definitions["OrderItemBuyerInfoList"];
        /** @description When present and not empty, pass this string token in the next request to return the next response page. */
        NextToken?: string;
        /** @description An Amazon-defined order identifier, in 3-7-7 format. */
        AmazonOrderId: string;
    };
    /** @description A single order item's buyer information list. */
    OrderItemBuyerInfoList: definitions["OrderItemBuyerInfo"][];
    /** @description A single order item's buyer information. */
    OrderItemBuyerInfo: {
        /** @description An Amazon-defined order item identifier. */
        OrderItemId: string;
        /** @description Buyer information for custom orders from the Amazon Custom program. */
        BuyerCustomizedInfo?: definitions["BuyerCustomizedInfoDetail"];
        /** @description The gift wrap price of the item. */
        GiftWrapPrice?: definitions["Money"];
        /** @description The tax on the gift wrap price. */
        GiftWrapTax?: definitions["Money"];
        /** @description A gift message provided by the buyer. */
        GiftMessageText?: string;
        /** @description The gift wrap level specified by the buyer. */
        GiftWrapLevel?: string;
    };
    /** @description The number of Amazon Points offered with the purchase of an item, and their monetary value. */
    PointsGrantedDetail: {
        /** @description The number of Amazon Points granted with the purchase of an item. */
        PointsNumber?: number;
        /** @description The monetary value of the Amazon Points granted. */
        PointsMonetaryValue?: definitions["Money"];
    };
    /** @description Product information on the number of items. */
    ProductInfoDetail: {
        /** @description The total number of items that are included in the ASIN. */
        NumberOfItems?: number;
    };
    /** @description A list of promotion identifiers provided by the seller when the promotions were created. */
    PromotionIdList: string[];
    /** @description Buyer information for custom orders from the Amazon Custom program. */
    BuyerCustomizedInfoDetail: {
        /** @description The location of a zip file containing Amazon Custom data. */
        CustomizedURL?: string;
    };
    /** @description Information about withheld taxes. */
    TaxCollection: {
        /** @description The tax collection model applied to the item. */
        Model?: "MarketplaceFacilitator";
        /** @description The party responsible for withholding the taxes and remitting them to the taxing authority. */
        ResponsibleParty?: "Amazon Services, Inc.";
    };
    /** @description Contains the business invoice tax information. Available only in the TR marketplace. */
    BuyerTaxInformation: {
        /** @description Business buyer's company legal name. */
        BuyerLegalCompanyName?: string;
        /** @description Business buyer's address. */
        BuyerBusinessAddress?: string;
        /** @description Business buyer's tax registration ID. */
        BuyerTaxRegistrationId?: string;
        /** @description Business buyer's tax office. */
        BuyerTaxOffice?: string;
    };
    /** @description Contains the instructions about the fulfillment like where should it be fulfilled from. */
    FulfillmentInstruction: {
        /** @description Denotes the recommended sourceId where the order should be fulfilled from. */
        FulfillmentSupplySourceId?: string;
    };
    /** @description Buyer information. */
    BuyerInfo: {
        /** @description The anonymized email address of the buyer. */
        BuyerEmail?: string;
        /** @description The buyer name or the recipient name. */
        BuyerName?: string;
        /** @description The county of the buyer. */
        BuyerCounty?: string;
        /** @description Tax information about the buyer. */
        BuyerTaxInfo?: definitions["BuyerTaxInfo"];
        /** @description The purchase order (PO) number entered by the buyer at checkout. Returned only for orders where the buyer entered a PO number at checkout. */
        PurchaseOrderNumber?: string;
    };
    /** @description A single item's buyer information. */
    ItemBuyerInfo: {
        /** @description Buyer information for custom orders from the Amazon Custom program. */
        BuyerCustomizedInfo?: definitions["BuyerCustomizedInfoDetail"];
        /** @description The gift wrap price of the item. */
        GiftWrapPrice?: definitions["Money"];
        /** @description The tax on the gift wrap price. */
        GiftWrapTax?: definitions["Money"];
        /** @description A gift message provided by the buyer. */
        GiftMessageText?: string;
        /** @description The gift wrap level specified by the buyer. */
        GiftWrapLevel?: string;
    };
    /** @description Contains information regarding the Shipping Settings Automation program, such as whether the order's shipping settings were generated automatically, and what those settings are. */
    AutomatedShippingSettings: {
        /** @description When true, this order has automated shipping settings generated by Amazon. This order could be identified as an SSA order. */
        HasAutomatedShippingSettings?: boolean;
        /** @description Auto-generated carrier for SSA orders. */
        AutomatedCarrier?: string;
        /** @description Auto-generated ship method for SSA orders. */
        AutomatedShipMethod?: string;
    };
    /** @description Information about whether or not a buyer requested cancellation. */
    BuyerRequestedCancel: {
        /** @description When true, the buyer has requested cancellation. */
        IsBuyerRequestedCancel?: boolean;
        /** @description The reason that the buyer requested cancellation. */
        BuyerCancelReason?: string;
    };
    /** @description The status of the Amazon Easy Ship order. This property is included only for Amazon Easy Ship orders. */
    EasyShipShipmentStatus: "PendingSchedule" | "PendingPickUp" | "PendingDropOff" | "LabelCanceled" | "PickedUp" | "DroppedOff" | "AtOriginFC" | "AtDestinationFC" | "Delivered" | "RejectedByBuyer" | "Undeliverable" | "ReturningToSeller" | "ReturnedToSeller" | "Lost" | "OutForDelivery" | "Damaged";
    /** @description The status of the electronic invoice. */
    ElectronicInvoiceStatus: "NotRequired" | "NotFound" | "Processing" | "Errored" | "Accepted";
    /** @description A list of error responses returned when a request is unsuccessful. */
    ErrorList: definitions["Error"][];
    /** @description Error response returned when the request is unsuccessful. */
    Error: {
        /** @description An error code that identifies the type of error that occurred. */
        code: string;
        /** @description A message that describes the error condition. */
        message: string;
        /** @description Additional details that can help the caller understand or fix the issue. */
        details?: string;
    };
}
export interface operations {
    /**
     * Returns orders created or updated during the time frame indicated by the specified parameters. You can also apply a range of filtering criteria to narrow the list of orders returned. If NextToken is present, that will be used to retrieve the orders instead of other criteria.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 0.0167 | 20 |
     *
     * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     */
    getOrders: {
        parameters: {
            query: {
                /** A date used for selecting orders created after (or at) a specified time. Only orders placed after the specified time are returned. Either the CreatedAfter parameter or the LastUpdatedAfter parameter is required. Both cannot be empty. The date must be in ISO 8601 format. */
                CreatedAfter?: string;
                /** A date used for selecting orders created before (or at) a specified time. Only orders placed before the specified time are returned. The date must be in ISO 8601 format. */
                CreatedBefore?: string;
                /** A date used for selecting orders that were last updated after (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in ISO 8601 format. */
                LastUpdatedAfter?: string;
                /** A date used for selecting orders that were last updated before (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in ISO 8601 format. */
                LastUpdatedBefore?: string;
                /**
                 * A list of `OrderStatus` values used to filter the results.
                 *
                 * **Possible values:**
                 * - `PendingAvailability` (This status is available for pre-orders only. The order has been placed, payment has not been authorized, and the release date of the item is in the future.)
                 * - `Pending` (The order has been placed but payment has not been authorized.)
                 * - `Unshipped` (Payment has been authorized and the order is ready for shipment, but no items in the order have been shipped.)
                 * - `PartiallyShipped` (One or more, but not all, items in the order have been shipped.)
                 * - `Shipped` (All items in the order have been shipped.)
                 * - `InvoiceUnconfirmed` (All items in the order have been shipped. The seller has not yet given confirmation to Amazon that the invoice has been shipped to the buyer.)
                 * - `Canceled` (The order has been canceled.)
                 * - `Unfulfillable` (The order cannot be fulfilled. This state applies only to Multi-Channel Fulfillment orders.)
                 */
                OrderStatuses?: string[];
                /**
                 * A list of MarketplaceId values. Used to select orders that were placed in the specified marketplaces.
                 *
                 * See the [Selling Partner API Developer Guide](doc:marketplace-ids) for a complete list of marketplaceId values.
                 */
                MarketplaceIds: string[];
                /** A list that indicates how an order was fulfilled. Filters the results by fulfillment channel. Possible values: AFN (Fulfillment by Amazon); MFN (Fulfilled by the seller). */
                FulfillmentChannels?: string[];
                /** A list of payment method values. Used to select orders paid using the specified payment methods. Possible values: COD (Cash on delivery); CVS (Convenience store payment); Other (Any payment method other than COD or CVS). */
                PaymentMethods?: string[];
                /** The email address of a buyer. Used to select orders that contain the specified email address. */
                BuyerEmail?: string;
                /** An order identifier that is specified by the seller. Used to select only the orders that match the order identifier. If SellerOrderId is specified, then FulfillmentChannels, OrderStatuses, PaymentMethod, LastUpdatedAfter, LastUpdatedBefore, and BuyerEmail cannot be specified. */
                SellerOrderId?: string;
                /** A number that indicates the maximum number of orders that can be returned per page. Value must be 1 - 100. Default 100. */
                MaxResultsPerPage?: number;
                /**
                 * A list of `EasyShipShipmentStatus` values. Used to select Easy Ship orders with statuses that match the specified values. If `EasyShipShipmentStatus` is specified, only Amazon Easy Ship orders are returned.
                 *
                 * **Possible values:**
                 * - `PendingSchedule` (The package is awaiting the schedule for pick-up.)
                 * - `PendingPickUp` (Amazon has not yet picked up the package from the seller.)
                 * - `PendingDropOff` (The seller will deliver the package to the carrier.)
                 * - `LabelCanceled` (The seller canceled the pickup.)
                 * - `PickedUp` (Amazon has picked up the package from the seller.)
                 * - `DroppedOff` (The package is delivered to the carrier by the seller.)
                 * - `AtOriginFC` (The packaged is at the origin fulfillment center.)
                 * - `AtDestinationFC` (The package is at the destination fulfillment center.)
                 * - `Delivered` (The package has been delivered.)
                 * - `RejectedByBuyer` (The package has been rejected by the buyer.)
                 * - `Undeliverable` (The package cannot be delivered.)
                 * - `ReturningToSeller` (The package was not delivered and is being returned to the seller.)
                 * - `ReturnedToSeller` (The package was not delivered and was returned to the seller.)
                 * - `Lost` (The package is lost.)
                 * - `OutForDelivery` (The package is out for delivery.)
                 * - `Damaged` (The package was damaged by the carrier.)
                 */
                EasyShipShipmentStatuses?: string[];
                /**
                 * A list of `ElectronicInvoiceStatus` values. Used to select orders with electronic invoice statuses that match the specified values.
                 *
                 * **Possible values:**
                 * - `NotRequired` (Electronic invoice submission is not required for this order.)
                 * - `NotFound` (The electronic invoice was not submitted for this order.)
                 * - `Processing` (The electronic invoice is being processed for this order.)
                 * - `Errored` (The last submitted electronic invoice was rejected for this order.)
                 * - `Accepted` (The last submitted electronic invoice was submitted and accepted.)
                 */
                ElectronicInvoiceStatuses?: string[];
                /** A string token returned in the response of your previous request. */
                NextToken?: string;
                /** A list of AmazonOrderId values. An AmazonOrderId is an Amazon-defined order identifier, in 3-7-7 format. */
                AmazonOrderIds?: string[];
                /** Denotes the recommended sourceId where the order should be fulfilled from. */
                ActualFulfillmentSupplySourceId?: string;
                /** When true, this order is marked to be picked up from a store rather than delivered. */
                IsISPU?: boolean;
                /** The store chain store identifier. Linked to a specific store in a store chain. */
                StoreChainStoreId?: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["GetOrdersResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["GetOrdersResponse"];
            };
            /** Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["GetOrdersResponse"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["GetOrdersResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["GetOrdersResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["GetOrdersResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["GetOrdersResponse"];
            };
        };
    };
    /**
     * Returns the order that you specify.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 0.0167 | 20 |
     *
     * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     */
    getOrder: {
        parameters: {
            path: {
                /** An Amazon-defined order identifier, in 3-7-7 format. */
                orderId: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["GetOrderResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["GetOrderResponse"];
            };
            /** Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["GetOrderResponse"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["GetOrderResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["GetOrderResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["GetOrderResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["GetOrderResponse"];
            };
        };
    };
    /**
     * Returns buyer information for the order that you specify.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 0.0167 | 20 |
     *
     * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     */
    getOrderBuyerInfo: {
        parameters: {
            path: {
                /** An orderId is an Amazon-defined order identifier, in 3-7-7 format. */
                orderId: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["GetOrderBuyerInfoResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["GetOrderBuyerInfoResponse"];
            };
            /** Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["GetOrderBuyerInfoResponse"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["GetOrderBuyerInfoResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["GetOrderBuyerInfoResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["GetOrderBuyerInfoResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["GetOrderBuyerInfoResponse"];
            };
        };
    };
    /**
     * Returns the shipping address for the order that you specify.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 0.0167 | 20 |
     *
     * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     */
    getOrderAddress: {
        parameters: {
            path: {
                /** An orderId is an Amazon-defined order identifier, in 3-7-7 format. */
                orderId: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["GetOrderAddressResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["GetOrderAddressResponse"];
            };
            /** Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["GetOrderAddressResponse"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["GetOrderAddressResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["GetOrderAddressResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["GetOrderAddressResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["GetOrderAddressResponse"];
            };
        };
    };
    /**
     * Returns detailed order item information for the order that you specify. If NextToken is provided, it's used to retrieve the next page of order items.
     *
     * __Note__: When an order is in the Pending state (the order has been placed but payment has not been authorized), the getOrderItems operation does not return information about pricing, taxes, shipping charges, gift status or promotions for the order items in the order. After an order leaves the Pending state (this occurs when payment has been authorized) and enters the Unshipped, Partially Shipped, or Shipped state, the getOrderItems operation returns information about pricing, taxes, shipping charges, gift status and promotions for the order items in the order.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 0.5 | 30 |
     *
     * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     */
    getOrderItems: {
        parameters: {
            path: {
                /** An Amazon-defined order identifier, in 3-7-7 format. */
                orderId: string;
            };
            query: {
                /** A string token returned in the response of your previous request. */
                NextToken?: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["GetOrderItemsResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["GetOrderItemsResponse"];
            };
            /** Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["GetOrderItemsResponse"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["GetOrderItemsResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["GetOrderItemsResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["GetOrderItemsResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["GetOrderItemsResponse"];
            };
        };
    };
    /**
     * Returns buyer information for the order items in the order that you specify.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 0.5 | 30 |
     *
     * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     */
    getOrderItemsBuyerInfo: {
        parameters: {
            path: {
                /** An Amazon-defined order identifier, in 3-7-7 format. */
                orderId: string;
            };
            query: {
                /** A string token returned in the response of your previous request. */
                NextToken?: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["GetOrderItemsBuyerInfoResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["GetOrderItemsBuyerInfoResponse"];
            };
            /** Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["GetOrderItemsBuyerInfoResponse"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["GetOrderItemsBuyerInfoResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["GetOrderItemsBuyerInfoResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["GetOrderItemsBuyerInfoResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["GetOrderItemsBuyerInfoResponse"];
            };
        };
    };
    /**
     * Update the shipment status for an order that you specify.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 5 | 15 |
     *
     * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     */
    updateShipmentStatus: {
        parameters: {
            path: {
                /** An Amazon-defined order identifier, in 3-7-7 format. */
                orderId: string;
            };
            body: {
                /** The request body for the updateShipmentStatus operation. */
                payload: definitions["UpdateShipmentStatusRequest"];
            };
        };
        responses: {
            /** Success. */
            204: never;
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["UpdateShipmentStatusErrorResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["UpdateShipmentStatusErrorResponse"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["UpdateShipmentStatusErrorResponse"];
            };
            /** The request size exceeded the maximum accepted size. */
            413: {
                headers: {};
                schema: definitions["UpdateShipmentStatusErrorResponse"];
            };
            /** The request payload is in an unsupported format. */
            415: {
                headers: {};
                schema: definitions["UpdateShipmentStatusErrorResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["UpdateShipmentStatusErrorResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["UpdateShipmentStatusErrorResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["UpdateShipmentStatusErrorResponse"];
            };
        };
    };
    /**
     * Returns regulated information for the order that you specify.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 0.5 | 30 |
     *
     * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     */
    getOrderRegulatedInfo: {
        parameters: {
            path: {
                /** An orderId is an Amazon-defined order identifier, in 3-7-7 format. */
                orderId: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["GetOrderRegulatedInfoResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["GetOrderRegulatedInfoResponse"];
            };
            /** Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["GetOrderRegulatedInfoResponse"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["GetOrderRegulatedInfoResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["GetOrderRegulatedInfoResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["GetOrderRegulatedInfoResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["GetOrderRegulatedInfoResponse"];
            };
        };
    };
    /**
     * Updates (approves or rejects) the verification status of an order containing regulated products.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 0.5 | 30 |
     *
     * The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     */
    updateVerificationStatus: {
        parameters: {
            path: {
                /** An orderId is an Amazon-defined order identifier, in 3-7-7 format. */
                orderId: string;
            };
            body: {
                /** The request body for the updateVerificationStatus operation. */
                payload: definitions["UpdateVerificationStatusRequest"];
            };
        };
        responses: {
            /** Success. */
            204: never;
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["UpdateVerificationStatusErrorResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["UpdateVerificationStatusErrorResponse"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["UpdateVerificationStatusErrorResponse"];
            };
            /** The request size exceeded the maximum accepted size. */
            413: {
                headers: {};
                schema: definitions["UpdateVerificationStatusErrorResponse"];
            };
            /** The request payload is in an unsupported format. */
            415: {
                headers: {};
                schema: definitions["UpdateVerificationStatusErrorResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["UpdateVerificationStatusErrorResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["UpdateVerificationStatusErrorResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["UpdateVerificationStatusErrorResponse"];
            };
        };
    };
}
export interface external {
}

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    "/messaging/v1/orders/{amazonOrderId}": {
        /**
         * Returns a list of message types that are available for an order that you specify. A message type is represented by an actions object, which contains a path and query parameter(s). You can use the path and parameter(s) to call an operation that sends a message.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 1 | 5 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        get: operations["getMessagingActionsForOrder"];
    };
    "/messaging/v1/orders/{amazonOrderId}/messages/confirmCustomizationDetails": {
        /**
         * Sends a message asking a buyer to provide or verify customization details such as name spelling, images, initials, etc.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 1 | 5 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        post: operations["confirmCustomizationDetails"];
    };
    "/messaging/v1/orders/{amazonOrderId}/messages/confirmDeliveryDetails": {
        /**
         * Sends a message to a buyer to arrange a delivery or to confirm contact information for making a delivery.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 1 | 5 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        post: operations["createConfirmDeliveryDetails"];
    };
    "/messaging/v1/orders/{amazonOrderId}/messages/legalDisclosure": {
        /**
         * Sends a critical message that contains documents that a seller is legally obligated to provide to the buyer. This message should only be used to deliver documents that are required by law.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 1 | 5 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        post: operations["createLegalDisclosure"];
    };
    "/messaging/v1/orders/{amazonOrderId}/messages/negativeFeedbackRemoval": {
        /**
         * Sends a non-critical message that asks a buyer to remove their negative feedback. This message should only be sent after the seller has resolved the buyer's problem.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 1 | 5 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        post: operations["createNegativeFeedbackRemoval"];
    };
    "/messaging/v1/orders/{amazonOrderId}/messages/confirmOrderDetails": {
        /**
         * Sends a message to ask a buyer an order-related question prior to shipping their order.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 1 | 5 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        post: operations["createConfirmOrderDetails"];
    };
    "/messaging/v1/orders/{amazonOrderId}/messages/confirmServiceDetails": {
        /**
         * Sends a message to contact a Home Service customer to arrange a service call or to gather information prior to a service call.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 1 | 5 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        post: operations["createConfirmServiceDetails"];
    };
    "/messaging/v1/orders/{amazonOrderId}/messages/amazonMotors": {
        /**
         * Sends a message to a buyer to provide details about an Amazon Motors order. This message can only be sent by Amazon Motors sellers.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 1 | 5 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        post: operations["CreateAmazonMotors"];
    };
    "/messaging/v1/orders/{amazonOrderId}/messages/warranty": {
        /**
         * Sends a message to a buyer to provide details about warranty information on a purchase in their order.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 1 | 5 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        post: operations["CreateWarranty"];
    };
    "/messaging/v1/orders/{amazonOrderId}/attributes": {
        /**
         * Returns a response containing attributes related to an order. This includes buyer preferences.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 1 | 5 |
         */
        get: operations["GetAttributes"];
    };
    "/messaging/v1/orders/{amazonOrderId}/messages/digitalAccessKey": {
        /**
         * Sends a message to a buyer to share a digital access key needed to utilize digital content in their order.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 1 | 5 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        post: operations["createDigitalAccessKey"];
    };
    "/messaging/v1/orders/{amazonOrderId}/messages/unexpectedProblem": {
        /**
         * Sends a critical message to a buyer that an unexpected problem was encountered affecting the completion of the order.
         *
         * **Usage Plan:**
         *
         * | Rate (requests per second) | Burst |
         * | ---- | ---- |
         * | 1 | 5 |
         *
         * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        post: operations["createUnexpectedProblem"];
    };
    "/messaging/v1/orders/{amazonOrderId}/messages/invoice": {
        /** Sends a message providing the buyer an invoice */
        post: operations["sendInvoice"];
    };
}
export interface definitions {
    /** @description Represents a file uploaded to a destination that was created by the [createUploadDestinationForResource](doc:uploads-api-reference#post-uploads2020-11-01uploaddestinationsresource) operation of the Selling Partner API for Uploads. */
    Attachment: {
        /** @description The identifier of the upload destination. Get this value by calling the [createUploadDestinationForResource](doc:uploads-api-reference#post-uploads2020-11-01uploaddestinationsresource) operation of the Uploads API. */
        uploadDestinationId: string;
        /** @description The name of the file, including the extension. This is the file name that will appear in the message. This does not need to match the file name of the file that you uploaded. */
        fileName: string;
    };
    /** @description A Link object. */
    LinkObject: {
        /** @description A URI for this object. */
        href: string;
        /** @description An identifier for this object. */
        name?: string;
    };
    /** @description A simple object containing the name of the template. */
    MessagingAction: {
        name: string;
    };
    /** @description A JSON schema document describing the expected payload of the action. This object can be validated against <a href=http://json-schema.org/draft-04/schema>http://json-schema.org/draft-04/schema</a>. */
    Schema: {
        [key: string]: unknown;
    };
    /** @description The response schema for the getMessagingActionsForOrder operation. */
    GetMessagingActionsForOrderResponse: {
        _links?: {
            self: definitions["LinkObject"];
            /** @description Eligible actions for the specified amazonOrderId. */
            actions: definitions["LinkObject"][];
        };
        _embedded?: {
            actions: definitions["GetMessagingActionResponse"][];
        };
        errors?: definitions["ErrorList"];
    };
    /** @description Describes a messaging action that can be taken for an order. Provides a JSON Hypertext Application Language (HAL) link to the JSON schema document that describes the expected input. */
    GetMessagingActionResponse: {
        _links?: {
            self: definitions["LinkObject"];
            schema: definitions["LinkObject"];
        };
        _embedded?: {
            schema?: definitions["GetSchemaResponse"];
        };
        payload?: definitions["MessagingAction"];
        errors?: definitions["ErrorList"];
    };
    GetSchemaResponse: {
        _links?: {
            self: definitions["LinkObject"];
        };
        payload?: definitions["Schema"];
        errors?: definitions["ErrorList"];
    };
    /** @description The request schema for the sendInvoice operation. */
    InvoiceRequest: {
        /** @description Attachments to include in the message to the buyer. */
        attachments?: definitions["Attachment"][];
    };
    /** @description The response schema for the sendInvoice operation. */
    InvoiceResponse: {
        errors?: definitions["ErrorList"];
    };
    /** @description The request schema for the confirmCustomizationDetails operation. */
    CreateConfirmCustomizationDetailsRequest: {
        /** @description The text to be sent to the buyer. Only links related to customization details are allowed. Do not include HTML or email addresses. The text must be written in the buyer's language of preference, which can be retrieved from the GetAttributes operation. */
        text?: string;
        /** @description Attachments to include in the message to the buyer. */
        attachments?: definitions["Attachment"][];
    };
    /** @description The response schema for the confirmCustomizationDetails operation. */
    CreateConfirmCustomizationDetailsResponse: {
        errors?: definitions["ErrorList"];
    };
    /** @description The request schema for the createConfirmDeliveryDetails operation. */
    CreateConfirmDeliveryDetailsRequest: {
        /** @description The text to be sent to the buyer. Only links related to order delivery are allowed. Do not include HTML or email addresses. The text must be written in the buyer's language of preference, which can be retrieved from the GetAttributes operation. */
        text?: string;
    };
    /** @description The response schema for the createConfirmDeliveryDetails operation. */
    CreateConfirmDeliveryDetailsResponse: {
        errors?: definitions["ErrorList"];
    };
    /** @description The response schema for the createNegativeFeedbackRemoval operation. */
    CreateNegativeFeedbackRemovalResponse: {
        errors?: definitions["ErrorList"];
    };
    /** @description The request schema for the createLegalDisclosure operation. */
    CreateLegalDisclosureRequest: {
        /** @description Attachments to include in the message to the buyer. If any text is included in the attachment, the text must be written in the buyer's language of preference, which can be retrieved from the GetAttributes operation. */
        attachments?: definitions["Attachment"][];
    };
    /** @description The response schema for the createLegalDisclosure operation. */
    CreateLegalDisclosureResponse: {
        errors?: definitions["ErrorList"];
    };
    /** @description The request schema for the createConfirmOrderDetails operation. */
    CreateConfirmOrderDetailsRequest: {
        /** @description The text to be sent to the buyer. Only links related to order completion are allowed. Do not include HTML or email addresses. The text must be written in the buyer's language of preference, which can be retrieved from the GetAttributes operation. */
        text?: string;
    };
    /** @description The response schema for the createConfirmOrderDetails operation. */
    CreateConfirmOrderDetailsResponse: {
        errors?: definitions["ErrorList"];
    };
    /** @description The request schema for the createConfirmServiceDetails operation. */
    CreateConfirmServiceDetailsRequest: {
        /** @description The text to be sent to the buyer. Only links related to Home Service calls are allowed. Do not include HTML or email addresses. The text must be written in the buyer's language of preference, which can be retrieved from the GetAttributes operation. */
        text?: string;
    };
    /** @description The response schema for the createConfirmServiceDetails operation. */
    CreateConfirmServiceDetailsResponse: {
        errors?: definitions["ErrorList"];
    };
    /** @description The request schema for the createAmazonMotors operation. */
    CreateAmazonMotorsRequest: {
        /** @description Attachments to include in the message to the buyer. If any text is included in the attachment, the text must be written in the buyer's language of preference, which can be retrieved from the GetAttributes operation. */
        attachments?: definitions["Attachment"][];
    };
    /** @description The response schema for the createAmazonMotors operation. */
    CreateAmazonMotorsResponse: {
        errors?: definitions["ErrorList"];
    };
    /** @description The request schema for the createWarranty operation. */
    CreateWarrantyRequest: {
        /** @description Attachments to include in the message to the buyer. If any text is included in the attachment, the text must be written in the buyer's language of preference, which can be retrieved from the GetAttributes operation. */
        attachments?: definitions["Attachment"][];
        /**
         * Format: date-time
         * @description The start date of the warranty coverage to include in the message to the buyer.
         */
        coverageStartDate?: string;
        /**
         * Format: date-time
         * @description The end date of the warranty coverage to include in the message to the buyer.
         */
        coverageEndDate?: string;
    };
    /** @description The response schema for the createWarranty operation. */
    CreateWarrantyResponse: {
        errors?: definitions["ErrorList"];
    };
    /** @description The response schema for the GetAttributes operation. */
    GetAttributesResponse: {
        /** @description The list of attributes related to the buyer. */
        buyer?: {
            /** @description The buyer's language of preference, indicated with a locale-specific language tag. Examples: "en-US", "zh-CN", and "en-GB". */
            locale?: string;
        };
        errors?: definitions["ErrorList"];
    };
    /** @description The request schema for the createDigitalAccessKey operation. */
    CreateDigitalAccessKeyRequest: {
        /** @description The text to be sent to the buyer. Only links related to the digital access key are allowed. Do not include HTML or email addresses. The text must be written in the buyer's language of preference, which can be retrieved from the GetAttributes operation. */
        text?: string;
        /** @description Attachments to include in the message to the buyer. */
        attachments?: definitions["Attachment"][];
    };
    /** @description The response schema for the createDigitalAccessKey operation. */
    CreateDigitalAccessKeyResponse: {
        errors?: definitions["ErrorList"];
    };
    /** @description The request schema for the createUnexpectedProblem operation. */
    CreateUnexpectedProblemRequest: {
        /** @description The text to be sent to the buyer. Only links related to unexpected problem calls are allowed. Do not include HTML or email addresses. The text must be written in the buyer's language of preference, which can be retrieved from the GetAttributes operation. */
        text?: string;
    };
    /** @description The response schema for the createUnexpectedProblem operation. */
    CreateUnexpectedProblemResponse: {
        errors?: definitions["ErrorList"];
    };
    /** @description A list of error responses returned when a request is unsuccessful. */
    ErrorList: definitions["Error"][];
    /** @description Error response returned when the request is unsuccessful. */
    Error: {
        /** @description An error code that identifies the type of error that occurred. */
        code: string;
        /** @description A message that describes the error condition. */
        message: string;
        /** @description Additional details that can help the caller understand or fix the issue. */
        details?: string;
    };
}
export interface operations {
    /**
     * Returns a list of message types that are available for an order that you specify. A message type is represented by an actions object, which contains a path and query parameter(s). You can use the path and parameter(s) to call an operation that sends a message.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 1 | 5 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    getMessagingActionsForOrder: {
        parameters: {
            path: {
                /** An Amazon order identifier. This specifies the order for which you want a list of available message types. */
                amazonOrderId: string;
            };
            query: {
                /** A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. */
                marketplaceIds: string[];
            };
        };
        responses: {
            /** Returns hypermedia links under the _links.actions key that specify which messaging actions are allowed for the order. */
            200: {
                headers: {};
                schema: definitions["GetMessagingActionsForOrderResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["GetMessagingActionsForOrderResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["GetMessagingActionsForOrderResponse"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["GetMessagingActionsForOrderResponse"];
            };
            /** The request size exceeded the maximum accepted size. */
            413: {
                headers: {};
                schema: definitions["GetMessagingActionsForOrderResponse"];
            };
            /** The request payload is in an unsupported format. */
            415: {
                headers: {};
                schema: definitions["GetMessagingActionsForOrderResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["GetMessagingActionsForOrderResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["GetMessagingActionsForOrderResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["GetMessagingActionsForOrderResponse"];
            };
        };
    };
    /**
     * Sends a message asking a buyer to provide or verify customization details such as name spelling, images, initials, etc.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 1 | 5 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    confirmCustomizationDetails: {
        parameters: {
            path: {
                /** An Amazon order identifier. This specifies the order for which a message is sent. */
                amazonOrderId: string;
            };
            query: {
                /** A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. */
                marketplaceIds: string[];
            };
            body: {
                body: definitions["CreateConfirmCustomizationDetailsRequest"];
            };
        };
        responses: {
            /** The message was created for the order. */
            201: {
                headers: {};
                schema: definitions["CreateConfirmCustomizationDetailsResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["CreateConfirmCustomizationDetailsResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["CreateConfirmCustomizationDetailsResponse"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["CreateConfirmCustomizationDetailsResponse"];
            };
            /** The request size exceeded the maximum accepted size. */
            413: {
                headers: {};
                schema: definitions["CreateConfirmCustomizationDetailsResponse"];
            };
            /** The request payload is in an unsupported format. */
            415: {
                headers: {};
                schema: definitions["CreateConfirmCustomizationDetailsResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["CreateConfirmCustomizationDetailsResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["CreateConfirmCustomizationDetailsResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["CreateConfirmCustomizationDetailsResponse"];
            };
        };
    };
    /**
     * Sends a message to a buyer to arrange a delivery or to confirm contact information for making a delivery.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 1 | 5 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    createConfirmDeliveryDetails: {
        parameters: {
            path: {
                /** An Amazon order identifier. This specifies the order for which a message is sent. */
                amazonOrderId: string;
            };
            query: {
                /** A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. */
                marketplaceIds: string[];
            };
            body: {
                body: definitions["CreateConfirmDeliveryDetailsRequest"];
            };
        };
        responses: {
            /** The message was created for the order. */
            201: {
                headers: {};
                schema: definitions["CreateConfirmDeliveryDetailsResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["CreateConfirmDeliveryDetailsResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["CreateConfirmDeliveryDetailsResponse"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["CreateConfirmDeliveryDetailsResponse"];
            };
            /** The request size exceeded the maximum accepted size. */
            413: {
                headers: {};
                schema: definitions["CreateConfirmDeliveryDetailsResponse"];
            };
            /** The request payload is in an unsupported format. */
            415: {
                headers: {};
                schema: definitions["CreateConfirmDeliveryDetailsResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["CreateConfirmDeliveryDetailsResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["CreateConfirmDeliveryDetailsResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["CreateConfirmDeliveryDetailsResponse"];
            };
        };
    };
    /**
     * Sends a critical message that contains documents that a seller is legally obligated to provide to the buyer. This message should only be used to deliver documents that are required by law.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 1 | 5 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    createLegalDisclosure: {
        parameters: {
            path: {
                /** An Amazon order identifier. This specifies the order for which a message is sent. */
                amazonOrderId: string;
            };
            query: {
                /** A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. */
                marketplaceIds: string[];
            };
            body: {
                body: definitions["CreateLegalDisclosureRequest"];
            };
        };
        responses: {
            /** The legal disclosure message was created for the order. */
            201: {
                headers: {};
                schema: definitions["CreateLegalDisclosureResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["CreateLegalDisclosureResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["CreateLegalDisclosureResponse"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["CreateLegalDisclosureResponse"];
            };
            /** The request size exceeded the maximum accepted size. */
            413: {
                headers: {};
                schema: definitions["CreateLegalDisclosureResponse"];
            };
            /** The request payload is in an unsupported format. */
            415: {
                headers: {};
                schema: definitions["CreateLegalDisclosureResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["CreateLegalDisclosureResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["CreateLegalDisclosureResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["CreateLegalDisclosureResponse"];
            };
        };
    };
    /**
     * Sends a non-critical message that asks a buyer to remove their negative feedback. This message should only be sent after the seller has resolved the buyer's problem.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 1 | 5 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    createNegativeFeedbackRemoval: {
        parameters: {
            path: {
                /** An Amazon order identifier. This specifies the order for which a message is sent. */
                amazonOrderId: string;
            };
            query: {
                /** A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. */
                marketplaceIds: string[];
            };
        };
        responses: {
            /** The negativeFeedbackRemoval message was created for the order. */
            201: {
                headers: {};
                schema: definitions["CreateNegativeFeedbackRemovalResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["CreateNegativeFeedbackRemovalResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["CreateNegativeFeedbackRemovalResponse"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["CreateNegativeFeedbackRemovalResponse"];
            };
            /** The request size exceeded the maximum accepted size. */
            413: {
                headers: {};
                schema: definitions["CreateNegativeFeedbackRemovalResponse"];
            };
            /** The request payload is in an unsupported format. */
            415: {
                headers: {};
                schema: definitions["CreateNegativeFeedbackRemovalResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["CreateNegativeFeedbackRemovalResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["CreateNegativeFeedbackRemovalResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["CreateNegativeFeedbackRemovalResponse"];
            };
        };
    };
    /**
     * Sends a message to ask a buyer an order-related question prior to shipping their order.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 1 | 5 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    createConfirmOrderDetails: {
        parameters: {
            path: {
                /** An Amazon order identifier. This specifies the order for which a message is sent. */
                amazonOrderId: string;
            };
            query: {
                /** A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. */
                marketplaceIds: string[];
            };
            body: {
                body: definitions["CreateConfirmOrderDetailsRequest"];
            };
        };
        responses: {
            /** The message was created for the order. */
            201: {
                headers: {};
                schema: definitions["CreateConfirmOrderDetailsResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["CreateConfirmOrderDetailsResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["CreateConfirmOrderDetailsResponse"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["CreateConfirmOrderDetailsResponse"];
            };
            /** The request size exceeded the maximum accepted size. */
            413: {
                headers: {};
                schema: definitions["CreateConfirmOrderDetailsResponse"];
            };
            /** The request payload is in an unsupported format. */
            415: {
                headers: {};
                schema: definitions["CreateConfirmOrderDetailsResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["CreateConfirmOrderDetailsResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["CreateConfirmOrderDetailsResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["CreateConfirmOrderDetailsResponse"];
            };
        };
    };
    /**
     * Sends a message to contact a Home Service customer to arrange a service call or to gather information prior to a service call.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 1 | 5 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    createConfirmServiceDetails: {
        parameters: {
            path: {
                /** An Amazon order identifier. This specifies the order for which a message is sent. */
                amazonOrderId: string;
            };
            query: {
                /** A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. */
                marketplaceIds: string[];
            };
            body: {
                body: definitions["CreateConfirmServiceDetailsRequest"];
            };
        };
        responses: {
            /** The message was created for the order. */
            201: {
                headers: {};
                schema: definitions["CreateConfirmServiceDetailsResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["CreateConfirmServiceDetailsResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["CreateConfirmServiceDetailsResponse"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["CreateConfirmServiceDetailsResponse"];
            };
            /** The request size exceeded the maximum accepted size. */
            413: {
                headers: {};
                schema: definitions["CreateConfirmServiceDetailsResponse"];
            };
            /** The request payload is in an unsupported format. */
            415: {
                headers: {};
                schema: definitions["CreateConfirmServiceDetailsResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["CreateConfirmServiceDetailsResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["CreateConfirmServiceDetailsResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["CreateConfirmServiceDetailsResponse"];
            };
        };
    };
    /**
     * Sends a message to a buyer to provide details about an Amazon Motors order. This message can only be sent by Amazon Motors sellers.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 1 | 5 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    CreateAmazonMotors: {
        parameters: {
            path: {
                /** An Amazon order identifier. This specifies the order for which a message is sent. */
                amazonOrderId: string;
            };
            query: {
                /** A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. */
                marketplaceIds: string[];
            };
            body: {
                body: definitions["CreateAmazonMotorsRequest"];
            };
        };
        responses: {
            /** The message was created for the order. */
            201: {
                headers: {};
                schema: definitions["CreateAmazonMotorsResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["CreateAmazonMotorsResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["CreateAmazonMotorsResponse"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["CreateAmazonMotorsResponse"];
            };
            /** The request size exceeded the maximum accepted size. */
            413: {
                headers: {};
                schema: definitions["CreateAmazonMotorsResponse"];
            };
            /** The request payload is in an unsupported format. */
            415: {
                headers: {};
                schema: definitions["CreateAmazonMotorsResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["CreateAmazonMotorsResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["CreateAmazonMotorsResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["CreateAmazonMotorsResponse"];
            };
        };
    };
    /**
     * Sends a message to a buyer to provide details about warranty information on a purchase in their order.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 1 | 5 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    CreateWarranty: {
        parameters: {
            path: {
                /** An Amazon order identifier. This specifies the order for which a message is sent. */
                amazonOrderId: string;
            };
            query: {
                /** A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. */
                marketplaceIds: string[];
            };
            body: {
                body: definitions["CreateWarrantyRequest"];
            };
        };
        responses: {
            /** The message was created for the order. */
            201: {
                headers: {};
                schema: definitions["CreateWarrantyResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["CreateWarrantyResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["CreateWarrantyResponse"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["CreateWarrantyResponse"];
            };
            /** The request size exceeded the maximum accepted size. */
            413: {
                headers: {};
                schema: definitions["CreateWarrantyResponse"];
            };
            /** The request payload is in an unsupported format. */
            415: {
                headers: {};
                schema: definitions["CreateWarrantyResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["CreateWarrantyResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["CreateWarrantyResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["CreateWarrantyResponse"];
            };
        };
    };
    /**
     * Returns a response containing attributes related to an order. This includes buyer preferences.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 1 | 5 |
     */
    GetAttributes: {
        parameters: {
            path: {
                /** An Amazon order identifier. This specifies the order for which a message is sent. */
                amazonOrderId: string;
            };
            query: {
                /** A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. */
                marketplaceIds: string[];
            };
        };
        responses: {
            /** Response has successfully been returned. */
            200: {
                headers: {};
                schema: definitions["GetAttributesResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["GetAttributesResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["GetAttributesResponse"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["GetAttributesResponse"];
            };
            /** The request size exceeded the maximum accepted size. */
            413: {
                headers: {};
                schema: definitions["GetAttributesResponse"];
            };
            /** The request payload is in an unsupported format. */
            415: {
                headers: {};
                schema: definitions["GetAttributesResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["GetAttributesResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["GetAttributesResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["GetAttributesResponse"];
            };
        };
    };
    /**
     * Sends a message to a buyer to share a digital access key needed to utilize digital content in their order.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 1 | 5 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    createDigitalAccessKey: {
        parameters: {
            path: {
                /** An Amazon order identifier. This specifies the order for which a message is sent. */
                amazonOrderId: string;
            };
            query: {
                /** A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. */
                marketplaceIds: string[];
            };
            body: {
                body: definitions["CreateDigitalAccessKeyRequest"];
            };
        };
        responses: {
            /** The message was created for the order. */
            201: {
                headers: {};
                schema: definitions["CreateDigitalAccessKeyResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["CreateDigitalAccessKeyResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["CreateDigitalAccessKeyResponse"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["CreateDigitalAccessKeyResponse"];
            };
            /** The request size exceeded the maximum accepted size. */
            413: {
                headers: {};
                schema: definitions["CreateDigitalAccessKeyResponse"];
            };
            /** The request payload is in an unsupported format. */
            415: {
                headers: {};
                schema: definitions["CreateDigitalAccessKeyResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["CreateDigitalAccessKeyResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["CreateDigitalAccessKeyResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["CreateDigitalAccessKeyResponse"];
            };
        };
    };
    /**
     * Sends a critical message to a buyer that an unexpected problem was encountered affecting the completion of the order.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 1 | 5 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    createUnexpectedProblem: {
        parameters: {
            path: {
                /** An Amazon order identifier. This specifies the order for which a message is sent. */
                amazonOrderId: string;
            };
            query: {
                /** A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. */
                marketplaceIds: string[];
            };
            body: {
                body: definitions["CreateUnexpectedProblemRequest"];
            };
        };
        responses: {
            /** The message was created for the order. */
            201: {
                headers: {};
                schema: definitions["CreateUnexpectedProblemResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["CreateUnexpectedProblemResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["CreateUnexpectedProblemResponse"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["CreateUnexpectedProblemResponse"];
            };
            /** The request size exceeded the maximum accepted size. */
            413: {
                headers: {};
                schema: definitions["CreateUnexpectedProblemResponse"];
            };
            /** The request payload is in an unsupported format. */
            415: {
                headers: {};
                schema: definitions["CreateUnexpectedProblemResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["CreateUnexpectedProblemResponse"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["CreateUnexpectedProblemResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["CreateUnexpectedProblemResponse"];
            };
        };
    };
    /** Sends a message providing the buyer an invoice */
    sendInvoice: {
        parameters: {
            path: {
                /** An Amazon order identifier. This specifies the order for which a message is sent. */
                amazonOrderId: string;
            };
            query: {
                /** A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified. */
                marketplaceIds: string[];
            };
            body: {
                body: definitions["InvoiceRequest"];
            };
        };
        responses: {
            /** The message was created for the order. */
            201: {
                headers: {};
                schema: definitions["InvoiceResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["InvoiceResponse"];
            };
            /** 403 can be caused for reasons like Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found. */
            403: {
                headers: {};
                schema: definitions["InvoiceResponse"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["InvoiceResponse"];
            };
            /** The request size exceeded the maximum accepted size. */
            413: {
                headers: {};
                schema: definitions["InvoiceResponse"];
            };
            /** The entity of the request is in a format not supported by the requested resource. */
            415: {
                headers: {};
                schema: definitions["InvoiceResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["InvoiceResponse"];
            };
            /** Encountered an unexpected condition which prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["InvoiceResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["InvoiceResponse"];
            };
        };
    };
}
export interface external {
}

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/vendor/orders/v1/purchaseOrders": {
    /**
     * Returns a list of purchase orders created or changed during the time frame that you specify. You define the time frame using the createdAfter, createdBefore, changedAfter and changedBefore parameters. The date range to search must not be more than 7 days. You can choose to get only the purchase order numbers by setting includeDetails to false. You can then use the getPurchaseOrder operation to receive details for a specific purchase order.
     *
     * **Usage Plans:**
     *
     * | Plan type | Rate (requests per second) | Burst |
     * | ---- | ---- | ---- |
     * |Default| 10 | 10 |
     * |Selling partner specific| Variable | Variable |
     *
     * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    get: operations["getPurchaseOrders"];
  };
  "/vendor/orders/v1/purchaseOrders/{purchaseOrderNumber}": {
    /**
     * Returns a purchase order based on the purchaseOrderNumber value that you specify.
     *
     * **Usage Plans:**
     *
     * | Plan type | Rate (requests per second) | Burst |
     * | ---- | ---- | ---- |
     * |Default| 10 | 10 |
     * |Selling partner specific| Variable | Variable |
     *
     * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    get: operations["getPurchaseOrder"];
  };
  "/vendor/orders/v1/acknowledgements": {
    /**
     * Submits acknowledgements for one or more purchase orders.
     *
     * **Usage Plans:**
     *
     * | Plan type | Rate (requests per second) | Burst |
     * | ---- | ---- | ---- |
     * |Default| 10 | 10 |
     * |Selling partner specific| Variable | Variable |
     *
     * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    post: operations["submitAcknowledgement"];
  };
  "/vendor/orders/v1/purchaseOrdersStatus": {
    /**
     * Returns purchase order statuses based on the filters that you specify. Date range to search must not be more than 7 days. You can return a list of purchase order statuses using the available filters, or a single purchase order status by providing the purchase order number.
     *
     * **Usage Plans:**
     *
     * | Plan type | Rate (requests per second) | Burst |
     * | ---- | ---- | ---- |
     * |Default| 10 | 10 |
     * |Selling partner specific| Variable | Variable |
     *
     * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    get: operations["getPurchaseOrdersStatus"];
  };
}

export interface definitions {
  /** @description The response schema for the getPurchaseOrders operation. */
  GetPurchaseOrdersResponse: {
    /** @description A list of orders. */
    payload?: definitions["OrderList"];
    errors?: definitions["ErrorList"];
  };
  /** @description The response schema for the getPurchaseOrder operation. */
  GetPurchaseOrderResponse: {
    /** @description The details of the requested order */
    payload?: definitions["Order"];
    errors?: definitions["ErrorList"];
  };
  OrderList: {
    pagination?: definitions["Pagination"];
    orders?: definitions["Order"][];
  };
  Pagination: {
    /** @description A generated string used to pass information to your next request. If NextToken is returned, pass the value of NextToken to the next request. If NextToken is not returned, there are no more purchase order items to return. */
    nextToken?: string;
  };
  Order: {
    /** @description The purchase order number for this order. Formatting Notes: 8-character alpha-numeric code. */
    purchaseOrderNumber: string;
    /** @description This field will contain the current state of the purchase order. */
    purchaseOrderState: "New" | "Acknowledged" | "Closed";
    /** @description Details of an order. */
    orderDetails?: definitions["OrderDetails"];
  };
  /** @description Details of an order. */
  OrderDetails: {
    /**
     * Format: date-time
     * @description The date the purchase order was placed. Must be in ISO-8601 date/time format.
     */
    purchaseOrderDate: string;
    /**
     * Format: date-time
     * @description The date when purchase order was last changed by Amazon after the order was placed. This date will be greater than 'purchaseOrderDate'. This means the PO data was changed on that date and vendors are required to fulfill the  updated PO. The PO changes can be related to Item Quantity, Ship to Location, Ship Window etc. This field will not be present in orders that have not changed after creation. Must be in ISO-8601 date/time format.
     */
    purchaseOrderChangedDate?: string;
    /**
     * Format: date-time
     * @description The date when current purchase order state was changed. Current purchase order state is available in the field 'purchaseOrderState'. Must be in ISO-8601 date/time format.
     */
    purchaseOrderStateChangedDate: string;
    /** @description Type of purchase order. */
    purchaseOrderType?:
      | "RegularOrder"
      | "ConsignedOrder"
      | "NewProductIntroduction"
      | "RushOrder";
    /** @description If the purchase order is an import order, the details for the import order. */
    importDetails?: definitions["ImportDetails"];
    /** @description If requested by the recipient, this field will contain a promotional/deal number. The discount code line is optional. It is used to obtain a price discount on items on the order. */
    dealCode?: string;
    /** @description Payment method used. */
    paymentMethod?: "Invoice" | "Consignment" | "CreditCard" | "Prepaid";
    /** @description Name/Address and tax details of the buying party. */
    buyingParty?: definitions["PartyIdentification"];
    /** @description Name/Address and tax details of the selling party. */
    sellingParty?: definitions["PartyIdentification"];
    /** @description Name/Address and tax details of the ship to party. */
    shipToParty?: definitions["PartyIdentification"];
    /** @description Name/Address and tax details of the bill to party. */
    billToParty?: definitions["PartyIdentification"];
    /** @description This indicates the ship window. Format is start and end date separated by double hyphen (--). For example, 2007-03-01T13:00:00Z--2007-03-11T15:30:00Z. */
    shipWindow?: definitions["DateTimeInterval"];
    /** @description This indicates the delivery window. Format is start and end date separated by double hyphen (--). For example, 2007-03-01T13:00:00Z--2007-03-11T15:30:00Z. */
    deliveryWindow?: definitions["DateTimeInterval"];
    /** @description A list of items in this purchase order. */
    items: definitions["OrderItem"][];
  };
  /** @description Import details for an import order. */
  ImportDetails: {
    /** @description If the recipient requests, contains the shipment method of payment. This is for import PO's only. */
    methodOfPayment?:
      | "PaidByBuyer"
      | "CollectOnDelivery"
      | "DefinedByBuyerAndSeller"
      | "FOBPortOfCall"
      | "PrepaidBySeller"
      | "PaidBySeller";
    /** @description Incoterms (International Commercial Terms) are used to divide transaction costs and responsibilities between buyer and seller and reflect state-of-the-art transportation practices. This is for import purchase orders only. */
    internationalCommercialTerms?:
      | "ExWorks"
      | "FreeCarrier"
      | "FreeOnBoard"
      | "FreeAlongSideShip"
      | "CarriagePaidTo"
      | "CostAndFreight"
      | "CarriageAndInsurancePaidTo"
      | "CostInsuranceAndFreight"
      | "DeliveredAtTerminal"
      | "DeliveredAtPlace"
      | "DeliverDutyPaid";
    /** @description The port where goods on an import purchase order must be delivered by the vendor. This should only be specified when the internationalCommercialTerms is FOB. */
    portOfDelivery?: string;
    /** @description Types and numbers of container(s) for import purchase orders. Can be a comma-separated list if the shipment has multiple containers. HC signifies a high-capacity container. Free-text field, limited to 64 characters. The format will be a comma-delimited list containing values of the type: $NUMBER_OF_CONTAINERS_OF_THIS_TYPE-$CONTAINER_TYPE. The list of values for the container type is: 40'(40-foot container), 40'HC (40-foot high-capacity container), 45', 45'HC, 30', 30'HC, 20', 20'HC. */
    importContainers?: string;
    /** @description Special instructions regarding the shipment. This field is for import purchase orders. */
    shippingInstructions?: string;
  };
  /** @description Defines a date time interval according to ISO8601. Interval is separated by double hyphen (--). */
  DateTimeInterval: string;
  PartyIdentification: {
    /** @description Assigned identification for the party. For example, warehouse code or vendor code. Please refer to specific party for more details. */
    partyId: string;
    /** @description Identification of the party by address. */
    address?: definitions["Address"];
    /** @description Tax registration details of the party. */
    taxInfo?: definitions["TaxRegistrationDetails"];
  };
  /** @description Tax registration details of the entity. */
  TaxRegistrationDetails: {
    /** @description Tax registration type for the entity. */
    taxRegistrationType: "VAT" | "GST";
    /** @description Tax registration number for the entity. For example, VAT ID. */
    taxRegistrationNumber: string;
  };
  /** @description Address of the party. */
  Address: {
    /** @description The name of the person, business or institution at that address. */
    name: string;
    /** @description First line of the address. */
    addressLine1: string;
    /** @description Additional address information, if required. */
    addressLine2?: string;
    /** @description Additional address information, if required. */
    addressLine3?: string;
    /** @description The city where the person, business or institution is located. */
    city?: string;
    /** @description The county where person, business or institution is located. */
    county?: string;
    /** @description The district where person, business or institution is located. */
    district?: string;
    /** @description The state or region where person, business or institution is located. */
    stateOrRegion?: string;
    /** @description The postal code of that address. It conatins a series of letters or digits or both, sometimes including spaces or punctuation. */
    postalCode?: string;
    /** @description The two digit country code. In ISO 3166-1 alpha-2 format. */
    countryCode: string;
    /** @description The phone number of the person, business or institution located at that address. */
    phone?: string;
  };
  OrderItem: {
    /** @description Numbering of the item on the purchase order. The first item will be 1, the second 2, and so on. */
    itemSequenceNumber: string;
    /** @description Amazon Standard Identification Number (ASIN) of an item. */
    amazonProductIdentifier?: string;
    /** @description The vendor selected product identification of the item. */
    vendorProductIdentifier?: string;
    /** @description Item quantity ordered. */
    orderedQuantity: definitions["ItemQuantity"];
    /** @description When true, we will accept backorder confirmations for this item. */
    isBackOrderAllowed: boolean;
    /** @description The price to Amazon each (cost). */
    netCost?: definitions["Money"];
    /** @description The price to Amazon each (list). */
    listPrice?: definitions["Money"];
  };
  /** @description An amount of money, including units in the form of currency. */
  Money: {
    /** @description Three digit currency code in ISO 4217 format. String of length 3. */
    currencyCode?: string;
    amount?: definitions["Decimal"];
  };
  /** @description A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation. <br>**Pattern** : `^-?(0|([1-9]\d*))(\.\d+)?([eE][+-]?\d+)?$`. */
  Decimal: string;
  /** @description The response schema for the submitAcknowledgement operation */
  SubmitAcknowledgementResponse: {
    /** @description The payload for the submitAcknowledgement operation. */
    payload?: definitions["TransactionId"];
    errors?: definitions["ErrorList"];
  };
  TransactionId: {
    /** @description GUID assigned by Amazon to identify this transaction. This value can be used with the Transaction Status API to return the status of this transaction. */
    transactionId?: string;
  };
  /** @description A list of error responses returned when a request is unsuccessful. */
  ErrorList: definitions["Error"][];
  /** @description The request schema for the submitAcknowledgment operation. */
  SubmitAcknowledgementRequest: {
    acknowledgements?: definitions["OrderAcknowledgement"][];
  };
  OrderAcknowledgement: {
    /** @description The purchase order number. Formatting Notes: 8-character alpha-numeric code. */
    purchaseOrderNumber: string;
    /** @description Name, address and tax details of the party receiving a shipment of products. */
    sellingParty: definitions["PartyIdentification"];
    /**
     * Format: date-time
     * @description The date and time when the purchase order is acknowledged, in ISO-8601 date/time format.
     */
    acknowledgementDate: string;
    /** @description A list of the items being acknowledged with associated details. */
    items: definitions["OrderAcknowledgementItem"][];
  };
  /** @description Details of the item being acknowledged. */
  OrderAcknowledgementItem: {
    /** @description Line item sequence number for the item. */
    itemSequenceNumber?: string;
    /** @description Amazon Standard Identification Number (ASIN) of an item. */
    amazonProductIdentifier?: string;
    /** @description The vendor selected product identification of the item. Should be the same as was sent in the purchase order. */
    vendorProductIdentifier?: string;
    /** @description The quantity of this item ordered. */
    orderedQuantity: definitions["ItemQuantity"];
    /** @description The cost to Amazon, which should match the cost on the invoice. This is a required field. If this is left blank the file will reject in Amazon systems. Price information should not be zero or negative. Indicates a net unit price. */
    netCost?: definitions["Money"];
    /** @description The list price. This is required only if a vendor sells books with a list price. */
    listPrice?: definitions["Money"];
    /** @description The discount multiplier that should be applied to the price if a vendor sells books with a list price. This is a multiplier factor to arrive at a final discounted price. A multiplier of .90 would be the factor if a 10% discount is given. */
    discountMultiplier?: string;
    /** @description This is used to indicate acknowledged quantity. */
    itemAcknowledgements: definitions["OrderItemAcknowledgement"][];
  };
  OrderItemAcknowledgement: {
    /** @description This indicates the acknowledgement code. */
    acknowledgementCode: "Accepted" | "Backordered" | "Rejected";
    /** @description Details of quantity acknowledged with the above acknowledgement code. */
    acknowledgedQuantity: definitions["ItemQuantity"];
    /**
     * Format: date-time
     * @description Estimated ship date per line item. Must be in ISO-8601 date/time format.
     */
    scheduledShipDate?: string;
    /**
     * Format: date-time
     * @description Estimated delivery date per line item. Must be in ISO-8601 date/time format.
     */
    scheduledDeliveryDate?: string;
    /** @description Indicates the reason for rejection. */
    rejectionReason?:
      | "TemporarilyUnavailable"
      | "InvalidProductIdentifier"
      | "ObsoleteProduct";
  };
  /** @description Details of quantity ordered. */
  ItemQuantity: {
    /** @description Acknowledged quantity. This value should not be zero. */
    amount?: number;
    /** @description Unit of measure for the acknowledged quantity. */
    unitOfMeasure?: "Cases" | "Eaches";
    /** @description The case size, in the event that we ordered using cases. */
    unitSize?: number;
  };
  /** @description The response schema for the getPurchaseOrdersStatus operation. */
  GetPurchaseOrdersStatusResponse: {
    /** @description Current status of list of purchase orders. */
    payload?: definitions["OrderListStatus"];
    errors?: definitions["ErrorList"];
  };
  OrderListStatus: {
    pagination?: definitions["Pagination"];
    ordersStatus?: definitions["OrderStatus"][];
  };
  /** @description Current status of a purchase order. */
  OrderStatus: {
    /** @description The buyer's purchase order number for this order. Formatting Notes: 8-character alpha-numeric code. */
    purchaseOrderNumber: string;
    /** @description The status of the buyer's purchase order for this order. */
    purchaseOrderStatus: "OPEN" | "CLOSED";
    /**
     * Format: date-time
     * @description The date the purchase order was placed. Must be in ISO-8601 date/time format.
     */
    purchaseOrderDate: string;
    /**
     * Format: date-time
     * @description The date when the purchase order was last updated. Must be in ISO-8601 date/time format.
     */
    lastUpdatedDate?: string;
    /** @description Name/Address and tax details of the selling party. */
    sellingParty: definitions["PartyIdentification"];
    /** @description Name/Address and tax details of the ship to party. */
    shipToParty: definitions["PartyIdentification"];
    /** @description Detailed order status. */
    itemStatus: definitions["ItemStatus"];
  };
  /** @description Detailed description of items order status. */
  ItemStatus: definitions["OrderItemStatus"][];
  OrderItemStatus: {
    /** @description Numbering of the item on the purchase order. The first item will be 1, the second 2, and so on. */
    itemSequenceNumber: string;
    /** @description Buyer's Standard Identification Number (ASIN) of an item. */
    buyerProductIdentifier?: string;
    /** @description The vendor selected product identification of the item. */
    vendorProductIdentifier?: string;
    /** @description The net cost to Amazon each (cost). */
    netCost?: definitions["Money"];
    /** @description The list Price to Amazon each (list). */
    listPrice?: definitions["Money"];
    /** @description Ordered quantity information. */
    orderedQuantity?: {
      /** @description Item quantity ordered. */
      orderedQuantity?: definitions["ItemQuantity"];
      /** @description Details of item quantity ordered. */
      orderedQuantityDetails?: definitions["OrderedQuantityDetails"][];
    };
    /** @description Acknowledgement status information. */
    acknowledgementStatus?: {
      /** @description Confirmation status of line item. */
      confirmationStatus?:
        | "ACCEPTED"
        | "PARTIALLY_ACCEPTED"
        | "REJECTED"
        | "UNCONFIRMED";
      /** @description Item quantities accepted by vendor to be shipped. */
      acceptedQuantity?: definitions["ItemQuantity"];
      /** @description Item quantities rejected by vendor. */
      rejectedQuantity?: definitions["ItemQuantity"];
      /** @description Details of item quantity confirmed. */
      acknowledgementStatusDetails?: definitions["AcknowledgementStatusDetails"][];
    };
    /** @description Item receive status at the buyer's warehouse. */
    receivingStatus?: {
      /** @description Receive status of the line item. */
      receiveStatus?: "NOT_RECEIVED" | "PARTIALLY_RECEIVED" | "RECEIVED";
      /** @description The total item quantity received by the buyer so far. */
      receivedQuantity?: definitions["ItemQuantity"];
      /**
       * Format: date-time
       * @description The date when the most recent item was received at the buyer's warehouse. Must be in ISO-8601 date/time format.
       */
      lastReceiveDate?: string;
    };
  };
  /** @description Details of item quantity ordered */
  OrderedQuantityDetails: {
    /**
     * Format: date-time
     * @description The date when the line item quantity was updated by buyer. Must be in ISO-8601 date/time format.
     */
    updatedDate?: string;
    /** @description Item quantity ordered. */
    orderedQuantity?: definitions["ItemQuantity"];
    /** @description Item quantity ordered. */
    cancelledQuantity?: definitions["ItemQuantity"];
  };
  /** @description Details of item quantity ordered */
  AcknowledgementStatusDetails: {
    /**
     * Format: date-time
     * @description The date when the line item was confirmed by vendor. Must be in ISO-8601 date/time format.
     */
    acknowledgementDate?: string;
    /** @description Item quantity accepted by vendor to be shipped. */
    acceptedQuantity?: definitions["ItemQuantity"];
    /** @description Item quantity rejected by vendor. */
    rejectedQuantity?: definitions["ItemQuantity"];
  };
  /** @description Error response returned when the request is unsuccessful. */
  Error: {
    /** @description An error code that identifies the type of error that occurred. */
    code: string;
    /** @description A message that describes the error condition. */
    message: string;
    /** @description Additional details that can help the caller understand or fix the issue. */
    details?: string;
  };
}

export interface operations {
  /**
   * Returns a list of purchase orders created or changed during the time frame that you specify. You define the time frame using the createdAfter, createdBefore, changedAfter and changedBefore parameters. The date range to search must not be more than 7 days. You can choose to get only the purchase order numbers by setting includeDetails to false. You can then use the getPurchaseOrder operation to receive details for a specific purchase order.
   *
   * **Usage Plans:**
   *
   * | Plan type | Rate (requests per second) | Burst |
   * | ---- | ---- | ---- |
   * |Default| 10 | 10 |
   * |Selling partner specific| Variable | Variable |
   *
   * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
   */
  getPurchaseOrders: {
    parameters: {
      query: {
        /** The limit to the number of records returned. Default value is 100 records. */
        limit?: number;
        /** Purchase orders that became available after this time will be included in the result. Must be in ISO-8601 date/time format. */
        createdAfter?: string;
        /** Purchase orders that became available before this time will be included in the result. Must be in ISO-8601 date/time format. */
        createdBefore?: string;
        /** Sort in ascending or descending order by purchase order creation date. */
        sortOrder?: "ASC" | "DESC";
        /** Used for pagination when there is more purchase orders than the specified result size limit. The token value is returned in the previous API call */
        nextToken?: string;
        /** When true, returns purchase orders with complete details. Otherwise, only purchase order numbers are returned. Default value is true. */
        includeDetails?: string;
        /** Purchase orders that changed after this timestamp will be included in the result. Must be in ISO-8601 date/time format. */
        changedAfter?: string;
        /** Purchase orders that changed before this timestamp will be included in the result. Must be in ISO-8601 date/time format. */
        changedBefore?: string;
        /** Current state of the purchase order item. If this value is Cancelled, this API will return purchase orders which have one or more items cancelled by Amazon with updated item quantity as zero. */
        poItemState?: "Cancelled";
        /** When true, returns purchase orders which were modified after the order was placed. Vendors are required to pull the changed purchase order and fulfill the updated purchase order and not the original one. Default value is false. */
        isPOChanged?: string;
        /** Filters purchase orders based on the purchase order state. */
        purchaseOrderState?: "New" | "Acknowledged" | "Closed";
        /** Filters purchase orders based on the specified ordering vendor code. This value should be same as 'sellingParty.partyId' in the purchase order. If not included in the filter, all purchase orders for all of the vendor codes that exist in the vendor group used to authorize the API client application are returned. */
        orderingVendorCode?: string;
      };
    };
    responses: {
      /** Success. */
      200: {
        headers: {};
        schema: definitions["GetPurchaseOrdersResponse"];
      };
      /** Request has missing or invalid parameters and cannot be parsed. */
      400: {
        headers: {};
        schema: definitions["GetPurchaseOrdersResponse"];
      };
      /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
      403: {
        headers: {};
        schema: definitions["GetPurchaseOrdersResponse"];
      };
      /** The resource specified does not exist. */
      404: {
        headers: {};
        schema: definitions["GetPurchaseOrdersResponse"];
      };
      /** The request payload is in an unsupported format. */
      415: {
        headers: {};
        schema: definitions["GetPurchaseOrdersResponse"];
      };
      /** The frequency of requests was greater than allowed. */
      429: {
        headers: {};
        schema: definitions["GetPurchaseOrdersResponse"];
      };
      /** An unexpected condition occurred that prevented the server from fulfilling the request. */
      500: {
        headers: {};
        schema: definitions["GetPurchaseOrdersResponse"];
      };
      /** Temporary overloading or maintenance of the server. */
      503: {
        headers: {};
        schema: definitions["GetPurchaseOrdersResponse"];
      };
    };
  };
  /**
   * Returns a purchase order based on the purchaseOrderNumber value that you specify.
   *
   * **Usage Plans:**
   *
   * | Plan type | Rate (requests per second) | Burst |
   * | ---- | ---- | ---- |
   * |Default| 10 | 10 |
   * |Selling partner specific| Variable | Variable |
   *
   * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
   */
  getPurchaseOrder: {
    parameters: {
      path: {
        /** The purchase order identifier for the order that you want. Formatting Notes: 8-character alpha-numeric code. */
        purchaseOrderNumber: string;
      };
    };
    responses: {
      /** Success. */
      200: {
        headers: {};
        schema: definitions["GetPurchaseOrderResponse"];
      };
      /** Request has missing or invalid parameters and cannot be parsed. */
      400: {
        headers: {};
        schema: definitions["GetPurchaseOrderResponse"];
      };
      /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
      401: {
        headers: {};
        schema: definitions["GetPurchaseOrderResponse"];
      };
      /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
      403: {
        headers: {};
        schema: definitions["GetPurchaseOrderResponse"];
      };
      /** The resource specified does not exist. */
      404: {
        headers: {};
        schema: definitions["GetPurchaseOrderResponse"];
      };
      /** The request payload is in an unsupported format. */
      415: {
        headers: {};
        schema: definitions["GetPurchaseOrderResponse"];
      };
      /** The frequency of requests was greater than allowed. */
      429: {
        headers: {};
        schema: definitions["GetPurchaseOrderResponse"];
      };
      /** An unexpected condition occurred that prevented the server from fulfilling the request. */
      500: {
        headers: {};
        schema: definitions["GetPurchaseOrderResponse"];
      };
      /** Temporary overloading or maintenance of the server. */
      503: {
        headers: {};
        schema: definitions["GetPurchaseOrderResponse"];
      };
    };
  };
  /**
   * Submits acknowledgements for one or more purchase orders.
   *
   * **Usage Plans:**
   *
   * | Plan type | Rate (requests per second) | Burst |
   * | ---- | ---- | ---- |
   * |Default| 10 | 10 |
   * |Selling partner specific| Variable | Variable |
   *
   * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
   */
  submitAcknowledgement: {
    parameters: {
      body: {
        body: definitions["SubmitAcknowledgementRequest"];
      };
    };
    responses: {
      /** Success. */
      202: {
        headers: {};
        schema: definitions["SubmitAcknowledgementResponse"];
      };
      /** Request has missing or invalid parameters and cannot be parsed. */
      400: {
        headers: {};
        schema: definitions["SubmitAcknowledgementResponse"];
      };
      /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
      403: {
        headers: {};
        schema: definitions["SubmitAcknowledgementResponse"];
      };
      /** The resource specified does not exist. */
      404: {
        headers: {};
        schema: definitions["SubmitAcknowledgementResponse"];
      };
      /** The request size exceeded the maximum accepted size. */
      413: {
        headers: {};
        schema: definitions["SubmitAcknowledgementResponse"];
      };
      /** The request payload is in an unsupported format. */
      415: {
        headers: {};
        schema: definitions["SubmitAcknowledgementResponse"];
      };
      /** The frequency of requests was greater than allowed. */
      429: {
        headers: {};
        schema: definitions["SubmitAcknowledgementResponse"];
      };
      /** An unexpected condition occurred that prevented the server from fulfilling the request. */
      500: {
        headers: {};
        schema: definitions["SubmitAcknowledgementResponse"];
      };
      /** Temporary overloading or maintenance of the server. */
      503: {
        headers: {};
        schema: definitions["SubmitAcknowledgementResponse"];
      };
    };
  };
  /**
   * Returns purchase order statuses based on the filters that you specify. Date range to search must not be more than 7 days. You can return a list of purchase order statuses using the available filters, or a single purchase order status by providing the purchase order number.
   *
   * **Usage Plans:**
   *
   * | Plan type | Rate (requests per second) | Burst |
   * | ---- | ---- | ---- |
   * |Default| 10 | 10 |
   * |Selling partner specific| Variable | Variable |
   *
   * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
   */
  getPurchaseOrdersStatus: {
    parameters: {
      query: {
        /** The limit to the number of records returned. Default value is 100 records. */
        limit?: number;
        /** Sort in ascending or descending order by purchase order creation date. */
        sortOrder?: "ASC" | "DESC";
        /** Used for pagination when there are more purchase orders than the specified result size limit. */
        nextToken?: string;
        /** Purchase orders that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format. */
        createdAfter?: string;
        /** Purchase orders that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format. */
        createdBefore?: string;
        /** Purchase orders for which the last purchase order update happened after this timestamp will be included in the result. Must be in ISO-8601 date/time format. */
        updatedAfter?: string;
        /** Purchase orders for which the last purchase order update happened before this timestamp will be included in the result. Must be in ISO-8601 date/time format. */
        updatedBefore?: string;
        /** Provides purchase order status for the specified purchase order number. */
        purchaseOrderNumber?: string;
        /** Filters purchase orders based on the specified purchase order status. If not included in filter, this will return purchase orders for all statuses. */
        purchaseOrderStatus?: "OPEN" | "CLOSED";
        /** Filters purchase orders based on their item confirmation status. If the item confirmation status is not included in the filter, purchase orders for all confirmation statuses are included. */
        itemConfirmationStatus?:
          | "ACCEPTED"
          | "PARTIALLY_ACCEPTED"
          | "REJECTED"
          | "UNCONFIRMED";
        /** Filters purchase orders based on the purchase order's item receive status. If the item receive status is not included in the filter, purchase orders for all receive statuses are included. */
        itemReceiveStatus?: "NOT_RECEIVED" | "PARTIALLY_RECEIVED" | "RECEIVED";
        /** Filters purchase orders based on the specified ordering vendor code. This value should be same as 'sellingParty.partyId' in the purchase order. If not included in filter, all purchase orders for all the vendor codes that exist in the vendor group used to authorize API client application are returned. */
        orderingVendorCode?: string;
        /** Filters purchase orders for a specific buyer's Fulfillment Center/warehouse by providing ship to location id here. This value should be same as 'shipToParty.partyId' in the purchase order. If not included in filter, this will return purchase orders for all the buyer's warehouses used for vendor group purchase orders. */
        shipToPartyId?: string;
      };
    };
    responses: {
      /** Success. */
      200: {
        headers: {};
        schema: definitions["GetPurchaseOrdersStatusResponse"];
      };
      /** Request has missing or invalid parameters and cannot be parsed. */
      400: {
        headers: {};
        schema: definitions["GetPurchaseOrdersStatusResponse"];
      };
      /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
      403: {
        headers: {};
        schema: definitions["GetPurchaseOrdersStatusResponse"];
      };
      /** The resource specified does not exist. */
      404: {
        headers: {};
        schema: definitions["GetPurchaseOrdersStatusResponse"];
      };
      /** The request payload is in an unsupported format. */
      415: {
        headers: {};
        schema: definitions["GetPurchaseOrdersStatusResponse"];
      };
      /** The frequency of requests was greater than allowed. */
      429: {
        headers: {};
        schema: definitions["GetPurchaseOrdersStatusResponse"];
      };
      /** An unexpected condition occurred that prevented the server from fulfilling the request. */
      500: {
        headers: {};
        schema: definitions["GetPurchaseOrdersStatusResponse"];
      };
      /** Temporary overloading or maintenance of the server. */
      503: {
        headers: {};
        schema: definitions["GetPurchaseOrdersStatusResponse"];
      };
    };
  };
}

export interface external {}

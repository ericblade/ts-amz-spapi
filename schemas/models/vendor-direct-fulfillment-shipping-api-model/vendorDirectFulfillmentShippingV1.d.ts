/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    "/vendor/directFulfillment/shipping/v1/shippingLabels": {
        /**
         * Returns a list of shipping labels created during the time frame that you specify. You define that time frame using the createdAfter and createdBefore parameters. You must use both of these parameters. The date range to search must not be more than 7 days.
         *
         * **Usage Plans:**
         *
         * | Plan type | Rate (requests per second) | Burst |
         * | ---- | ---- | ---- |
         * |Default| 10 | 10 |
         * |Selling partner specific| Variable | Variable |
         *
         * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        get: operations["getShippingLabels"];
        /**
         * Creates a shipping label for a purchase order and returns a transactionId for reference.
         *
         * **Usage Plans:**
         *
         * | Plan type | Rate (requests per second) | Burst |
         * | ---- | ---- | ---- |
         * |Default| 10 | 10 |
         * |Selling partner specific| Variable | Variable |
         *
         * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        post: operations["submitShippingLabelRequest"];
    };
    "/vendor/directFulfillment/shipping/v1/shippingLabels/{purchaseOrderNumber}": {
        /**
         * Returns a shipping label for the purchaseOrderNumber that you specify.
         *
         * **Usage Plans:**
         *
         * | Plan type | Rate (requests per second) | Burst |
         * | ---- | ---- | ---- |
         * |Default| 10 | 10 |
         * |Selling partner specific| Variable | Variable |
         *
         * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        get: operations["getShippingLabel"];
    };
    "/vendor/directFulfillment/shipping/v1/shipmentConfirmations": {
        /**
         * Submits one or more shipment confirmations for vendor orders.
         *
         * **Usage Plans:**
         *
         * | Plan type | Rate (requests per second) | Burst |
         * | ---- | ---- | ---- |
         * |Default| 10 | 10 |
         * |Selling partner specific| Variable | Variable |
         *
         * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        post: operations["submitShipmentConfirmations"];
    };
    "/vendor/directFulfillment/shipping/v1/shipmentStatusUpdates": {
        /**
         * This API call is only to be used by Vendor-Own-Carrier (VOC) vendors. Calling this API will submit a shipment status update for the package that a vendor has shipped. It will provide the Amazon customer visibility on their order, when the package is outside of Amazon Network visibility.
         *
         * **Usage Plans:**
         *
         * | Plan type | Rate (requests per second) | Burst |
         * | ---- | ---- | ---- |
         * |Default| 10 | 10 |
         * |Selling partner specific| Variable | Variable |
         *
         * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        post: operations["submitShipmentStatusUpdates"];
    };
    "/vendor/directFulfillment/shipping/v1/customerInvoices": {
        /**
         * Returns a list of customer invoices created during a time frame that you specify. You define the  time frame using the createdAfter and createdBefore parameters. You must use both of these parameters. The date range to search must be no more than 7 days.
         *
         * **Usage Plans:**
         *
         * | Plan type | Rate (requests per second) | Burst |
         * | ---- | ---- | ---- |
         * |Default| 10 | 10 |
         * |Selling partner specific| Variable | Variable |
         *
         * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        get: operations["getCustomerInvoices"];
    };
    "/vendor/directFulfillment/shipping/v1/customerInvoices/{purchaseOrderNumber}": {
        /**
         * Returns a customer invoice based on the purchaseOrderNumber that you specify.
         *
         * **Usage Plans:**
         *
         * | Plan type | Rate (requests per second) | Burst |
         * | ---- | ---- | ---- |
         * |Default| 10 | 10 |
         * |Selling partner specific| Variable | Variable |
         *
         * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        get: operations["getCustomerInvoice"];
    };
    "/vendor/directFulfillment/shipping/v1/packingSlips": {
        /**
         * Returns a list of packing slips for the purchase orders that match the criteria specified. Date range to search must not be more than 7 days.
         *
         * **Usage Plans:**
         *
         * | Plan type | Rate (requests per second) | Burst |
         * | ---- | ---- | ---- |
         * |Default| 10 | 10 |
         * |Selling partner specific| Variable | Variable |
         *
         * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        get: operations["getPackingSlips"];
    };
    "/vendor/directFulfillment/shipping/v1/packingSlips/{purchaseOrderNumber}": {
        /**
         * Returns a packing slip based on the purchaseOrderNumber that you specify.
         *
         * **Usage Plans:**
         *
         * | Plan type | Rate (requests per second) | Burst |
         * | ---- | ---- | ---- |
         * |Default| 10 | 10 |
         * |Selling partner specific| Variable | Variable |
         *
         * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        get: operations["getPackingSlip"];
    };
}
export interface definitions {
    /** @description Packing slip information. */
    PackingSlip: {
        /** @description Purchase order number of the shipment that the packing slip is for. */
        purchaseOrderNumber: string;
        /** @description A Base64encoded string of the packing slip PDF. */
        content: string;
        /** @description The format of the file such as PDF, JPEG etc. */
        contentType?: "application/pdf";
    };
    /** @description A list of packing slips. */
    PackingSlipList: {
        pagination?: definitions["Pagination"];
        packingSlips?: definitions["PackingSlip"][];
    };
    GetPackingSlipListResponse: {
        payload?: definitions["PackingSlipList"];
        errors?: definitions["ErrorList"];
    };
    GetPackingSlipResponse: {
        payload?: definitions["PackingSlip"];
        errors?: definitions["ErrorList"];
    };
    SubmitShippingLabelsRequest: {
        shippingLabelRequests?: definitions["ShippingLabelRequest"][];
    };
    ShippingLabelRequest: {
        /** @description Purchase order number of the order for which to create a shipping label. */
        purchaseOrderNumber: string;
        /** @description ID of the selling party or vendor. */
        sellingParty: definitions["PartyIdentification"];
        /** @description Warehouse code of vendor. */
        shipFromParty: definitions["PartyIdentification"];
        /** @description A list of the packages in this shipment. */
        containers?: definitions["Container"][];
    };
    /** @description Details of the item being shipped. */
    Item: {
        /** @description Item Sequence Number for the item. This must be the same value as sent in order for a given item. */
        itemSequenceNumber: number;
        /** @description Buyer's Standard Identification Number (ASIN) of an item. Either buyerProductIdentifier or vendorProductIdentifier is required. */
        buyerProductIdentifier?: string;
        /** @description The vendor selected product identification of the item. Should be the same as was sent in the purchase order, like SKU Number. */
        vendorProductIdentifier?: string;
        /** @description Total item quantity shipped in this shipment. */
        shippedQuantity: definitions["ItemQuantity"];
    };
    PackedItem: {
        /** @description Item Sequence Number for the item. This must be the same value as sent in the order for a given item. */
        itemSequenceNumber: number;
        /** @description Buyer's Standard Identification Number (ASIN) of an item. Either buyerProductIdentifier or vendorProductIdentifier is required. */
        buyerProductIdentifier?: string;
        /** @description The vendor selected product identification of the item. Should be the same as was sent in the Purchase Order, like SKU Number. */
        vendorProductIdentifier?: string;
        /** @description Total item quantity packed in the container. */
        packedQuantity: definitions["ItemQuantity"];
    };
    PartyIdentification: {
        /** @description Assigned Identification for the party. */
        partyId: string;
        /** @description Identification of the party by address. */
        address?: definitions["Address"];
        /** @description Tax registration details of the entity. */
        taxRegistrationDetails?: definitions["TaxRegistrationDetails"][];
    };
    /** @description Details about a shipment. */
    ShipmentDetails: {
        /**
         * Format: date-time
         * @description This field indicates the date of the departure of the shipment from vendor's location. Vendors are requested to send ASNs within 30 minutes of departure from their warehouse/distribution center or at least 6 hours prior to the appointment time at the Amazon destination warehouse, whichever is sooner. Shipped date mentioned in the Shipment Confirmation should not be in the future.
         */
        shippedDate: string;
        /** @description Indicate the shipment status. */
        shipmentStatus: "SHIPPED" | "FLOOR_DENIAL";
        /** @description Provide the priority of the shipment. */
        isPriorityShipment?: boolean;
        /** @description The vendor order number is a unique identifier generated by a vendor for their reference. */
        vendorOrderNumber?: string;
        /**
         * Format: date-time
         * @description Date on which the shipment is expected to reach the buyer's warehouse. It needs to be an estimate based on the average transit time between the ship-from location and the destination. The exact appointment time will be provided by buyer and is potentially not known when creating the shipment confirmation.
         */
        estimatedDeliveryDate?: string;
    };
    /** @description Details for the shipment status update given by the vendor for the specific package. */
    StatusUpdateDetails: {
        /** @description This is required to be provided for every package and should match with the trackingNumber sent for the shipment confirmation. */
        trackingNumber: string;
        /** @description Indicates the shipment status code of the package that provides transportation information for Amazon tracking systems and ultimately for the final customer. */
        statusCode: string;
        /** @description Provides a reason code for the status of the package that will provide additional information about the transportation status. */
        reasonCode: string;
        /**
         * Format: date-time
         * @description The date and time when the shipment status was updated. This field is expected to be in ISO-8601 date/time format, with UTC time zone or UTC offset. For example, 2020-07-16T23:00:00Z or 2020-07-16T23:00:00+01:00.
         */
        statusDateTime: string;
        statusLocationAddress: definitions["Address"];
        shipmentSchedule?: {
            /**
             * Format: date-time
             * @description Date on which the shipment is expected to reach the customer delivery location. This field is expected to be in ISO-8601 date/time format, with UTC time zone or UTC offset. For example, 2020-07-16T23:00:00Z or 2020-07-16T23:00:00+01:00.
             */
            estimatedDeliveryDateTime?: string;
            /**
             * Format: date-time
             * @description This field indicates the date and time at the start of the appointment window scheduled to deliver the shipment. This field is expected to be in ISO-8601 date/time format, with UTC time zone or UTC offset. For example, 2020-07-16T23:00:00Z or 2020-07-16T23:00:00+01:00.
             */
            apptWindowStartDateTime?: string;
            /**
             * Format: date-time
             * @description This field indicates the date and time at the end of the appointment window scheduled to deliver the shipment. This field is expected to be in ISO-8601 date/time format, with UTC time zone or UTC offset. For example, 2020-07-16T23:00:00Z or 2020-07-16T23:00:00+01:00.
             */
            apptWindowEndDateTime?: string;
        };
    };
    /** @description Tax registration details of the entity. */
    TaxRegistrationDetails: {
        /** @description Tax registration type for the entity. */
        taxRegistrationType?: "VAT" | "GST";
        /** @description Tax registration number for the party. For example, VAT ID. */
        taxRegistrationNumber: string;
        /** @description Address associated with the tax registration number. */
        taxRegistrationAddress?: definitions["Address"];
        /** @description Tax registration message that can be used for additional tax related details. */
        taxRegistrationMessages?: string;
    };
    /** @description Address of the party. */
    Address: {
        /** @description The name of the person, business or institution at that address. */
        name: string;
        /** @description First line of the address. */
        addressLine1: string;
        /** @description Additional street address information, if required. */
        addressLine2?: string;
        /** @description Additional street address information, if required. */
        addressLine3?: string;
        /** @description The city where the person, business or institution is located. */
        city?: string;
        /** @description The county where person, business or institution is located. */
        county?: string;
        /** @description The district where person, business or institution is located. */
        district?: string;
        /** @description The state or region where person, business or institution is located. */
        stateOrRegion?: string;
        /** @description The postal code of that address. It contains a series of letters or digits or both, sometimes including spaces or punctuation. */
        postalCode?: string;
        /** @description The two digit country code in ISO 3166-1 alpha-2 format. */
        countryCode: string;
        /** @description The phone number of the person, business or institution located at that address. */
        phone?: string;
    };
    /** @description Physical dimensional measurements of a container. */
    Dimensions: {
        /** @description The length of the container. */
        length: definitions["Decimal"];
        /** @description The width of the container. */
        width: definitions["Decimal"];
        /** @description The height of the container. */
        height: definitions["Decimal"];
        /** @description The unit of measure for dimensions. */
        unitOfMeasure: "IN" | "CM";
    };
    /** @description The weight. */
    Weight: {
        /** @description The unit of measurement. */
        unitOfMeasure: "KG" | "LB";
        /** @description The measurement value. */
        value: definitions["Decimal"];
    };
    /** @description A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation.  <br>**Pattern** : `^-?(0|([1-9]\\d*))(\\.\\d+)?([eE][+-]?\\d+)?$`. */
    Decimal: string;
    /** @description Details of item quantity. */
    ItemQuantity: {
        /** @description Quantity of units shipped for a specific item at a shipment level. If the item is present only in certain packages or pallets within the shipment, please provide this at the appropriate package or pallet level. */
        amount: number;
        /** @description Unit of measure for the shipped quantity. */
        unitOfMeasure: string;
    };
    /** @description The response schema for the submitShipmentConfirmations operation. */
    SubmitShipmentConfirmationsResponse: {
        /** @description The response payload for the submitShipmentConfirmations operation. */
        payload?: definitions["TransactionReference"];
        errors?: definitions["ErrorList"];
    };
    /** @description The response schema for the submitShipmentStatusUpdates operation. */
    SubmitShipmentStatusUpdatesResponse: {
        /** @description The response payload for the submitShipmentStatusUpdates operation. */
        payload?: definitions["TransactionReference"];
        errors?: definitions["ErrorList"];
    };
    /** @description The response schema for the getShippingLabels operation. */
    GetShippingLabelListResponse: {
        /** @description List of ship labels. */
        payload?: definitions["ShippingLabelList"];
        errors?: definitions["ErrorList"];
    };
    /** @description The response schema for the getShippingLabel operation. */
    GetShippingLabelResponse: {
        /** @description The payload for the getShippingLabel operation. */
        payload?: definitions["ShippingLabel"];
        errors?: definitions["ErrorList"];
    };
    ShippingLabelList: {
        pagination?: definitions["Pagination"];
        shippingLabels?: definitions["ShippingLabel"][];
    };
    /** @description Details of the shipment label. */
    LabelData: {
        /** @description Identifier for the package. The first package will be 001, the second 002, and so on. This number is used as a reference to refer to this package from the pallet level. */
        packageIdentifier?: string;
        /** @description Package tracking identifier from the shipping carrier. */
        trackingNumber?: string;
        /** @description Ship method to be used for shipping the order. Amazon defines Ship Method Codes indicating shipping carrier and shipment service level. Ship Method Codes are case and format sensitive. The same ship method code should returned on the shipment confirmation. Note that the Ship Method Codes are vendor specific and will be provided to each vendor during the implementation. */
        shipMethod?: string;
        /** @description Shipping method name for internal reference. */
        shipMethodName?: string;
        /** @description This field will contain the Base64encoded string of the shipment label content. */
        content: string;
    };
    ShippingLabel: {
        /** @description This field will contain the Purchase Order Number for this order. */
        purchaseOrderNumber: string;
        /** @description ID of the selling party or vendor. */
        sellingParty: definitions["PartyIdentification"];
        /** @description Warehouse code of vendor. */
        shipFromParty: definitions["PartyIdentification"];
        /** @description Format of the label. */
        labelFormat: "PNG" | "ZPL";
        /** @description Provides the details of the packages in this shipment. */
        labelData: definitions["LabelData"][];
    };
    /** @description The response schema for the submitShippingLabelRequest operation. */
    SubmitShippingLabelsResponse: {
        /** @description The response payload for the submitShippingLabelRequest operation. */
        payload?: definitions["TransactionReference"];
        errors?: definitions["ErrorList"];
    };
    SubmitShipmentConfirmationsRequest: {
        shipmentConfirmations?: definitions["ShipmentConfirmation"][];
    };
    ShipmentConfirmation: {
        /** @description Purchase order number corresponding to the shipment. */
        purchaseOrderNumber: string;
        /** @description Shipment information. */
        shipmentDetails: definitions["ShipmentDetails"];
        /** @description ID of the selling party or vendor. */
        sellingParty: definitions["PartyIdentification"];
        /** @description Warehouse code of vendor. */
        shipFromParty: definitions["PartyIdentification"];
        /** @description Provide the details of the items in this shipment. If any of the item details field is common at a package or a pallet level, then provide them at the corresponding package. */
        items: definitions["Item"][];
        /** @description Provide the details of the items in this shipment. If any of the item details field is common at a package or a pallet level, then provide them at the corresponding package. */
        containers?: definitions["Container"][];
    };
    SubmitShipmentStatusUpdatesRequest: {
        shipmentStatusUpdates?: definitions["ShipmentStatusUpdate"][];
    };
    ShipmentStatusUpdate: {
        /** @description Purchase order number of the shipment for which to update the shipment status. */
        purchaseOrderNumber: string;
        /** @description ID of the selling party or vendor. */
        sellingParty: definitions["PartyIdentification"];
        /** @description Warehouse code of vendor. */
        shipFromParty: definitions["PartyIdentification"];
        /** @description Provide the details about the status of the shipment at that particular point of time. */
        statusUpdateDetails: definitions["StatusUpdateDetails"];
    };
    /** @description The response schema for the getCustomerInvoices operation. */
    GetCustomerInvoicesResponse: {
        /** @description List of customer invoices. */
        payload?: definitions["CustomerInvoiceList"];
        errors?: definitions["ErrorList"];
    };
    /** @description The response schema for the getCustomerInvoice operation. */
    GetCustomerInvoiceResponse: {
        /** @description The payload for the getCustomerInvoice operation. */
        payload?: definitions["CustomerInvoice"];
        errors?: definitions["ErrorList"];
    };
    CustomerInvoiceList: {
        pagination?: definitions["Pagination"];
        customerInvoices?: definitions["CustomerInvoice"][];
    };
    Pagination: {
        /** @description A generated string used to pass information to your next request. If NextToken is returned, pass the value of NextToken to the next request. If NextToken is not returned, there are no more order items to return. */
        nextToken?: string;
    };
    CustomerInvoice: {
        /** @description The purchase order number for this order. */
        purchaseOrderNumber: string;
        /** @description The Base64encoded customer invoice. */
        content: string;
    };
    TransactionReference: {
        /** @description GUID to identify this transaction. This value can be used with the Transaction Status API to return the status of this transaction. */
        transactionId?: string;
    };
    /** @description A list of error responses returned when a request is unsuccessful. */
    ErrorList: definitions["Error"][];
    /** @description Error response returned when the request is unsuccessful. */
    Error: {
        /** @description An error code that identifies the type of error that occurred. */
        code: string;
        /** @description A message that describes the error condition. */
        message: string;
        /** @description Additional details that can help the caller understand or fix the issue. */
        details?: string;
    };
    Container: {
        /** @description The type of container. */
        containerType: "carton" | "pallet";
        /** @description The container identifier. */
        containerIdentifier: string;
        /** @description The tracking number. */
        trackingNumber?: string;
        /** @description The manifest identifier. */
        manifestId?: string;
        /** @description The date of the manifest. */
        manifestDate?: string;
        /** @description The shipment method. */
        shipMethod?: string;
        /** @description SCAC code required for NA VOC vendors only. */
        scacCode?: string;
        /** @description Carrier required for EU VOC vendors only. */
        carrier?: string;
        /** @description An integer that must be submitted for multi-box shipments only, where one item may come in separate packages. */
        containerSequenceNumber?: number;
        dimensions?: definitions["Dimensions"];
        weight?: definitions["Weight"];
        /** @description A list of packed items. */
        packedItems: definitions["PackedItem"][];
    };
}
export interface operations {
    /**
     * Returns a list of shipping labels created during the time frame that you specify. You define that time frame using the createdAfter and createdBefore parameters. You must use both of these parameters. The date range to search must not be more than 7 days.
     *
     * **Usage Plans:**
     *
     * | Plan type | Rate (requests per second) | Burst |
     * | ---- | ---- | ---- |
     * |Default| 10 | 10 |
     * |Selling partner specific| Variable | Variable |
     *
     * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    getShippingLabels: {
        parameters: {
            query: {
                /** The vendor warehouseId for order fulfillment. If not specified, the result will contain orders for all warehouses. */
                shipFromPartyId?: string;
                /** The limit to the number of records returned. */
                limit?: number;
                /** Shipping labels that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format. */
                createdAfter: string;
                /** Shipping labels that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format. */
                createdBefore: string;
                /** Sort ASC or DESC by order creation date. */
                sortOrder?: "ASC" | "DESC";
                /** Used for pagination when there are more ship labels than the specified result size limit. The token value is returned in the previous API call. */
                nextToken?: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["GetShippingLabelListResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["GetShippingLabelListResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["GetShippingLabelListResponse"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["GetShippingLabelListResponse"];
            };
            /** The request payload is in an unsupported format. */
            415: {
                headers: {};
                schema: definitions["GetShippingLabelListResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["GetShippingLabelListResponse"];
            };
            /** Encountered an unexpected condition which prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["GetShippingLabelListResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["GetShippingLabelListResponse"];
            };
        };
    };
    /**
     * Creates a shipping label for a purchase order and returns a transactionId for reference.
     *
     * **Usage Plans:**
     *
     * | Plan type | Rate (requests per second) | Burst |
     * | ---- | ---- | ---- |
     * |Default| 10 | 10 |
     * |Selling partner specific| Variable | Variable |
     *
     * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    submitShippingLabelRequest: {
        parameters: {
            body: {
                body: definitions["SubmitShippingLabelsRequest"];
            };
        };
        responses: {
            /** Success. */
            202: {
                headers: {};
                schema: definitions["SubmitShippingLabelsResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["SubmitShippingLabelsResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["SubmitShippingLabelsResponse"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["SubmitShippingLabelsResponse"];
            };
            /** The request size exceeded the maximum accepted size. */
            413: {
                headers: {};
                schema: definitions["SubmitShippingLabelsResponse"];
            };
            /** The request payload is in an unsupported format. */
            415: {
                headers: {};
                schema: definitions["SubmitShippingLabelsResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["SubmitShippingLabelsResponse"];
            };
            /** Encountered an unexpected condition which prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["SubmitShippingLabelsResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["SubmitShippingLabelsResponse"];
            };
        };
    };
    /**
     * Returns a shipping label for the purchaseOrderNumber that you specify.
     *
     * **Usage Plans:**
     *
     * | Plan type | Rate (requests per second) | Burst |
     * | ---- | ---- | ---- |
     * |Default| 10 | 10 |
     * |Selling partner specific| Variable | Variable |
     *
     * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    getShippingLabel: {
        parameters: {
            path: {
                /** The purchase order number for which you want to return the shipping label. It should be the same purchaseOrderNumber as received in the order. */
                purchaseOrderNumber: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["GetShippingLabelResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["GetShippingLabelResponse"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["GetShippingLabelResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["GetShippingLabelResponse"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["GetShippingLabelResponse"];
            };
            /** The request payload is in an unsupported format. */
            415: {
                headers: {};
                schema: definitions["GetShippingLabelResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["GetShippingLabelResponse"];
            };
            /** Encountered an unexpected condition which prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["GetShippingLabelResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["GetShippingLabelResponse"];
            };
        };
    };
    /**
     * Submits one or more shipment confirmations for vendor orders.
     *
     * **Usage Plans:**
     *
     * | Plan type | Rate (requests per second) | Burst |
     * | ---- | ---- | ---- |
     * |Default| 10 | 10 |
     * |Selling partner specific| Variable | Variable |
     *
     * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    submitShipmentConfirmations: {
        parameters: {
            body: {
                body: definitions["SubmitShipmentConfirmationsRequest"];
            };
        };
        responses: {
            /** Success. */
            202: {
                headers: {};
                schema: definitions["SubmitShipmentConfirmationsResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["SubmitShipmentConfirmationsResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["SubmitShipmentConfirmationsResponse"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["SubmitShipmentConfirmationsResponse"];
            };
            /** The request size exceeded the maximum accepted size. */
            413: {
                headers: {};
                schema: definitions["SubmitShipmentConfirmationsResponse"];
            };
            /** The request payload is in an unsupported format. */
            415: {
                headers: {};
                schema: definitions["SubmitShipmentConfirmationsResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["SubmitShipmentConfirmationsResponse"];
            };
            /** Encountered an unexpected condition which prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["SubmitShipmentConfirmationsResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["SubmitShipmentConfirmationsResponse"];
            };
        };
    };
    /**
     * This API call is only to be used by Vendor-Own-Carrier (VOC) vendors. Calling this API will submit a shipment status update for the package that a vendor has shipped. It will provide the Amazon customer visibility on their order, when the package is outside of Amazon Network visibility.
     *
     * **Usage Plans:**
     *
     * | Plan type | Rate (requests per second) | Burst |
     * | ---- | ---- | ---- |
     * |Default| 10 | 10 |
     * |Selling partner specific| Variable | Variable |
     *
     * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    submitShipmentStatusUpdates: {
        parameters: {
            body: {
                body: definitions["SubmitShipmentStatusUpdatesRequest"];
            };
        };
        responses: {
            /** Success. */
            202: {
                headers: {};
                schema: definitions["SubmitShipmentStatusUpdatesResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["SubmitShipmentStatusUpdatesResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["SubmitShipmentStatusUpdatesResponse"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["SubmitShipmentStatusUpdatesResponse"];
            };
            /** The request size exceeded the maximum accepted size. */
            413: {
                headers: {};
                schema: definitions["SubmitShipmentStatusUpdatesResponse"];
            };
            /** The request payload is in an unsupported format. */
            415: {
                headers: {};
                schema: definitions["SubmitShipmentStatusUpdatesResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["SubmitShipmentStatusUpdatesResponse"];
            };
            /** Encountered an unexpected condition which prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["SubmitShipmentStatusUpdatesResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["SubmitShipmentStatusUpdatesResponse"];
            };
        };
    };
    /**
     * Returns a list of customer invoices created during a time frame that you specify. You define the  time frame using the createdAfter and createdBefore parameters. You must use both of these parameters. The date range to search must be no more than 7 days.
     *
     * **Usage Plans:**
     *
     * | Plan type | Rate (requests per second) | Burst |
     * | ---- | ---- | ---- |
     * |Default| 10 | 10 |
     * |Selling partner specific| Variable | Variable |
     *
     * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    getCustomerInvoices: {
        parameters: {
            query: {
                /** The vendor warehouseId for order fulfillment. If not specified, the result will contain orders for all warehouses. */
                shipFromPartyId?: string;
                /** The limit to the number of records returned */
                limit?: number;
                /** Orders that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format. */
                createdAfter: string;
                /** Orders that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format. */
                createdBefore: string;
                /** Sort ASC or DESC by order creation date. */
                sortOrder?: "ASC" | "DESC";
                /** Used for pagination when there are more orders than the specified result size limit. The token value is returned in the previous API call. */
                nextToken?: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["GetCustomerInvoicesResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["GetCustomerInvoiceResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["GetCustomerInvoiceResponse"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["GetCustomerInvoiceResponse"];
            };
            /** The request payload is in an unsupported format. */
            415: {
                headers: {};
                schema: definitions["GetCustomerInvoiceResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["GetCustomerInvoiceResponse"];
            };
            /** Encountered an unexpected condition which prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["GetCustomerInvoiceResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["GetCustomerInvoiceResponse"];
            };
        };
    };
    /**
     * Returns a customer invoice based on the purchaseOrderNumber that you specify.
     *
     * **Usage Plans:**
     *
     * | Plan type | Rate (requests per second) | Burst |
     * | ---- | ---- | ---- |
     * |Default| 10 | 10 |
     * |Selling partner specific| Variable | Variable |
     *
     * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    getCustomerInvoice: {
        parameters: {
            path: {
                /** Purchase order number of the shipment for which to return the invoice. */
                purchaseOrderNumber: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["GetCustomerInvoiceResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["GetCustomerInvoiceResponse"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["GetCustomerInvoiceResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["GetCustomerInvoiceResponse"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["GetCustomerInvoiceResponse"];
            };
            /** The request payload is in an unsupported format. */
            415: {
                headers: {};
                schema: definitions["GetCustomerInvoiceResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["GetCustomerInvoiceResponse"];
            };
            /** Encountered an unexpected condition which prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["GetCustomerInvoiceResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["GetCustomerInvoiceResponse"];
            };
        };
    };
    /**
     * Returns a list of packing slips for the purchase orders that match the criteria specified. Date range to search must not be more than 7 days.
     *
     * **Usage Plans:**
     *
     * | Plan type | Rate (requests per second) | Burst |
     * | ---- | ---- | ---- |
     * |Default| 10 | 10 |
     * |Selling partner specific| Variable | Variable |
     *
     * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    getPackingSlips: {
        parameters: {
            query: {
                /** The vendor warehouseId for order fulfillment. If not specified the result will contain orders for all warehouses. */
                shipFromPartyId?: string;
                /** The limit to the number of records returned */
                limit?: number;
                /** Packing slips that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format. */
                createdAfter: string;
                /** Packing slips that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format. */
                createdBefore: string;
                /** Sort ASC or DESC by packing slip creation date. */
                sortOrder?: "ASC" | "DESC";
                /** Used for pagination when there are more packing slips than the specified result size limit. The token value is returned in the previous API call. */
                nextToken?: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["GetPackingSlipListResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["GetPackingSlipListResponse"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["GetPackingSlipListResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["GetPackingSlipListResponse"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["GetPackingSlipListResponse"];
            };
            /** The request payload is in an unsupported format. */
            415: {
                headers: {};
                schema: definitions["GetPackingSlipListResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["GetPackingSlipListResponse"];
            };
            /** Encountered an unexpected condition which prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["GetPackingSlipListResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["GetPackingSlipListResponse"];
            };
        };
    };
    /**
     * Returns a packing slip based on the purchaseOrderNumber that you specify.
     *
     * **Usage Plans:**
     *
     * | Plan type | Rate (requests per second) | Burst |
     * | ---- | ---- | ---- |
     * |Default| 10 | 10 |
     * |Selling partner specific| Variable | Variable |
     *
     * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    getPackingSlip: {
        parameters: {
            path: {
                /** The purchaseOrderNumber for the packing slip you want. */
                purchaseOrderNumber: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["GetPackingSlipResponse"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["GetPackingSlipResponse"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["GetPackingSlipResponse"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["GetPackingSlipResponse"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["GetPackingSlipResponse"];
            };
            /** The request payload is in an unsupported format. */
            415: {
                headers: {};
                schema: definitions["GetPackingSlipResponse"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["GetPackingSlipResponse"];
            };
            /** Encountered an unexpected condition which prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["GetPackingSlipResponse"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["GetPackingSlipResponse"];
            };
        };
    };
}
export interface external {
}

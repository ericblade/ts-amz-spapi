/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/vendor/directFulfillment/inventory/v1/warehouses/{warehouseId}/items": {
    /**
     * Submits inventory updates for the specified warehouse for either a partial or full feed of inventory items.
     *
     * **Usage Plans:**
     *
     * | Plan type | Rate (requests per second) | Burst |
     * | ---- | ---- | ---- |
     * |Default| 10 | 10 |
     * |Selling partner specific| Variable | Variable |
     *
     * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    post: operations["submitInventoryUpdate"];
    parameters: {};
  };
}

export interface definitions {
  /** @description The request body for the submitInventoryUpdate operation. */
  SubmitInventoryUpdateRequest: {
    /** @description Inventory details required to update some or all items for the requested warehouse. */
    inventory?: definitions["InventoryUpdate"];
  };
  InventoryUpdate: {
    /** @description ID of the selling party or vendor. */
    sellingParty: definitions["PartyIdentification"];
    /** @description When true, this request contains a full feed. Otherwise, this request contains a partial feed. When sending a full feed, you must send information about all items in the warehouse. Any items not in the full feed are updated as not available. When sending a partial feed, only include the items that need an update to inventory. The status of other items will remain unchanged. */
    isFullUpdate: boolean;
    /** @description A list of inventory items with updated details, including quantity available. */
    items: definitions["ItemDetails"][];
  };
  /** @description Updated inventory details for an item. */
  ItemDetails: {
    /** @description The buyer selected product identification of the item. Either buyerProductIdentifier or vendorProductIdentifier should be submitted. */
    buyerProductIdentifier?: string;
    /** @description The vendor selected product identification of the item. Either buyerProductIdentifier or vendorProductIdentifier should be submitted. */
    vendorProductIdentifier?: string;
    /** @description Total item quantity available in the warehouse. */
    availableQuantity: definitions["ItemQuantity"];
    /** @description When true, the item is permanently unavailable. */
    isObsolete?: boolean;
  };
  PartyIdentification: {
    /** @description Assigned identification for the party. */
    partyId: string;
  };
  /** @description Details of item quantity. */
  ItemQuantity: {
    /** @description Quantity of units available for a specific item. */
    amount?: number;
    /** @description Unit of measure for the available quantity. */
    unitOfMeasure: string;
  };
  /** @description The response schema for the submitInventoryUpdate operation. */
  SubmitInventoryUpdateResponse: {
    /** @description The response payload for the submitInventoryUpdate operation. */
    payload?: definitions["TransactionReference"];
    errors?: definitions["ErrorList"];
  };
  TransactionReference: {
    /** @description GUID to identify this transaction. This value can be used with the Transaction Status API to return the status of this transaction. */
    transactionId?: string;
  };
  /** @description A list of error responses returned when a request is unsuccessful. */
  ErrorList: definitions["Error"][];
  /** @description Error response returned when the request is unsuccessful. */
  Error: {
    /** @description An error code that identifies the type of error that occurred. */
    code: string;
    /** @description A message that describes the error condition. */
    message: string;
    /** @description Additional details that can help the caller understand or fix the issue. */
    details?: string;
  };
}

export interface operations {
  /**
   * Submits inventory updates for the specified warehouse for either a partial or full feed of inventory items.
   *
   * **Usage Plans:**
   *
   * | Plan type | Rate (requests per second) | Burst |
   * | ---- | ---- | ---- |
   * |Default| 10 | 10 |
   * |Selling partner specific| Variable | Variable |
   *
   * The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
   */
  submitInventoryUpdate: {
    parameters: {
      body: {
        body: definitions["SubmitInventoryUpdateRequest"];
      };
      path: {
        /** Identifier for the warehouse for which to update inventory. */
        warehouseId: string;
      };
    };
    responses: {
      /** Success. */
      202: {
        headers: {};
        schema: definitions["SubmitInventoryUpdateResponse"];
      };
      /** Request has missing or invalid parameters and cannot be parsed. */
      400: {
        headers: {};
        schema: definitions["SubmitInventoryUpdateResponse"];
      };
      /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
      403: {
        headers: {};
        schema: definitions["SubmitInventoryUpdateResponse"];
      };
      /** The resource specified does not exist. */
      404: {
        headers: {};
        schema: definitions["SubmitInventoryUpdateResponse"];
      };
      /** The request size exceeded the maximum accepted size. */
      413: {
        headers: {};
        schema: definitions["SubmitInventoryUpdateResponse"];
      };
      /** The request payload is in an unsupported format. */
      415: {
        headers: {};
        schema: definitions["SubmitInventoryUpdateResponse"];
      };
      /** The frequency of requests was greater than allowed. */
      429: {
        headers: {};
        schema: definitions["SubmitInventoryUpdateResponse"];
      };
      /** An unexpected condition occurred that prevented the server from fulfilling the request. */
      500: {
        headers: {};
        schema: definitions["SubmitInventoryUpdateResponse"];
      };
      /** Temporary overloading or maintenance of the server. */
      503: {
        headers: {};
        schema: definitions["SubmitInventoryUpdateResponse"];
      };
    };
  };
}

export interface external {}

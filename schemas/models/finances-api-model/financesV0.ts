/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/finances/v0/financialEventGroups": {
    /**
     * Returns financial event groups for a given date range.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 0.5 | 30 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    get: operations["listFinancialEventGroups"];
  };
  "/finances/v0/financialEventGroups/{eventGroupId}/financialEvents": {
    /**
     * Returns all financial events for the specified financial event group.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 0.5 | 30 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    get: operations["listFinancialEventsByGroupId"];
  };
  "/finances/v0/orders/{orderId}/financialEvents": {
    /**
     * Returns all financial events for the specified order.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 0.5 | 30 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    get: operations["listFinancialEventsByOrderId"];
  };
  "/finances/v0/financialEvents": {
    /**
     * Returns financial events for the specified data range.
     *
     * **Usage Plan:**
     *
     * | Rate (requests per second) | Burst |
     * | ---- | ---- |
     * | 0.5 | 30 |
     *
     * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
     */
    get: operations["listFinancialEvents"];
  };
}

export interface definitions {
  /** @description An event related to an Adhoc Disbursement. */
  AdhocDisbursementEvent: {
    /**
     * @description Indicates the type of transaction.
     *
     * Example: "Disbursed to Amazon Gift Card balance"
     */
    TransactionType?: string;
    /** @description The date and time when the financial event was posted. */
    PostedDate?: definitions["Date"];
    /** @description The identifier for the transaction. */
    TransactionId?: string;
    /** @description The amount of the transaction. */
    TransactionAmount?: definitions["Currency"];
  };
  /** @description A list of `AdhocDisbursement` events. */
  AdhocDisbursementEventList: definitions["AdhocDisbursementEvent"][];
  /** @description An adjustment to the seller's account. */
  AdjustmentEvent: {
    /**
     * @description The type of adjustment.
     *
     * Possible values:
     *
     * * FBAInventoryReimbursement - An FBA inventory reimbursement to a seller's account. This occurs if a seller's inventory is damaged.
     *
     * * ReserveEvent - A reserve event that is generated at the time of a settlement period closing. This occurs when some money from a seller's account is held back.
     *
     * * PostageBilling - The amount paid by a seller for shipping labels.
     *
     * * PostageRefund - The reimbursement of shipping labels purchased for orders that were canceled or refunded.
     *
     * * LostOrDamagedReimbursement - An Amazon Easy Ship reimbursement to a seller's account for a package that we lost or damaged.
     *
     * * CanceledButPickedUpReimbursement - An Amazon Easy Ship reimbursement to a seller's account. This occurs when a package is picked up and the order is subsequently canceled. This value is used only in the India marketplace.
     *
     * * ReimbursementClawback - An Amazon Easy Ship reimbursement clawback from a seller's account. This occurs when a prior reimbursement is reversed. This value is used only in the India marketplace.
     *
     * * SellerRewards - An award credited to a seller's account for their participation in an offer in the Seller Rewards program. Applies only to the India marketplace.
     */
    AdjustmentType?: string;
    /** @description The date and time when the financial event was posted. */
    PostedDate?: definitions["Date"];
    /** @description The amount adjusted as part of this event. */
    AdjustmentAmount?: definitions["Currency"];
    /** @description A list of information about adjustments to an account. */
    AdjustmentItemList?: definitions["AdjustmentItemList"];
  };
  /** @description A list of adjustment event information for the seller's account. */
  AdjustmentEventList: definitions["AdjustmentEvent"][];
  /** @description An item in an adjustment to the seller's account. */
  AdjustmentItem: {
    /** @description Represents the number of units in the seller's inventory when the AdustmentType is FBAInventoryReimbursement. */
    Quantity?: string;
    /** @description The per unit value of the item. */
    PerUnitAmount?: definitions["Currency"];
    /** @description The total value of the item. */
    TotalAmount?: definitions["Currency"];
    /** @description The seller SKU of the item. The seller SKU is qualified by the seller's seller ID, which is included with every call to the Selling Partner API. */
    SellerSKU?: string;
    /** @description A unique identifier assigned to products stored in and fulfilled from a fulfillment center. */
    FnSKU?: string;
    /** @description A short description of the item. */
    ProductDescription?: string;
    /** @description The Amazon Standard Identification Number (ASIN) of the item. */
    ASIN?: string;
  };
  /** @description A list of information about items in an adjustment to the seller's account. */
  AdjustmentItemList: definitions["AdjustmentItem"][];
  /** @description An expense related to an affordability promotion. */
  AffordabilityExpenseEvent: {
    /** @description An Amazon-defined identifier for an order. */
    AmazonOrderId?: string;
    /** @description The date and time when the financial event was created. */
    PostedDate?: definitions["Date"];
    /** @description An encrypted, Amazon-defined marketplace identifier. */
    MarketplaceId?: string;
    /**
     * @description Indicates the type of transaction.
     *
     * Possible values:
     *
     * * Charge - For an affordability promotion expense.
     *
     * * Refund - For an affordability promotion expense reversal.
     */
    TransactionType?: string;
    /** @description The amount charged for clicks incurred under the Sponsored Products program. */
    BaseExpense?: definitions["Currency"];
    /** @description Central Goods and Service Tax, charged and collected by the central government. */
    TaxTypeCGST: definitions["Currency"];
    /** @description State Goods and Service Tax, charged and collected by the state government. */
    TaxTypeSGST: definitions["Currency"];
    /** @description Integrated Goods and Service Tax, charged and collected by the central government. */
    TaxTypeIGST: definitions["Currency"];
    /** @description The total amount charged to the seller. TotalExpense = BaseExpense + TaxTypeIGST + TaxTypeCGST + TaxTypeSGST. */
    TotalExpense?: definitions["Currency"];
  };
  /** @description A list of expense information related to an affordability promotion. */
  AffordabilityExpenseEventList: definitions["AffordabilityExpenseEvent"][];
  BigDecimal: number;
  /**
   * @description A charge on the seller's account.
   *
   * Possible values:
   *
   * * Principal - The selling price of the order item, equal to the selling price of the item multiplied by the quantity ordered.
   *
   * * Tax - The tax collected by the seller on the Principal.
   *
   * * MarketplaceFacilitatorTax-Principal - The tax withheld on the Principal.
   *
   * * MarketplaceFacilitatorTax-Shipping - The tax withheld on the ShippingCharge.
   *
   * * MarketplaceFacilitatorTax-Giftwrap - The tax withheld on the Giftwrap charge.
   *
   * * MarketplaceFacilitatorTax-Other - The tax withheld on other miscellaneous charges.
   *
   * * Discount - The promotional discount for an order item.
   *
   * * TaxDiscount - The tax amount deducted for promotional rebates.
   *
   * * CODItemCharge - The COD charge for an order item.
   *
   * * CODItemTaxCharge - The tax collected by the seller on a CODItemCharge.
   *
   * * CODOrderCharge - The COD charge for an order.
   *
   * * CODOrderTaxCharge - The tax collected by the seller on a CODOrderCharge.
   *
   * * CODShippingCharge - Shipping charges for a COD order.
   *
   * * CODShippingTaxCharge - The tax collected by the seller on a CODShippingCharge.
   *
   * * ShippingCharge - The shipping charge.
   *
   * * ShippingTax - The tax collected by the seller on a ShippingCharge.
   *
   * * Goodwill - The amount given to a buyer as a gesture of goodwill or to compensate for pain and suffering in the buying experience.
   *
   * * Giftwrap - The gift wrap charge.
   *
   * * GiftwrapTax - The tax collected by the seller on a Giftwrap charge.
   *
   * * RestockingFee - The charge applied to the buyer when returning a product in certain categories.
   *
   * * ReturnShipping - The amount given to the buyer to compensate for shipping the item back in the event we are at fault.
   *
   * * PointsFee - The value of Amazon Points deducted from the refund if the buyer does not have enough Amazon Points to cover the deduction.
   *
   * * GenericDeduction - A generic bad debt deduction.
   *
   * * FreeReplacementReturnShipping - The compensation for return shipping when a buyer receives the wrong item, requests a free replacement, and returns the incorrect item.
   *
   * * PaymentMethodFee - The fee collected for certain payment methods in certain marketplaces.
   *
   * * ExportCharge - The export duty that is charged when an item is shipped to an international destination as part of the Amazon Global program.
   *
   * * SAFE-TReimbursement - The SAFE-T claim amount for the item.
   *
   * * TCS-CGST - Tax Collected at Source (TCS) for Central Goods and Services Tax (CGST).
   *
   * * TCS-SGST - Tax Collected at Source for State Goods and Services Tax (SGST).
   *
   * * TCS-IGST - Tax Collected at Source for Integrated Goods and Services Tax (IGST).
   *
   * * TCS-UTGST - Tax Collected at Source for Union Territories Goods and Services Tax (UTGST).
   */
  ChargeComponent: {
    /** @description The type of charge. */
    ChargeType?: string;
    /** @description The amount of the charge. */
    ChargeAmount?: definitions["Currency"];
  };
  /** @description A list of charge information on the seller's account. */
  ChargeComponentList: definitions["ChargeComponent"][];
  /** @description A payment instrument. */
  ChargeInstrument: {
    /** @description A short description of the charge instrument. */
    Description?: string;
    /** @description The account tail (trailing digits) of the charge instrument. */
    Tail?: string;
    /** @description The amount charged to this charge instrument. */
    Amount?: definitions["Currency"];
  };
  /** @description A list of payment instruments. */
  ChargeInstrumentList: definitions["ChargeInstrument"][];
  /** @description An event related to charge refund. */
  ChargeRefundEvent: {
    /** @description The date and time when the financial event was posted. */
    PostedDate?: definitions["Date"];
    /**
     * @description The reason given for a charge refund.
     *
     * Example: `SubscriptionFeeCorrection`
     */
    ReasonCode?: string;
    /**
     * @description A description of the Reason Code.
     *
     * Example: `SubscriptionFeeCorrection`
     */
    ReasonCodeDescription?: string;
    /** @description The amount of the charge refund credit. */
    ChargeRefundTransactions?: definitions["ChargeRefundTransaction"];
  };
  /** @description A list of charge refund events. */
  ChargeRefundEventList: definitions["ChargeRefundEvent"][];
  /** @description The charge refund transaction. */
  ChargeRefundTransaction: {
    /** @description The amount of the charge refund credit. */
    ChargeAmount?: definitions["Currency"];
    /** @description The type of charge. */
    ChargeType?: string;
  };
  /** @description An event related to coupon payments. */
  CouponPaymentEvent: {
    /** @description The date and time when the financial event was posted. */
    PostedDate?: definitions["Date"];
    /** @description A coupon identifier. */
    CouponId?: string;
    /** @description The description provided by the seller when they created the coupon. */
    SellerCouponDescription?: string;
    /**
     * Format: int64
     * @description The number of coupon clips or redemptions.
     */
    ClipOrRedemptionCount?: number;
    /** @description A payment event identifier. */
    PaymentEventId?: string;
    FeeComponent?: definitions["FeeComponent"];
    ChargeComponent?: definitions["ChargeComponent"];
    /** @description The FeeComponent value plus the ChargeComponent value. */
    TotalAmount?: definitions["Currency"];
  };
  /** @description A list of coupon payment event information. */
  CouponPaymentEventList: definitions["CouponPaymentEvent"][];
  /** @description A currency type and amount. */
  Currency: {
    /** @description The three-digit currency code in ISO 4217 format. */
    CurrencyCode?: string;
    /** @description The monetary value. */
    CurrencyAmount?: definitions["BigDecimal"];
  };
  /** Format: date-time */
  Date: string;
  /** @description A debt payment or debt adjustment. */
  DebtRecoveryEvent: {
    /**
     * @description The debt recovery type.
     *
     * Possible values:
     *
     * * DebtPayment
     *
     * * DebtPaymentFailure
     *
     * *DebtAdjustment
     */
    DebtRecoveryType?: string;
    /** @description The amount applied for recovery. */
    RecoveryAmount?: definitions["Currency"];
    /** @description The amount returned for overpayment. */
    OverPaymentCredit?: definitions["Currency"];
    DebtRecoveryItemList?: definitions["DebtRecoveryItemList"];
    ChargeInstrumentList?: definitions["ChargeInstrumentList"];
  };
  /** @description A list of debt recovery event information. */
  DebtRecoveryEventList: definitions["DebtRecoveryEvent"][];
  /** @description An item of a debt payment or debt adjustment. */
  DebtRecoveryItem: {
    /** @description The amount applied for the recovery item. */
    RecoveryAmount?: definitions["Currency"];
    /** @description The original debt amount. */
    OriginalAmount?: definitions["Currency"];
    /** @description The beginning date and time of the financial event group that contains the debt. In ISO 8601 date time format. */
    GroupBeginDate?: definitions["Date"];
    /** @description The ending date and time of the financial event group that contains the debt. In ISO 8601 date time format. */
    GroupEndDate?: definitions["Date"];
  };
  /** @description A list of debt recovery item information. */
  DebtRecoveryItemList: definitions["DebtRecoveryItem"][];
  /** @description A payment made directly to a seller. */
  DirectPayment: {
    /**
     * @description The type of payment.
     *
     * Possible values:
     *
     * * StoredValueCardRevenue - The amount that is deducted from the seller's account because the seller received money through a stored value card.
     *
     * * StoredValueCardRefund - The amount that Amazon returns to the seller if the order that is bought using a stored value card is refunded.
     *
     * * PrivateLabelCreditCardRevenue - The amount that is deducted from the seller's account because the seller received money through a private label credit card offered by Amazon.
     *
     * * PrivateLabelCreditCardRefund - The amount that Amazon returns to the seller if the order that is bought using a private label credit card offered by Amazon is refunded.
     *
     * * CollectOnDeliveryRevenue - The COD amount that the seller collected directly from the buyer.
     *
     * * CollectOnDeliveryRefund - The amount that Amazon refunds to the buyer if an order paid for by COD is refunded.
     */
    DirectPaymentType?: string;
    /** @description The amount of the direct payment. */
    DirectPaymentAmount?: definitions["Currency"];
  };
  /** @description A list of direct payment information. */
  DirectPaymentList: definitions["DirectPayment"][];
  /** @description Failed ad hoc disbursement event list. */
  FailedAdhocDisbursementEventList: {
    /**
     * @description The type of fund transfer.
     *
     * Example "Refund"
     */
    FundsTransfersType?: string;
    /** @description The transfer identifier. */
    TransferId?: string;
    /** @description The disbursement identifier. */
    DisbursementId?: string;
    /**
     * @description The type of payment for disbursement.
     *
     * Example `CREDIT_CARD`
     */
    PaymentDisbursementType?: string;
    /**
     * @description The status of the failed `AdhocDisbursement`.
     *
     * Example `HARD_DECLINED`
     */
    Status?: string;
    /** @description The amount of the Adhoc Disbursement. */
    TransferAmount?: definitions["Currency"];
    /** @description The date and time when the financial event was posted. */
    PostedDate?: definitions["Date"];
  };
  /** @description A payment event for Fulfillment by Amazon (FBA) inventory liquidation. This event is used only in the US marketplace. */
  FBALiquidationEvent: {
    /** @description The date and time when the financial event was posted. */
    PostedDate?: definitions["Date"];
    /** @description The identifier for the original removal order. */
    OriginalRemovalOrderId?: string;
    /** @description The amount paid by the liquidator for the seller's inventory. The seller receives this amount minus LiquidationFeeAmount. */
    LiquidationProceedsAmount?: definitions["Currency"];
    /** @description The fee charged to the seller by Amazon for liquidating the seller's FBA inventory. */
    LiquidationFeeAmount?: definitions["Currency"];
  };
  /** @description A list of FBA inventory liquidation payment events. */
  FBALiquidationEventList: definitions["FBALiquidationEvent"][];
  /** @description A fee associated with the event. */
  FeeComponent: {
    /** @description The type of fee. For more information about Selling on Amazon fees, see [Selling on Amazon Fee Schedule](https://sellercentral.amazon.com/gp/help/200336920) on Seller Central. For more information about Fulfillment by Amazon fees, see [FBA features, services and fees](https://sellercentral.amazon.com/gp/help/201074400) on Seller Central. */
    FeeType?: string;
    /** @description The amount of the fee. */
    FeeAmount?: definitions["Currency"];
  };
  /** @description A list of fee component information. */
  FeeComponentList: definitions["FeeComponent"][];
  /** @description Information related to a financial event group. */
  FinancialEventGroup: {
    /** @description A unique identifier for the financial event group. */
    FinancialEventGroupId?: string;
    /**
     * @description The processing status of the financial event group indicates whether the balance of the financial event group is settled.
     *
     * Possible values:
     *
     * * Open
     *
     * * Closed
     */
    ProcessingStatus?: string;
    /** @description The status of the fund transfer. */
    FundTransferStatus?: string;
    /** @description The total amount in the currency of the marketplace in which the transactions occurred. */
    OriginalTotal?: definitions["Currency"];
    /** @description The total amount in the currency of the marketplace in which the funds were disbursed. */
    ConvertedTotal?: definitions["Currency"];
    /** @description The date and time when the disbursement or charge was initiated. Only present for closed settlements. In ISO 8601 date time format. */
    FundTransferDate?: definitions["Date"];
    /** @description The trace identifier used by sellers to look up transactions externally. */
    TraceId?: string;
    /** @description The account tail of the payment instrument. */
    AccountTail?: string;
    /** @description The balance at the beginning of the settlement period. */
    BeginningBalance?: definitions["Currency"];
    /** @description The date and time at which the financial event group is opened. In ISO 8601 date time format. */
    FinancialEventGroupStart?: definitions["Date"];
    /** @description The date and time at which the financial event group is closed. In ISO 8601 date time format. */
    FinancialEventGroupEnd?: definitions["Date"];
  };
  /** @description A list of financial event group information. */
  FinancialEventGroupList: definitions["FinancialEventGroup"][];
  /** @description Contains all information related to a financial event. */
  FinancialEvents: {
    /** @description A list of shipment events. */
    ShipmentEventList?: definitions["ShipmentEventList"];
    /** @description A list of Shipment Settle events. */
    ShipmentSettleEventList?: definitions["ShipmentSettleEventList"];
    /** @description A list of refund events. */
    RefundEventList?: definitions["ShipmentEventList"];
    /** @description A list of guarantee claim events. */
    GuaranteeClaimEventList?: definitions["ShipmentEventList"];
    /** @description A list of chargeback events. */
    ChargebackEventList?: definitions["ShipmentEventList"];
    PayWithAmazonEventList?: definitions["PayWithAmazonEventList"];
    ServiceProviderCreditEventList?: definitions["SolutionProviderCreditEventList"];
    RetrochargeEventList?: definitions["RetrochargeEventList"];
    RentalTransactionEventList?: definitions["RentalTransactionEventList"];
    ProductAdsPaymentEventList?: definitions["ProductAdsPaymentEventList"];
    ServiceFeeEventList?: definitions["ServiceFeeEventList"];
    SellerDealPaymentEventList?: definitions["SellerDealPaymentEventList"];
    DebtRecoveryEventList?: definitions["DebtRecoveryEventList"];
    LoanServicingEventList?: definitions["LoanServicingEventList"];
    AdjustmentEventList?: definitions["AdjustmentEventList"];
    SAFETReimbursementEventList?: definitions["SAFETReimbursementEventList"];
    SellerReviewEnrollmentPaymentEventList?: definitions["SellerReviewEnrollmentPaymentEventList"];
    FBALiquidationEventList?: definitions["FBALiquidationEventList"];
    CouponPaymentEventList?: definitions["CouponPaymentEventList"];
    ImagingServicesFeeEventList?: definitions["ImagingServicesFeeEventList"];
    NetworkComminglingTransactionEventList?: definitions["NetworkComminglingTransactionEventList"];
    AffordabilityExpenseEventList?: definitions["AffordabilityExpenseEventList"];
    AffordabilityExpenseReversalEventList?: definitions["AffordabilityExpenseEventList"];
    RemovalShipmentEventList?: definitions["RemovalShipmentEventList"];
    RemovalShipmentAdjustmentEventList?: definitions["RemovalShipmentAdjustmentEventList"];
    TrialShipmentEventList?: definitions["TrialShipmentEventList"];
    TDSReimbursementEventList?: definitions["TDSReimbursementEventList"];
    AdhocDisbursementEventList?: definitions["AdhocDisbursementEventList"];
    TaxWithholdingEventList?: definitions["TaxWithholdingEventList"];
    ChargeRefundEventList?: definitions["ChargeRefundEventList"];
    FailedAdhocDisbursementEventList?: definitions["FailedAdhocDisbursementEventList"];
    ValueAddedServiceChargeEventList?: definitions["ValueAddedServiceChargeEventList"];
    CapacityReservationBillingEventList?: definitions["CapacityReservationBillingEventList"];
  };
  /** @description A fee event related to Amazon Imaging services. */
  ImagingServicesFeeEvent: {
    /** @description The identifier for the imaging services request. */
    ImagingRequestBillingItemID?: string;
    /** @description The Amazon Standard Identification Number (ASIN) of the item for which the imaging service was requested. */
    ASIN?: string;
    /** @description The date and time when the financial event was posted. */
    PostedDate?: definitions["Date"];
    /** @description A list of fees associated with the event. */
    FeeList?: definitions["FeeComponentList"];
  };
  /** @description A list of fee events related to Amazon Imaging services. */
  ImagingServicesFeeEventList: definitions["ImagingServicesFeeEvent"][];
  /** @description The payload for the listFinancialEventGroups operation. */
  ListFinancialEventGroupsPayload: {
    /** @description When present and not empty, pass this string token in the next request to return the next response page. */
    NextToken?: string;
    FinancialEventGroupList?: definitions["FinancialEventGroupList"];
  };
  /** @description The response schema for the listFinancialEventGroups operation. */
  ListFinancialEventGroupsResponse: {
    /** @description The payload for the listFinancialEventGroups operation. */
    payload?: definitions["ListFinancialEventGroupsPayload"];
    /** @description One or more unexpected errors occurred during the listFinancialEventGroups operation. */
    errors?: definitions["ErrorList"];
  };
  /** @description The payload for the listFinancialEvents operation. */
  ListFinancialEventsPayload: {
    /** @description When present and not empty, pass this string token in the next request to return the next response page. */
    NextToken?: string;
    FinancialEvents?: definitions["FinancialEvents"];
  };
  /** @description The response schema for the listFinancialEvents operation. */
  ListFinancialEventsResponse: {
    /** @description The payload for the listFinancialEvents operation. */
    payload?: definitions["ListFinancialEventsPayload"];
    /** @description One or more unexpected errors occurred during the listFinancialEvents operation. */
    errors?: definitions["ErrorList"];
  };
  /** @description A loan advance, loan payment, or loan refund. */
  LoanServicingEvent: {
    /** @description The amount of the loan. */
    LoanAmount?: definitions["Currency"];
    /**
     * @description The type of event.
     *
     * Possible values:
     *
     * * LoanAdvance
     *
     * * LoanPayment
     *
     * * LoanRefund
     */
    SourceBusinessEventType?: string;
  };
  /** @description A list of loan servicing events. */
  LoanServicingEventList: definitions["LoanServicingEvent"][];
  /** @description A network commingling transaction event. */
  NetworkComminglingTransactionEvent: {
    /**
     * @description The type of network item swap.
     *
     * Possible values:
     *
     * * NetCo - A Fulfillment by Amazon inventory pooling transaction. Available only in the India marketplace.
     *
     * * ComminglingVAT - A commingling VAT transaction. Available only in the UK, Spain, France, Germany, and Italy marketplaces.
     */
    TransactionType?: string;
    /** @description The date and time when the financial event was posted. */
    PostedDate?: definitions["Date"];
    /** @description The identifier for the network item swap. */
    NetCoTransactionID?: string;
    /** @description The reason for the network item swap. */
    SwapReason?: string;
    /** @description The Amazon Standard Identification Number (ASIN) of the swapped item. */
    ASIN?: string;
    /** @description The marketplace in which the event took place. */
    MarketplaceId?: string;
    /** @description The price of the swapped item minus TaxAmount. */
    TaxExclusiveAmount?: definitions["Currency"];
    /** @description The tax on the network item swap paid by the seller. */
    TaxAmount?: definitions["Currency"];
  };
  /** @description A list of network commingling transaction events. */
  NetworkComminglingTransactionEventList: definitions["NetworkComminglingTransactionEvent"][];
  /** @description An event related to the seller's Pay with Amazon account. */
  PayWithAmazonEvent: {
    /** @description An order identifier that is specified by the seller. */
    SellerOrderId?: string;
    /** @description The date and time when the payment transaction is posted. In ISO 8601 date time format. */
    TransactionPostedDate?: definitions["Date"];
    /** @description The type of business object. */
    BusinessObjectType?: string;
    /** @description The sales channel for the transaction. */
    SalesChannel?: string;
    /** @description The charge associated with the event. */
    Charge?: definitions["ChargeComponent"];
    /** @description A list of fees associated with the event. */
    FeeList?: definitions["FeeComponentList"];
    /**
     * @description The type of payment.
     *
     * Possible values:
     *
     * * Sales
     */
    PaymentAmountType?: string;
    /** @description A short description of this payment event. */
    AmountDescription?: string;
    /**
     * @description The fulfillment channel.
     *
     * Possible values:
     *
     * * AFN - Amazon Fulfillment Network (Fulfillment by Amazon)
     *
     * * MFN - Merchant Fulfillment Network (self-fulfilled)
     */
    FulfillmentChannel?: string;
    /** @description The store name where the event occurred. */
    StoreName?: string;
  };
  /** @description A list of events related to the seller's Pay with Amazon account. */
  PayWithAmazonEventList: definitions["PayWithAmazonEvent"][];
  /** @description A Sponsored Products payment event. */
  ProductAdsPaymentEvent: {
    /** @description The date and time when the financial event was posted. */
    postedDate?: definitions["Date"];
    /**
     * @description Indicates if the transaction is for a charge or a refund.
     *
     * Possible values:
     *
     * * charge - Charge
     *
     * * refund - Refund
     */
    transactionType?: string;
    /** @description Identifier for the invoice that the transaction appears in. */
    invoiceId?: string;
    /** @description Base amount of the transaction, before tax. */
    baseValue?: definitions["Currency"];
    /** @description Tax amount of the transaction. */
    taxValue?: definitions["Currency"];
    /** @description The total amount of the transaction. Equal to baseValue + taxValue. */
    transactionValue?: definitions["Currency"];
  };
  /** @description A list of sponsored products payment events. */
  ProductAdsPaymentEventList: definitions["ProductAdsPaymentEvent"][];
  /** @description A promotion applied to an item. */
  Promotion: {
    /** @description The type of promotion. */
    PromotionType?: string;
    /** @description The seller-specified identifier for the promotion. */
    PromotionId?: string;
    /** @description The amount of promotional discount applied to the item. */
    PromotionAmount?: definitions["Currency"];
  };
  /** @description A list of promotions. */
  PromotionList: definitions["Promotion"][];
  /** @description A removal shipment event for a removal order. */
  RemovalShipmentEvent: {
    /** @description The date and time when the financial event was posted. */
    PostedDate?: definitions["Date"];
    /** @description The merchant removal orderId. */
    MerchantOrderId?: string;
    /** @description The identifier for the removal shipment order. */
    OrderId?: string;
    /**
     * @description The type of removal order.
     *
     * Possible values:
     *
     * * WHOLESALE_LIQUIDATION
     */
    TransactionType?: string;
    /** @description A list of removal shipment items. */
    RemovalShipmentItemList?: definitions["RemovalShipmentItemList"];
  };
  /** @description A list of removal shipment event information. */
  RemovalShipmentEventList: definitions["RemovalShipmentEvent"][];
  /** @description Item-level information for a removal shipment. */
  RemovalShipmentItem: {
    /** @description An identifier for an item in a removal shipment. */
    RemovalShipmentItemId?: string;
    /**
     * @description The tax collection model applied to the item.
     *
     * Possible values:
     *
     * * MarketplaceFacilitator - Tax is withheld and remitted to the taxing authority by Amazon on behalf of the seller.
     *
     * * Standard - Tax is paid to the seller and not remitted to the taxing authority by Amazon.
     */
    TaxCollectionModel?: string;
    /** @description The Amazon fulfillment network SKU for the item. */
    FulfillmentNetworkSKU?: string;
    /**
     * Format: int32
     * @description The quantity of the item.
     */
    Quantity?: number;
    /** @description The total amount paid to the seller for the removed item. */
    Revenue?: definitions["Currency"];
    /** @description The fee that Amazon charged to the seller for the removal of the item. The amount is a negative number. */
    FeeAmount?: definitions["Currency"];
    /** @description Tax collected on the revenue. */
    TaxAmount?: definitions["Currency"];
    /** @description The tax withheld and remitted to the taxing authority by Amazon on behalf of the seller. If TaxCollectionModel=MarketplaceFacilitator, then TaxWithheld=TaxAmount (except the TaxWithheld amount is a negative number). Otherwise TaxWithheld=0. */
    TaxWithheld?: definitions["Currency"];
  };
  /** @description A list of information about removal shipment items. */
  RemovalShipmentItemList: definitions["RemovalShipmentItem"][];
  /** @description A financial adjustment event for FBA liquidated inventory. A positive value indicates money owed to Amazon by the buyer (for example, when the charge was incorrectly calculated as less than it should be). A negative value indicates a full or partial refund owed to the buyer (for example, when the buyer receives damaged items or fewer items than ordered). */
  RemovalShipmentAdjustmentEvent: {
    /** @description The date when the financial event was posted. */
    PostedDate?: definitions["Date"];
    /** @description The unique identifier for the adjustment event. */
    AdjustmentEventId?: string;
    /** @description The merchant removal orderId. */
    MerchantOrderId?: string;
    /** @description The orderId for shipping inventory. */
    OrderId?: string;
    /**
     * @description The type of removal order.
     *
     * Possible values:
     *
     * * WHOLESALE_LIQUIDATION.
     */
    TransactionType?: string;
    /** @description A comma-delimited list of Removal shipmentItemAdjustment details for FBA inventory. */
    RemovalShipmentItemAdjustmentList?: definitions["RemovalShipmentItemAdjustment"][];
  };
  /** @description A comma-delimited list of Removal shipmentAdjustment details for FBA inventory. */
  RemovalShipmentAdjustmentEventList: definitions["RemovalShipmentAdjustmentEvent"][];
  /** @description Item-level information for a removal shipment item adjustment. */
  RemovalShipmentItemAdjustment: {
    /** @description An identifier for an item in a removal shipment. */
    RemovalShipmentItemId?: string;
    /**
     * @description The tax collection model applied to the item.
     *
     * Possible values:
     *
     * * MarketplaceFacilitator - Tax is withheld and remitted to the taxing authority by Amazon on behalf of the seller.
     *
     * * Standard - Tax is paid to the seller and not remitted to the taxing authority by Amazon.
     */
    TaxCollectionModel?: string;
    /** @description The Amazon fulfillment network SKU for the item. */
    FulfillmentNetworkSKU?: string;
    /**
     * Format: int32
     * @description Adjusted quantity of removal shipmentItemAdjustment items.
     */
    AdjustedQuantity?: number;
    /** @description The total amount adjusted for disputed items. */
    RevenueAdjustment?: definitions["Currency"];
    /** @description Adjustment on the Tax collected amount on the adjusted revenue. */
    TaxAmountAdjustment?: definitions["Currency"];
    /** @description Adjustment the tax withheld and remitted to the taxing authority by Amazon on behalf of the seller. If TaxCollectionModel=MarketplaceFacilitator, then TaxWithheld=TaxAmount (except the TaxWithheld amount is a negative number). Otherwise TaxWithheld=0. */
    TaxWithheldAdjustment?: definitions["Currency"];
  };
  /** @description An event related to a rental transaction. */
  RentalTransactionEvent: {
    /** @description An Amazon-defined identifier for an order. */
    AmazonOrderId?: string;
    /**
     * @description The type of rental event.
     *
     * Possible values:
     *
     * * RentalCustomerPayment-Buyout - Transaction type that represents when the customer wants to buy out a rented item.
     *
     * * RentalCustomerPayment-Extension - Transaction type that represents when the customer wants to extend the rental period.
     *
     * * RentalCustomerRefund-Buyout - Transaction type that represents when the customer requests a refund for the buyout of the rented item.
     *
     * * RentalCustomerRefund-Extension - Transaction type that represents when the customer requests a refund over the extension on the rented item.
     *
     * * RentalHandlingFee - Transaction type that represents the fee that Amazon charges sellers who rent through Amazon.
     *
     * * RentalChargeFailureReimbursement - Transaction type that represents when Amazon sends money to the seller to compensate for a failed charge.
     *
     * * RentalLostItemReimbursement - Transaction type that represents when Amazon sends money to the seller to compensate for a lost item.
     */
    RentalEventType?: string;
    /**
     * Format: int32
     * @description The number of days that the buyer extended an already rented item. This value is only returned for RentalCustomerPayment-Extension and RentalCustomerRefund-Extension events.
     */
    ExtensionLength?: number;
    /** @description The date and time when the financial event was posted. */
    PostedDate?: definitions["Date"];
    /** @description A list of charges associated with the rental event. */
    RentalChargeList?: definitions["ChargeComponentList"];
    /** @description A list of fees associated with the rental event. */
    RentalFeeList?: definitions["FeeComponentList"];
    /** @description The name of the marketplace. */
    MarketplaceName?: string;
    /** @description The amount of money the customer originally paid to rent the item. This value is only returned for RentalChargeFailureReimbursement and RentalLostItemReimbursement events. */
    RentalInitialValue?: definitions["Currency"];
    /** @description The amount of money Amazon sends the seller to compensate for a lost item or a failed charge. This value is only returned for RentalChargeFailureReimbursement and RentalLostItemReimbursement events. */
    RentalReimbursement?: definitions["Currency"];
    /** @description A list of taxes withheld information for a rental item. */
    RentalTaxWithheldList?: definitions["TaxWithheldComponentList"];
  };
  /** @description A list of rental transaction event information. */
  RentalTransactionEventList: definitions["RentalTransactionEvent"][];
  /** @description A retrocharge or retrocharge reversal. */
  RetrochargeEvent: {
    /**
     * @description The type of event.
     *
     * Possible values:
     *
     * * Retrocharge
     *
     * * RetrochargeReversal
     */
    RetrochargeEventType?: string;
    /** @description An Amazon-defined identifier for an order. */
    AmazonOrderId?: string;
    /** @description The date and time when the financial event was posted. */
    PostedDate?: definitions["Date"];
    /** @description The base tax associated with the retrocharge event. */
    BaseTax?: definitions["Currency"];
    /** @description The shipping tax associated with the retrocharge event. */
    ShippingTax?: definitions["Currency"];
    /** @description The name of the marketplace where the retrocharge event occurred. */
    MarketplaceName?: string;
    /** @description A list of information about taxes withheld. */
    RetrochargeTaxWithheldList?: definitions["TaxWithheldComponentList"];
  };
  /** @description A list of information about Retrocharge or RetrochargeReversal events. */
  RetrochargeEventList: definitions["RetrochargeEvent"][];
  /** @description A SAFE-T claim reimbursement on the seller's account. */
  SAFETReimbursementEvent: {
    /** @description The date and time when the financial event was posted. */
    PostedDate?: definitions["Date"];
    /** @description A SAFE-T claim identifier. */
    SAFETClaimId?: string;
    /** @description The amount of the reimbursement. */
    ReimbursedAmount?: definitions["Currency"];
    /** @description Indicates why the seller was reimbursed. */
    ReasonCode?: string;
    SAFETReimbursementItemList?: definitions["SAFETReimbursementItemList"];
  };
  /** @description A list of SAFETReimbursementEvents. */
  SAFETReimbursementEventList: definitions["SAFETReimbursementEvent"][];
  /** @description An item from a SAFE-T claim reimbursement. */
  SAFETReimbursementItem: {
    /** @description A list of charges associated with the item. */
    itemChargeList?: definitions["ChargeComponentList"];
    /** @description The description of the item as shown on the product detail page on the retail website. */
    productDescription?: string;
    /** @description The number of units of the item being reimbursed. */
    quantity?: string;
  };
  /** @description A list of SAFETReimbursementItems. */
  SAFETReimbursementItemList: definitions["SAFETReimbursementItem"][];
  /** @description An event linked to the payment of a fee related to the specified deal. */
  SellerDealPaymentEvent: {
    /** @description The date and time when the financial event was posted. */
    postedDate?: definitions["Date"];
    /** @description The unique identifier of the deal. */
    dealId?: string;
    /** @description The internal description of the deal. */
    dealDescription?: string;
    /** @description The type of event: SellerDealComplete. */
    eventType?: string;
    /** @description The type of fee: RunLightningDealFee. */
    feeType?: string;
    /** @description The monetary amount of the fee. */
    feeAmount?: definitions["Currency"];
    /** @description The monetary amount of the tax applied. */
    taxAmount?: definitions["Currency"];
    /** @description The total monetary amount paid. */
    totalAmount?: definitions["Currency"];
  };
  /** @description A list of payment events for deal-related fees. */
  SellerDealPaymentEventList: definitions["SellerDealPaymentEvent"][];
  /** @description A fee payment event for the Early Reviewer Program. */
  SellerReviewEnrollmentPaymentEvent: {
    /** @description The date and time when the financial event was posted. */
    PostedDate?: definitions["Date"];
    /** @description An enrollment identifier. */
    EnrollmentId?: string;
    /** @description The Amazon Standard Identification Number (ASIN) of the item that was enrolled in the Early Reviewer Program. */
    ParentASIN?: string;
    FeeComponent?: definitions["FeeComponent"];
    ChargeComponent?: definitions["ChargeComponent"];
    /** @description The FeeComponent value plus the ChargeComponent value. */
    TotalAmount?: definitions["Currency"];
  };
  /** @description A list of information about fee events for the Early Reviewer Program. */
  SellerReviewEnrollmentPaymentEventList: definitions["SellerReviewEnrollmentPaymentEvent"][];
  /** @description A service fee on the seller's account. */
  ServiceFeeEvent: {
    /** @description An Amazon-defined identifier for an order. */
    AmazonOrderId?: string;
    /** @description A short description of the service fee reason. */
    FeeReason?: string;
    /** @description A list of fee components associated with the service fee. */
    FeeList?: definitions["FeeComponentList"];
    /** @description The seller SKU of the item. The seller SKU is qualified by the seller's seller ID, which is included with every call to the Selling Partner API. */
    SellerSKU?: string;
    /** @description A unique identifier assigned by Amazon to products stored in and fulfilled from an Amazon fulfillment center. */
    FnSKU?: string;
    /** @description A short description of the service fee event. */
    FeeDescription?: string;
    /** @description The Amazon Standard Identification Number (ASIN) of the item. */
    ASIN?: string;
  };
  /** @description A list of information about service fee events. */
  ServiceFeeEventList: definitions["ServiceFeeEvent"][];
  /** @description A shipment, refund, guarantee claim, or chargeback. */
  ShipmentEvent: {
    /** @description An Amazon-defined identifier for an order. */
    AmazonOrderId?: string;
    /** @description A seller-defined identifier for an order. */
    SellerOrderId?: string;
    /** @description The name of the marketplace where the event occurred. */
    MarketplaceName?: string;
    /** @description A list of order-level charges. These charges are applicable to Multi-Channel Fulfillment COD orders. */
    OrderChargeList?: definitions["ChargeComponentList"];
    /** @description A list of order-level charge adjustments. These adjustments are applicable to Multi-Channel Fulfillment COD orders. */
    OrderChargeAdjustmentList?: definitions["ChargeComponentList"];
    /** @description A list of shipment-level fees. */
    ShipmentFeeList?: definitions["FeeComponentList"];
    /** @description A list of shipment-level fee adjustments. */
    ShipmentFeeAdjustmentList?: definitions["FeeComponentList"];
    /** @description A list of order-level fees. These charges are applicable to Multi-Channel Fulfillment orders. */
    OrderFeeList?: definitions["FeeComponentList"];
    /** @description A list of order-level fee adjustments. These adjustments are applicable to Multi-Channel Fulfillment orders. */
    OrderFeeAdjustmentList?: definitions["FeeComponentList"];
    /** @description A list of transactions where buyers pay Amazon through one of the credit cards offered by Amazon or where buyers pay a seller directly through COD. */
    DirectPaymentList?: definitions["DirectPaymentList"];
    /** @description The date and time when the financial event was posted. */
    PostedDate?: definitions["Date"];
    ShipmentItemList?: definitions["ShipmentItemList"];
    /** @description A list of shipment item adjustments. */
    ShipmentItemAdjustmentList?: definitions["ShipmentItemList"];
  };
  /** @description A list of shipment event information. */
  ShipmentEventList: definitions["ShipmentEvent"][];
  /** @description A list of `ShipmentEvent` items. */
  ShipmentSettleEventList: definitions["ShipmentEvent"][];
  /** @description An item of a shipment, refund, guarantee claim, or chargeback. */
  ShipmentItem: {
    /** @description The seller SKU of the item. The seller SKU is qualified by the seller's seller ID, which is included with every call to the Selling Partner API. */
    SellerSKU?: string;
    /** @description An Amazon-defined order item identifier. */
    OrderItemId?: string;
    /** @description An Amazon-defined order adjustment identifier defined for refunds, guarantee claims, and chargeback events. */
    OrderAdjustmentItemId?: string;
    /**
     * Format: int32
     * @description The number of items shipped.
     */
    QuantityShipped?: number;
    /** @description A list of charges associated with the shipment item. */
    ItemChargeList?: definitions["ChargeComponentList"];
    /** @description A list of charge adjustments associated with the shipment item. This value is only returned for refunds, guarantee claims, and chargeback events. */
    ItemChargeAdjustmentList?: definitions["ChargeComponentList"];
    /** @description A list of fees associated with the shipment item. */
    ItemFeeList?: definitions["FeeComponentList"];
    /** @description A list of fee adjustments associated with the shipment item. This value is only returned for refunds, guarantee claims, and chargeback events. */
    ItemFeeAdjustmentList?: definitions["FeeComponentList"];
    /** @description A list of taxes withheld information for a shipment item. */
    ItemTaxWithheldList?: definitions["TaxWithheldComponentList"];
    PromotionList?: definitions["PromotionList"];
    /** @description A list of promotion adjustments associated with the shipment item. This value is only returned for refunds, guarantee claims, and chargeback events. */
    PromotionAdjustmentList?: definitions["PromotionList"];
    /** @description The cost of Amazon Points granted for a shipment item. */
    CostOfPointsGranted?: definitions["Currency"];
    /** @description The cost of Amazon Points returned for a shipment item. This value is only returned for refunds, guarantee claims, and chargeback events. */
    CostOfPointsReturned?: definitions["Currency"];
  };
  /** @description A list of shipment items. */
  ShipmentItemList: definitions["ShipmentItem"][];
  /** @description A credit given to a solution provider. */
  SolutionProviderCreditEvent: {
    /** @description The transaction type. */
    ProviderTransactionType?: string;
    /** @description A seller-defined identifier for an order. */
    SellerOrderId?: string;
    /** @description The identifier of the marketplace where the order was placed. */
    MarketplaceId?: string;
    /** @description The two-letter country code of the country associated with the marketplace where the order was placed. */
    MarketplaceCountryCode?: string;
    /** @description The Amazon-defined identifier of the seller. */
    SellerId?: string;
    /** @description The store name where the payment event occurred. */
    SellerStoreName?: string;
    /** @description The Amazon-defined identifier of the solution provider. */
    ProviderId?: string;
    /** @description The store name where the payment event occurred. */
    ProviderStoreName?: string;
    /** @description The amount of the credit. */
    TransactionAmount?: definitions["Currency"];
    /** @description The date and time that the credit transaction was created, in ISO 8601 date time format. */
    TransactionCreationDate?: definitions["Date"];
  };
  /** @description A list of information about solution provider credits. */
  SolutionProviderCreditEventList: definitions["SolutionProviderCreditEvent"][];
  /** @description Period which taxwithholding on seller's account is calculated. */
  TaxWithholdingPeriod: {
    /** @description Start of the time range. */
    StartDate?: definitions["Date"];
    /** @description End of the time range. */
    EndDate?: definitions["Date"];
  };
  /** @description A TaxWithholding event on seller's account. */
  TaxWithholdingEvent: {
    /** @description The date and time when the financial event was posted. */
    PostedDate?: definitions["Date"];
    /** @description The amount which tax was withheld against. */
    BaseAmount?: definitions["Currency"];
    /** @description The amount of the tax withholding deducted from seller's account. */
    WithheldAmount?: definitions["Currency"];
    /** @description Time period for which tax is withheld. */
    TaxWithholdingPeriod?: definitions["TaxWithholdingPeriod"];
  };
  /** @description A list of `TaxWithholding` events. */
  TaxWithholdingEventList: definitions["TaxWithholdingEvent"][];
  /** @description Information about the taxes withheld. */
  TaxWithheldComponent: {
    /**
     * @description The tax collection model applied to the item.
     *
     * Possible values:
     *
     * * MarketplaceFacilitator - Tax is withheld and remitted to the taxing authority by Amazon on behalf of the seller.
     *
     * * Standard - Tax is paid to the seller and not remitted to the taxing authority by Amazon.
     */
    TaxCollectionModel?: string;
    /** @description A list of charges that represent the types and amounts of taxes withheld. */
    TaxesWithheld?: definitions["ChargeComponentList"];
  };
  /** @description A list of information about taxes withheld. */
  TaxWithheldComponentList: definitions["TaxWithheldComponent"][];
  /** @description An event related to a Tax-Deducted-at-Source (TDS) reimbursement. */
  TDSReimbursementEvent: {
    /** @description The date and time when the financial event was posted. */
    PostedDate?: definitions["Date"];
    /** @description The Tax-Deducted-at-Source (TDS) identifier. */
    TDSOrderId?: string;
    /** @description The amount reimbursed. */
    ReimbursedAmount?: definitions["Currency"];
  };
  /** @description A list of `TDSReimbursementEvent` items. */
  TDSReimbursementEventList: definitions["TDSReimbursementEvent"][];
  /** @description An event related to a trial shipment. */
  TrialShipmentEvent: {
    /** @description An Amazon-defined identifier for an order. */
    AmazonOrderId?: string;
    /** @description The identifier of the financial event group. */
    FinancialEventGroupId?: string;
    /** @description The date and time when the financial event was posted. */
    PostedDate?: definitions["Date"];
    /** @description The seller SKU of the item. The seller SKU is qualified by the seller's seller ID, which is included with every call to the Selling Partner API. */
    SKU?: string;
    /** @description A list of fees charged by Amazon for trial shipments. */
    FeeList?: definitions["FeeComponentList"];
  };
  /** @description A list of information about trial shipment financial events. */
  TrialShipmentEventList: definitions["TrialShipmentEvent"][];
  /** @description An event related to a value added service charge. */
  ValueAddedServiceChargeEventList: {
    /**
     * @description Indicates the type of transaction.
     *
     * Example: 'Other Support Service fees'
     */
    TransactionType?: string;
    /** @description The date and time when the financial event was posted. */
    PostedDate?: definitions["Date"];
    /** @description A short description of the service charge event. */
    Description?: string;
    /** @description The amount of the service charge event. */
    TransactionAmount?: definitions["Currency"];
  };
  /** @description An event related to a capacity reservation billing charge. */
  CapacityReservationBillingEvent: {
    /**
     * @description Indicates the type of transaction.
     *
     * Example: "FBA Inventory Fee"
     */
    TransactionType?: string;
    /** @description The date and time when the financial event was posted. */
    PostedDate?: definitions["Date"];
    /** @description A short description of the capacity reservation billing event. */
    Description?: string;
    /** @description The amount of the capacity reservation billing event. */
    TransactionAmount?: definitions["Currency"];
  };
  /** @description A list of `CapacityReservationBillingEvent` events. */
  CapacityReservationBillingEventList: definitions["CapacityReservationBillingEvent"][];
  /** @description A list of error responses returned when a request is unsuccessful. */
  ErrorList: definitions["Error"][];
  /** @description Error response returned when the request is unsuccessful. */
  Error: {
    /** @description An error code that identifies the type of error that occurred. */
    code: string;
    /** @description A message that describes the error condition in a human-readable form. */
    message: string;
    /** @description Additional details that can help the caller understand or fix the issue. */
    details?: string;
  };
}

export interface operations {
  /**
   * Returns financial event groups for a given date range.
   *
   * **Usage Plan:**
   *
   * | Rate (requests per second) | Burst |
   * | ---- | ---- |
   * | 0.5 | 30 |
   *
   * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
   */
  listFinancialEventGroups: {
    parameters: {
      query: {
        /** The maximum number of results to return per page. If the response exceeds the maximum number of transactions or 10 MB, the API responds with 'InvalidInput'. */
        MaxResultsPerPage?: number;
        /** A date used for selecting financial event groups that opened before (but not at) a specified date and time, in ISO 8601 format. The date-time  must be later than FinancialEventGroupStartedAfter and no later than two minutes before the request was submitted. If FinancialEventGroupStartedAfter and FinancialEventGroupStartedBefore are more than 180 days apart, no financial event groups are returned. */
        FinancialEventGroupStartedBefore?: string;
        /** A date used for selecting financial event groups that opened after (or at) a specified date and time, in ISO 8601 format. The date-time must be no later than two minutes before the request was submitted. */
        FinancialEventGroupStartedAfter?: string;
        /** A string token returned in the response of your previous request. */
        NextToken?: string;
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["ListFinancialEventGroupsResponse"];
      };
      /** Request has missing or invalid parameters and cannot be parsed. */
      400: {
        schema: definitions["ListFinancialEventGroupsResponse"];
      };
      /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
      403: {
        headers: {};
        schema: definitions["ListFinancialEventGroupsResponse"];
      };
      /** The resource specified does not exist. */
      404: {
        headers: {};
        schema: definitions["ListFinancialEventGroupsResponse"];
      };
      /** The frequency of requests was greater than allowed. */
      429: {
        headers: {};
        schema: definitions["ListFinancialEventGroupsResponse"];
      };
      /** An unexpected condition occurred that prevented the server from fulfilling the request. */
      500: {
        headers: {};
        schema: definitions["ListFinancialEventGroupsResponse"];
      };
      /** Temporary overloading or maintenance of the server. */
      503: {
        headers: {};
        schema: definitions["ListFinancialEventGroupsResponse"];
      };
    };
  };
  /**
   * Returns all financial events for the specified financial event group.
   *
   * **Usage Plan:**
   *
   * | Rate (requests per second) | Burst |
   * | ---- | ---- |
   * | 0.5 | 30 |
   *
   * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
   */
  listFinancialEventsByGroupId: {
    parameters: {
      query: {
        /** The maximum number of results to return per page. If the response exceeds the maximum number of transactions or 10 MB, the API responds with 'InvalidInput'. */
        MaxResultsPerPage?: number;
        /** A date used for selecting financial events posted after (or at) a specified time. The date-time **must** be more than two minutes before the time of the request, in ISO 8601 date time format. */
        PostedAfter?: string;
        /** A date used for selecting financial events posted before (but not at) a specified time. The date-time must be later than `PostedAfter` and no later than two minutes before the request was submitted, in ISO 8601 date time format. If `PostedAfter` and `PostedBefore` are more than 180 days apart, no financial events are returned. You must specify the `PostedAfter` parameter if you specify the `PostedBefore` parameter. Default: Now minus two minutes. */
        PostedBefore?: string;
        /** A string token returned in the response of your previous request. */
        NextToken?: string;
      };
      path: {
        /** The identifier of the financial event group to which the events belong. */
        eventGroupId: string;
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["ListFinancialEventsResponse"];
      };
      /** Request has missing or invalid parameters and cannot be parsed. */
      400: {
        schema: definitions["ListFinancialEventsResponse"];
      };
      /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
      403: {
        headers: {};
        schema: definitions["ListFinancialEventsResponse"];
      };
      /** The resource specified does not exist. */
      404: {
        headers: {};
        schema: definitions["ListFinancialEventsResponse"];
      };
      /** The frequency of requests was greater than allowed. */
      429: {
        headers: {};
        schema: definitions["ListFinancialEventsResponse"];
      };
      /** An unexpected condition occurred that prevented the server from fulfilling the request. */
      500: {
        headers: {};
        schema: definitions["ListFinancialEventsResponse"];
      };
      /** Temporary overloading or maintenance of the server. */
      503: {
        headers: {};
        schema: definitions["ListFinancialEventsResponse"];
      };
    };
  };
  /**
   * Returns all financial events for the specified order.
   *
   * **Usage Plan:**
   *
   * | Rate (requests per second) | Burst |
   * | ---- | ---- |
   * | 0.5 | 30 |
   *
   * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
   */
  listFinancialEventsByOrderId: {
    parameters: {
      path: {
        /** An Amazon-defined order identifier, in 3-7-7 format. */
        orderId: string;
      };
      query: {
        /** The maximum number of results to return per page. If the response exceeds the maximum number of transactions or 10 MB, the API responds with 'InvalidInput'. */
        MaxResultsPerPage?: number;
        /** A string token returned in the response of your previous request. */
        NextToken?: string;
      };
    };
    responses: {
      /** Financial Events successfully retrieved. */
      200: {
        schema: definitions["ListFinancialEventsResponse"];
      };
      /** Request has missing or invalid parameters and cannot be parsed. */
      400: {
        schema: definitions["ListFinancialEventsResponse"];
      };
      /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
      403: {
        headers: {};
        schema: definitions["ListFinancialEventsResponse"];
      };
      /** The resource specified does not exist. */
      404: {
        headers: {};
        schema: definitions["ListFinancialEventsResponse"];
      };
      /** The frequency of requests was greater than allowed. */
      429: {
        headers: {};
        schema: definitions["ListFinancialEventsResponse"];
      };
      /** An unexpected condition occurred that prevented the server from fulfilling the request. */
      500: {
        headers: {};
        schema: definitions["ListFinancialEventsResponse"];
      };
      /** Temporary overloading or maintenance of the server. */
      503: {
        headers: {};
        schema: definitions["ListFinancialEventsResponse"];
      };
    };
  };
  /**
   * Returns financial events for the specified data range.
   *
   * **Usage Plan:**
   *
   * | Rate (requests per second) | Burst |
   * | ---- | ---- |
   * | 0.5 | 30 |
   *
   * For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
   */
  listFinancialEvents: {
    parameters: {
      query: {
        /** The maximum number of results to return per page. If the response exceeds the maximum number of transactions or 10 MB, the API responds with 'InvalidInput'. */
        MaxResultsPerPage?: number;
        /** A date used for selecting financial events posted after (or at) a specified time. The date-time must be no later than two minutes before the request was submitted, in ISO 8601 date time format. */
        PostedAfter?: string;
        /** A date used for selecting financial events posted before (but not at) a specified time. The date-time must be later than PostedAfter and no later than two minutes before the request was submitted, in ISO 8601 date time format. If PostedAfter and PostedBefore are more than 180 days apart, no financial events are returned. You must specify the PostedAfter parameter if you specify the PostedBefore parameter. Default: Now minus two minutes. */
        PostedBefore?: string;
        /** A string token returned in the response of your previous request. */
        NextToken?: string;
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["ListFinancialEventsResponse"];
      };
      /** Request has missing or invalid parameters and cannot be parsed. */
      400: {
        schema: definitions["ListFinancialEventsResponse"];
      };
      /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
      403: {
        headers: {};
        schema: definitions["ListFinancialEventsResponse"];
      };
      /** The resource specified does not exist. */
      404: {
        headers: {};
        schema: definitions["ListFinancialEventsResponse"];
      };
      /** The frequency of requests was greater than allowed. */
      429: {
        headers: {};
        schema: definitions["ListFinancialEventsResponse"];
      };
      /** An unexpected condition occurred that prevented the server from fulfilling the request. */
      500: {
        headers: {};
        schema: definitions["ListFinancialEventsResponse"];
      };
      /** Temporary overloading or maintenance of the server. */
      503: {
        headers: {};
        schema: definitions["ListFinancialEventsResponse"];
      };
    };
  };
}

export interface external {}

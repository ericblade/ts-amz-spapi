/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    "/vendor/directFulfillment/sandbox/2021-10-28/orders": {
        /** Submits a request to generate test order data for Vendor Direct Fulfillment API entities. */
        post: operations["generateOrderScenarios"];
    };
    "/vendor/directFulfillment/sandbox/2021-10-28/transactions/{transactionId}": {
        /** Returns the status of the transaction indicated by the specified transactionId. If the transaction was successful, also returns the requested test order data. */
        get: operations["getOrderScenarios"];
    };
}
export interface definitions {
    /** @description The request body for the generateOrderScenarios operation. */
    GenerateOrderScenarioRequest: {
        /** @description The list of test orders requested as indicated by party identifiers. */
        orders?: definitions["OrderScenarioRequest"][];
    };
    /** @description The party identifiers required to generate the test data. */
    OrderScenarioRequest: {
        /** @description The identifier of the selling party or vendor. */
        sellingParty: definitions["PartyIdentification"];
        /** @description The warehouse code of the vendor. */
        shipFromParty: definitions["PartyIdentification"];
    };
    /** @description The identification object for the party information. For example, warehouse code or vendor code. Please refer to specific party for more details. */
    PartyIdentification: {
        /** @description Assigned identification for the party. For example, warehouse code or vendor code. Please refer to specific party for more details. */
        partyId: string;
    };
    /** @description A generated string used to pass information to your next request. If NextToken is returned, pass the value of NextToken to the next request. If NextToken is not returned, there are no more order items to return. */
    Pagination: {
        nextToken?: string;
    };
    /** @description A GUID assigned by Amazon to identify this transaction. */
    TransactionReference: {
        transactionId?: string;
    };
    /** @description The payload for the getOrderScenarios operation. */
    TransactionStatus: {
        transactionStatus?: definitions["Transaction"];
    };
    /** @description The transaction details including the status. If the transaction was successful, also includes the requested test order data. */
    Transaction: {
        /** @description The unique identifier returned in the response to the generateOrderScenarios request. */
        transactionId: string;
        /** @description The current processing status of the transaction. */
        status: "FAILURE" | "PROCESSING" | "SUCCESS";
        /** @description Test case data for the transaction. Only available when the transaction status is SUCCESS. */
        testCaseData?: definitions["TestCaseData"];
    };
    /** @description The set of test case data returned in response to the test data request. */
    TestCaseData: {
        /** @description Set of use cases that describes the possible test scenarios. */
        scenarios?: definitions["Scenario"][];
    };
    /** @description A scenario test case response returned when the request is successful. */
    Scenario: {
        /** @description An identifier that identifies the type of scenario that user can use for testing. */
        scenarioId: string;
        /** @description A list of orders that can be used by the caller to test each life cycle or scenario. */
        orders: definitions["TestOrder"][];
    };
    /** @description Error response returned when the request is unsuccessful. */
    TestOrder: {
        /** @description An error code that identifies the type of error that occurred. */
        orderId: string;
    };
    /** @description A list of error responses returned when a request is unsuccessful. */
    ErrorList: {
        errors: definitions["Error"][];
    };
    /** @description Error response returned when the request is unsuccessful. */
    Error: {
        /** @description An error code that identifies the type of error that occured. */
        code: string;
        /** @description A message that describes the error condition. */
        message: string;
        /** @description Additional details that can help the caller understand or fix the issue. */
        details?: string;
    };
}
export interface operations {
    /** Submits a request to generate test order data for Vendor Direct Fulfillment API entities. */
    generateOrderScenarios: {
        parameters: {
            body: {
                body: definitions["GenerateOrderScenarioRequest"];
            };
        };
        responses: {
            /** Success. */
            202: {
                headers: {};
                schema: definitions["TransactionReference"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The request size exceeded the maximum accepted size. */
            413: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The request payload is in an unsupported format. */
            415: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["ErrorList"];
            };
        };
    };
    /** Returns the status of the transaction indicated by the specified transactionId. If the transaction was successful, also returns the requested test order data. */
    getOrderScenarios: {
        parameters: {
            path: {
                /** The transaction identifier returned in the response to the generateOrderScenarios operation. */
                transactionId: string;
            };
        };
        responses: {
            /** Success. */
            200: {
                headers: {};
                schema: definitions["TransactionStatus"];
            };
            /** Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The resource specified does not exist. */
            404: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The request payload is in an unsupported format. */
            415: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** The frequency of requests was greater than allowed. */
            429: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {};
                schema: definitions["ErrorList"];
            };
            /** Temporary overloading or maintenance of the server. */
            503: {
                headers: {};
                schema: definitions["ErrorList"];
            };
        };
    };
}
export interface external {
}
